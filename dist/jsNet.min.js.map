{"version":3,"sources":["jsNet.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ConvLayer","size","_ref","arguments","filterSize","zeroPadding","stride","activation","this","NetMath","NetUtil","format","bind","state","layer","nextLayer","layerIndex","prevLayer","net","conv","FCLayer","channels","PoolLayer","activations","Math","floor","prevLayerOutWidth","max","sqrt","outMapSize","inMapValuesCount","pow","inZPMapValuesCount","Error","filters","concat","map","f","Filter","_this","forEach","filter","weights","channelWeights","weightsRow","weightsInitFn","weightsConfig","activationMap","row","v","errorMap","dropoutMap","bias","random","init","updateFn","activationConfig","eluAlpha","getActivations","filterI","sumMap","convolve","input","sumY","sumX","dropout","emY","emX","weightIndex","neuronI","neurons","neuron","error","_filterI","buildConvErrorMap","_filterI2","_filter","col","errors","_filterI3","_filter2","_row","_col","buildConvDWeights","channel","deltaWeights","_row2","_col2","l2","l2Error","l1","l1Error","abs","weightUpdateFn","maxNorm","maxNormTotal","deltaBias","data","fi","window","exports","n","Neuron","_this2","weightsCount","constructor","name","_this3","ni","dropped","sum","ai","expected","_this4","derivative","reduce","p","c","wi","miniBatchSize","dw","_this5","dwi","Layer","_this6","_ref2","wRow","w","biasGain","weightGains","getWeightGain","_ref3","_ref4","column","setWeightGain","_ref5","_ref6","biasCache","weightsCache","getWeightsCache","_ref7","_ref8","setWeightsCache","_ref9","_ref10","adadeltaBiasCache","adadeltaCache","getAdadeltaCache","_ref11","_ref12","setAdadeltaCache","_ref13","_ref14","m","rreluSlope","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","prime","val","exp","lreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","min","rmsDecay","mt","iterations","vt","rho","_newVal","_ref23","limit","values","_ref24","mean","stdDeviation","x1","x2","r","_ref25","fanIn","fanOut","gaussian","lecunnormal","_ref26","uniform","lecununiform","_ref27","_ref28","rowStart","colStart","filterRow","filterCol","indeces","total","avg","diffs","multiplier","layers","li","setWeight","getWeight","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getHours","getMinutes","getSeconds","join","j","x","zP","slice","extraRows","splice","_i2","vol","mapValues","d","_ref29","inputVol","arrayToVolume","outputMap","paddedLength","fSSpread","di","addZeroPadding","inputY","inputX","weightsY","weightsX","outY","outX","paddedRow","nlFilterI","errMap","emXI","channelsCount","deltaDeltaWeights","channelI","inputValues","inputMap","arrayToMap","_weightsY","_weightsX","_weightsY2","_weightsX2","eY","eX","mapStartI","mapSize","returnArr","rowI","colI","_row3","_col3","_row4","_col4","Network","_ref30","_ref30$layers","_ref30$updateFn","_ref30$activation","_ref30$cost","cost","_ref30$dropout","_ref30$l","_ref30$l2","pool","epochs","includes","distribution","every","item","Number","isInteger","initLayers","ceil","joinLayer","assign","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this7","_ref31","_ref31$epochs","callback","_ref31$log","_ref31$miniBatchSize","_ref31$shuffle","shuffle","Promise","resolve","reject","iterationIndex","epochsCounter","startTime","now","doEpoch","doIteration","hasOwnProperty","applyDeltaWeights","resetDeltaWeights","iterationError","elapsed","setTimeout","testSet","_this8","_ref32","_ref32$log","totalError","testInput","toJSON","fromJSON","get","_this9","_ref33","_ref34","_this10","maxPool","_channel","_row5","_col5","_channel2","errs","_col6","_row6","_col7","_rowI","_colI","_channel3","_row7","_col8","_rowI2","_colI2","_channel4","_row8","_col9","_rowI3","_colI3"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ConvLayer = function () {\n    function ConvLayer(size) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            filterSize = _ref.filterSize,\n            zeroPadding = _ref.zeroPadding,\n            stride = _ref.stride,\n            activation = _ref.activation;\n\n        _classCallCheck(this, ConvLayer);\n\n        if (filterSize) this.filterSize = filterSize;\n        if (stride) this.stride = stride;\n        if (size) this.size = size;\n\n        this.zeroPadding = zeroPadding;\n\n        if (activation != undefined) {\n\n            if (typeof activation == \"boolean\" && !activation) {\n                this.activation = false;\n            } else {\n                this.activation = typeof activation == \"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this);\n            }\n        }\n\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(ConvLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer, layerIndex) {\n\n            this.prevLayer = layer;\n\n            this.size = this.size || 4;\n            this.filterSize = this.filterSize || this.net.conv.filterSize || 3;\n            this.stride = this.stride || this.net.conv.stride || 1;\n\n            switch (true) {\n                case layer instanceof FCLayer:\n                    this.channels = this.net.channels || 1;\n                    break;\n\n                case layer instanceof ConvLayer:\n                    this.channels = layer.size;\n                    break;\n\n                case layer instanceof PoolLayer:\n                    this.channels = layer.activations.length;\n                    break;\n            }\n\n            if (this.zeroPadding == undefined) {\n                this.zeroPadding = this.net.conv.zeroPadding == undefined ? Math.floor(this.filterSize / 2) : this.net.conv.zeroPadding;\n            }\n\n            // Caching calculations\n            var prevLayerOutWidth = layer instanceof FCLayer ? Math.max(Math.floor(Math.sqrt(layer.size / this.channels)), 1) : layer.outMapSize;\n\n            this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2);\n            this.inZPMapValuesCount = Math.pow(prevLayerOutWidth + this.zeroPadding * 2, 2);\n            this.outMapSize = (prevLayerOutWidth - this.filterSize + 2 * this.zeroPadding) / this.stride + 1;\n\n            if (this.outMapSize % 1 != 0) {\n                throw new Error(\"Misconfigured hyperparameters. Activation volume dimensions would be \" + this.outMapSize + \" in conv layer at index \" + layerIndex);\n            }\n\n            this.filters = [].concat(_toConsumableArray(new Array(this.size))).map(function (f) {\n                return new Filter();\n            });\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this = this;\n\n            this.filters.forEach(function (filter) {\n\n                filter.weights = [].concat(_toConsumableArray(new Array(_this.channels))).map(function (channelWeights) {\n                    return [].concat(_toConsumableArray(new Array(_this.filterSize))).map(function (weightsRow) {\n                        return _this.net.weightsInitFn(_this.filterSize * (_this.prevLayer.channels || 1), _this.weightsConfig);\n                    });\n                });\n\n                filter.activationMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.errorMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.dropoutMap = filter.activationMap.map(function (row) {\n                    return row.map(function (v) {\n                        return false;\n                    });\n                });\n                filter.bias = Math.random() * 0.2 - 0.1;\n\n                filter.init({\n                    updateFn: _this.net.updateFn,\n                    activation: _this.net.activationConfig,\n                    eluAlpha: _this.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n\n            var activations = NetUtil.getActivations(this.prevLayer);\n\n            for (var filterI = 0; filterI < this.size; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                filter.sumMap = NetUtil.convolve({\n                    input: activations,\n                    zeroPadding: this.zeroPadding,\n                    weights: filter.weights,\n                    channels: this.channels,\n                    stride: this.stride,\n                    bias: filter.bias\n                });\n\n                for (var sumY = 0; sumY < filter.sumMap.length; sumY++) {\n                    for (var sumX = 0; sumX < filter.sumMap.length; sumX++) {\n                        if (this.state == \"training\" && (filter.dropoutMap[sumY][sumX] = Math.random() > this.net.dropout)) {\n                            filter.activationMap[sumY][sumX] = 0;\n                        } else if (this.activation) {\n                            filter.activationMap[sumY][sumX] = this.activation(filter.sumMap[sumY][sumX], false, filter) / (this.net.dropout || 1);\n                        } else {\n                            filter.activationMap[sumY][sumX] = filter.sumMap[sumY][sumX];\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"backward\",\n        value: function backward() {\n\n            // First, get the filters' error maps\n            if (this.nextLayer instanceof FCLayer) {\n\n                // For each filter, build the errorMap from the weighted neuron errors in the next FCLayer corresponding to each value in the activation map\n                for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                    var filter = this.filters[filterI];\n\n                    for (var emY = 0; emY < filter.errorMap.length; emY++) {\n                        for (var emX = 0; emX < filter.errorMap.length; emX++) {\n\n                            var weightIndex = filterI * Math.pow(this.outMapSize, 2) + emY * filter.errorMap.length + emX;\n\n                            for (var neuronI = 0; neuronI < this.nextLayer.neurons.length; neuronI++) {\n\n                                var neuron = this.nextLayer.neurons[neuronI];\n                                filter.errorMap[emY][emX] += neuron.error * neuron.weights[weightIndex];\n                            }\n                        }\n                    }\n                }\n            } else if (this.nextLayer instanceof ConvLayer) {\n\n                for (var _filterI = 0; _filterI < this.filters.length; _filterI++) {\n                    NetUtil.buildConvErrorMap(this.nextLayer, this.filters[_filterI].errorMap, _filterI);\n                }\n            } else {\n\n                for (var _filterI2 = 0; _filterI2 < this.filters.length; _filterI2++) {\n\n                    var _filter = this.filters[_filterI2];\n\n                    for (var row = 0; row < _filter.errorMap.length; row++) {\n                        for (var col = 0; col < _filter.errorMap.length; col++) {\n                            _filter.errorMap[row][col] = this.nextLayer.errors[_filterI2][row][col];\n                        }\n                    }\n                }\n            }\n\n            // Apply derivative to each error value\n            for (var _filterI3 = 0; _filterI3 < this.filters.length; _filterI3++) {\n\n                var _filter2 = this.filters[_filterI3];\n\n                for (var _row = 0; _row < _filter2.errorMap.length; _row++) {\n                    for (var _col = 0; _col < _filter2.errorMap[0].length; _col++) {\n\n                        if (_filter2.dropoutMap[_row][_col]) {\n                            _filter2.errorMap[_row][_col] = 0;\n                        } else if (this.activation) {\n                            _filter2.errorMap[_row][_col] *= this.activation(_filter2.sumMap[_row][_col], true, _filter2);\n                        }\n                    }\n                }\n            }\n\n            // Then use the error map values to build the delta weights\n            NetUtil.buildConvDWeights(this);\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n                            filter.deltaWeights[channel][row][col] = 0;\n                        }\n                    }\n                }\n\n                for (var _row2 = 0; _row2 < filter.dropoutMap.length; _row2++) {\n                    for (var _col2 = 0; _col2 < filter.dropoutMap[0].length; _col2++) {\n                        filter.dropoutMap[_row2][_col2] = false;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n\n                            if (this.net.l2 != undefined) this.net.l2Error += 0.5 * this.net.l2 * Math.pow(filter.weights[channel][row][col], 2);\n                            if (this.net.l1 != undefined) this.net.l1Error += this.net.l1 * Math.abs(filter.weights[channel][row][col]);\n\n                            filter.weights[channel][row][col] = this.net.weightUpdateFn.bind(this.net, filter.weights[channel][row][col], filter.deltaWeights[channel][row][col], filter, [channel, row, col])();\n\n                            if (this.net.maxNorm != undefined) this.net.maxNormTotal += Math.pow(filter.weights[channel][row][col], 2);\n                        }\n                    }\n                }\n\n                filter.bias = this.net.weightUpdateFn.bind(this.net, filter.bias, filter.deltaBias, filter)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.filters.map(function (filter) {\n                    return {\n                        bias: filter.bias,\n                        weights: filter.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.filters.forEach(function (filter, fi) {\n\n                if (data.weights[fi].weights.length != filter.weights.length) {\n                    throw new Error(\"Mismatched weights depth. Given: \" + data.weights[fi].weights.length + \" Existing: \" + filter.weights.length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                if (data.weights[fi].weights[0].length != filter.weights[0].length) {\n                    throw new Error(\"Mismatched weights size. Given: \" + data.weights[fi].weights[0].length + \" Existing: \" + filter.weights[0].length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                filter.bias = data.weights[fi].bias;\n                filter.weights = data.weights[fi].weights;\n            });\n        }\n    }]);\n\n    return ConvLayer;\n}();\n\ntypeof window == \"undefined\" && (exports.ConvLayer = ConvLayer);\n\"use strict\";\n\nvar FCLayer = function () {\n    function FCLayer(size) {\n        _classCallCheck(this, FCLayer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n) {\n            return new Neuron();\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(FCLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            this.prevLayer = layer;\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron) {\n\n                var weightsCount = void 0;\n\n                switch (_this2.prevLayer.constructor.name) {\n                    case \"FCLayer\":\n                        weightsCount = _this2.prevLayer.size;\n                        break;\n\n                    case \"ConvLayer\":\n                        weightsCount = _this2.prevLayer.filters.length * Math.pow(_this2.prevLayer.outMapSize, 2);\n                        break;\n\n                    case \"PoolLayer\":\n                        weightsCount = _this2.prevLayer.activations.length * Math.pow(_this2.prevLayer.outMapSize, 2);\n                        break;\n                }\n\n                neuron.weights = _this2.net.weightsInitFn(weightsCount, _this2.weightsConfig);\n                neuron.bias = Math.random() * 0.2 - 0.1;\n\n                neuron.init({\n                    updateFn: _this2.net.updateFn,\n                    activationConfig: _this2.net.activationConfig,\n                    eluAlpha: _this2.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n                if (_this3.state == \"training\" && (neuron.dropped = Math.random() > _this3.net.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n\n                    var activations = NetUtil.getActivations(_this3.prevLayer);\n\n                    for (var ai = 0; ai < activations.length; ai++) {\n                        neuron.sum += activations[ai] * neuron.weights[ai];\n                    }\n\n                    neuron.activation = _this3.activation(neuron.sum, false, neuron) / (_this3.net.dropout || 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this4 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this4.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this4.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    var activations = NetUtil.getActivations(_this4.prevLayer);\n\n                    for (var wi = 0; wi < neuron.weights.length; wi++) {\n                        neuron.deltaWeights[wi] += neuron.error * activations[wi] * (1 + ((_this4.net.l2 || 0) + (_this4.net.l1 || 0)) / _this4.net.miniBatchSize * neuron.deltaWeights[wi]);\n                    }\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.neurons.forEach(function (neuron) {\n                return neuron.deltaWeights = neuron.weights.map(function (dw) {\n                    return 0;\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this5 = this;\n\n            this.neurons.forEach(function (neuron) {\n                neuron.deltaWeights.forEach(function (dw, dwi) {\n\n                    if (_this5.net.l2 != undefined) _this5.net.l2Error += 0.5 * _this5.net.l2 * Math.pow(neuron.weights[dwi], 2);\n                    if (_this5.net.l1 != undefined) _this5.net.l1Error += _this5.net.l1 * Math.abs(neuron.weights[dwi]);\n\n                    neuron.weights[dwi] = _this5.net.weightUpdateFn.bind(_this5.net, neuron.weights[dwi], dw, neuron, dwi)();\n\n                    if (_this5.net.maxNorm != undefined) _this5.net.maxNormTotal += Math.pow(neuron.weights[dwi], 2);\n                });\n\n                neuron.bias = _this5.net.weightUpdateFn.bind(_this5.net, neuron.bias, neuron.deltaBias, neuron)();\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.neurons.map(function (neuron) {\n                    return {\n                        bias: neuron.bias,\n                        weights: neuron.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (data.weights[ni].weights.length != neuron.weights.length) {\n                    throw new Error(\"Mismatched weights count. Given: \" + data.weights[ni].weights.length + \" Existing: \" + neuron.weights.length + \". At layers[\" + layerIndex + \"], neurons[\" + ni + \"]\");\n                }\n\n                neuron.bias = data.weights[ni].bias;\n                neuron.weights = data.weights[ni].weights;\n            });\n        }\n    }]);\n\n    return FCLayer;\n}();\n\nvar Layer = FCLayer;\n\ntypeof window == \"undefined\" && (exports.FCLayer = exports.Layer = FCLayer);\n\"use strict\";\n\nvar Filter = function () {\n    function Filter() {\n        _classCallCheck(this, Filter);\n    }\n\n    _createClass(Filter, [{\n        key: \"init\",\n        value: function init() {\n            var _this6 = this;\n\n            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                updateFn = _ref2.updateFn,\n                activation = _ref2.activation,\n                eluAlpha = _ref2.eluAlpha;\n\n            var size = this.weights.length;\n\n            this.deltaWeights = this.weights.map(function (channel) {\n                return channel.map(function (wRow) {\n                    return wRow.map(function (w) {\n                        return 0;\n                    });\n                });\n            });\n            this.deltaBias = 0;\n\n            switch (updateFn) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 1;\n                            });\n                        });\n                    });\n                    this.getWeightGain = function (_ref3) {\n                        var _ref4 = _slicedToArray(_ref3, 3),\n                            channel = _ref4[0],\n                            row = _ref4[1],\n                            column = _ref4[2];\n\n                        return _this6.weightGains[channel][row][column];\n                    };\n                    this.setWeightGain = function (_ref5, v) {\n                        var _ref6 = _slicedToArray(_ref5, 3),\n                            channel = _ref6[0],\n                            row = _ref6[1],\n                            column = _ref6[2];\n\n                        return _this6.weightGains[channel][row][column] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 0;\n                            });\n                        });\n                    });\n                    this.getWeightsCache = function (_ref7) {\n                        var _ref8 = _slicedToArray(_ref7, 3),\n                            channel = _ref8[0],\n                            row = _ref8[1],\n                            column = _ref8[2];\n\n                        return _this6.weightsCache[channel][row][column];\n                    };\n                    this.setWeightsCache = function (_ref9, v) {\n                        var _ref10 = _slicedToArray(_ref9, 3),\n                            channel = _ref10[0],\n                            row = _ref10[1],\n                            column = _ref10[2];\n\n                        return _this6.weightsCache[channel][row][column] = v;\n                    };\n\n                    if (updateFn == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = this.weights.map(function (channel) {\n                            return channel.map(function (wRow) {\n                                return wRow.map(function (w) {\n                                    return 0;\n                                });\n                            });\n                        });\n                        this.getAdadeltaCache = function (_ref11) {\n                            var _ref12 = _slicedToArray(_ref11, 3),\n                                channel = _ref12[0],\n                                row = _ref12[1],\n                                column = _ref12[2];\n\n                            return _this6.adadeltaCache[channel][row][column];\n                        };\n                        this.setAdadeltaCache = function (_ref13, v) {\n                            var _ref14 = _slicedToArray(_ref13, 3),\n                                channel = _ref14[0],\n                                row = _ref14[1],\n                                column = _ref14[2];\n\n                            return _this6.adadeltaCache[channel][row][column] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n            }\n\n            if (activation == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activation == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(_ref15) {\n            var _ref16 = _slicedToArray(_ref15, 3),\n                channel = _ref16[0],\n                row = _ref16[1],\n                column = _ref16[2];\n\n            return this.weights[channel][row][column];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(_ref17, v) {\n            var _ref18 = _slicedToArray(_ref17, 3),\n                channel = _ref18[0],\n                row = _ref18[1],\n                column = _ref18[2];\n\n            this.weights[channel][row][column] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(_ref19) {\n            var _ref20 = _slicedToArray(_ref19, 3),\n                channel = _ref20[0],\n                row = _ref20[1],\n                column = _ref20[2];\n\n            return this.deltaWeights[channel][row][column];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(_ref21, v) {\n            var _ref22 = _slicedToArray(_ref21, 3),\n                channel = _ref22[0],\n                row = _ref22[1],\n                column = _ref22[2];\n\n            this.deltaWeights[channel][row][column] = v;\n        }\n    }]);\n\n    return Filter;\n}();\n\ntypeof window == \"undefined\" && (exports.Filter = Filter);\n\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope || -0.0005 : Math.max((this.lreluSlope || -0.0005) * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossentropy\",\n        value: function crossentropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meansquarederror\",\n        value: function meansquarederror(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"vanillaupdatefn\",\n        value: function vanillaupdatefn(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.getWeightGain(weightI));\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.max(neuron.getWeightGain(weightI) * 0.95, 0.5));\n                } else {\n                    neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n                }\n            } else {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.min(neuron.getWeightGain(weightI) + 0.05, 5));\n                } else {\n                    neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n                }\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, neuron.getWeightsCache(weightI) + Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache += Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"rmsprop\",\n        value: function rmsprop(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rmsDecay * neuron.getWeightsCache(weightI) + (1 - this.rmsDecay) * Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rho * neuron.getWeightsCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                var newVal = value + Math.sqrt((neuron.getAdadeltaCache(weightI) + 1e-6) / (neuron.getWeightsCache(weightI) + 1e-6)) * deltaValue;\n                neuron.setAdadeltaCache(weightI, this.rho * neuron.getAdadeltaCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Weights init\n\n    }, {\n        key: \"uniform\",\n        value: function uniform(size, _ref23) {\n            var limit = _ref23.limit;\n\n            var values = [];\n\n            for (var i = 0; i < size; i++) {\n                values.push(Math.random() * 2 * limit - limit);\n            }\n\n            return values;\n        }\n    }, {\n        key: \"gaussian\",\n        value: function gaussian(size, _ref24) {\n            var mean = _ref24.mean,\n                stdDeviation = _ref24.stdDeviation;\n\n            var values = [];\n\n            // Polar Box Muller\n            for (var i = 0; i < size; i++) {\n                var x1 = void 0,\n                    x2 = void 0,\n                    r = void 0,\n                    y = void 0;\n\n                do {\n                    x1 = 2 * Math.random() - 1;\n                    x2 = 2 * Math.random() - 1;\n                    r = Math.pow(x1, 2) + Math.pow(x2, 2);\n                } while (r >= 1 || !r);\n\n                values.push(mean + x1 * Math.sqrt(-2 * Math.log(r) / r) * stdDeviation);\n            }\n\n            return values;\n        }\n    }, {\n        key: \"xaviernormal\",\n        value: function xaviernormal(size, _ref25) {\n            var fanIn = _ref25.fanIn,\n                fanOut = _ref25.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(2 / (fanIn + fanOut)) }) : NetMath.lecunnormal(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"xavieruniform\",\n        value: function xavieruniform(size, _ref26) {\n            var fanIn = _ref26.fanIn,\n                fanOut = _ref26.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.uniform(size, { limit: Math.sqrt(6 / (fanIn + fanOut)) }) : NetMath.lecununiform(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"lecunnormal\",\n        value: function lecunnormal(size, _ref27) {\n            var fanIn = _ref27.fanIn;\n\n            return NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(1 / fanIn) });\n        }\n    }, {\n        key: \"lecununiform\",\n        value: function lecununiform(size, _ref28) {\n            var fanIn = _ref28.fanIn;\n\n            return NetMath.uniform(size, { limit: Math.sqrt(3 / fanIn) });\n        }\n\n        // Pool\n\n    }, {\n        key: \"maxPool\",\n        value: function maxPool(layer, channel) {\n\n            var activations = NetUtil.getActivations(layer.prevLayer, channel, layer.inMapValuesCount);\n\n            for (var row = 0; row < layer.outMapSize; row++) {\n                for (var col = 0; col < layer.outMapSize; col++) {\n\n                    var rowStart = row * layer.stride;\n                    var colStart = col * layer.stride;\n\n                    // The first value\n                    var activation = activations[rowStart * layer.prevLayerOutWidth + colStart];\n\n                    for (var filterRow = 0; filterRow < layer.size; filterRow++) {\n                        for (var filterCol = 0; filterCol < layer.size; filterCol++) {\n\n                            var value = activations[(rowStart + filterRow) * layer.prevLayerOutWidth + (colStart + filterCol)];\n\n                            if (value > activation) {\n                                activation = value;\n                                layer.indeces[channel][row][col] = [filterRow, filterCol];\n                            }\n                        }\n                    }\n\n                    layer.activations[channel][row][col] = activation;\n                }\n            }\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }, {\n        key: \"standardDeviation\",\n        value: function standardDeviation(arr) {\n            var avg = arr.reduce(function (p, c) {\n                return p + c;\n            }) / arr.length;\n            var diffs = arr.map(function (v) {\n                return v - avg;\n            }).map(function (v) {\n                return Math.pow(v, 2);\n            });\n            return Math.sqrt(diffs.reduce(function (p, c) {\n                return p + c;\n            }) / diffs.length);\n        }\n    }, {\n        key: \"maxNorm\",\n        value: function maxNorm() {\n\n            if (this.maxNormTotal > this.maxNorm) {\n\n                var multiplier = this.maxNorm / (1e-18 + this.maxNormTotal);\n\n                this.layers.forEach(function (layer, li) {\n                    li && layer.neurons.forEach(function (neuron) {\n                        neuron.weights.forEach(function (w, wi) {\n                            return neuron.setWeight(wi, neuron.getWeight(wi) * multiplier);\n                        });\n                    });\n                });\n            }\n\n            this.maxNormTotal = 0;\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (exports.NetMath = NetMath);\n\"use strict\";\n\nvar NetUtil = function () {\n    function NetUtil() {\n        _classCallCheck(this, NetUtil);\n    }\n\n    _createClass(NetUtil, null, [{\n        key: \"format\",\n        value: function format(value) {\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"string\";\n\n            switch (true) {\n\n                case type == \"string\" && typeof value == \"string\":\n                    value = value.replace(/(_|\\s)/g, \"\").toLowerCase();\n                    break;\n\n                case type == \"time\" && typeof value == \"number\":\n                    var date = new Date(value);\n                    var formatted = [];\n\n                    if (value < 1000) {\n                        formatted.push(date.getMilliseconds() + \"ms\");\n                    } else {\n\n                        if (value >= 3600000) formatted.push(date.getHours() + \"h\");\n                        if (value >= 60000) formatted.push(date.getMinutes() + \"m\");\n\n                        formatted.push(date.getSeconds() + \"s\");\n                    }\n\n                    value = formatted.join(\" \");\n                    break;\n            }\n\n            return value;\n        }\n    }, {\n        key: \"shuffle\",\n        value: function shuffle(arr) {\n            for (var i = arr.length; i; i--) {\n                var j = Math.floor(Math.random() * i);\n                var x = arr[i - 1];\n                arr[i - 1] = arr[j];\n                arr[j] = x;\n            }\n        }\n    }, {\n        key: \"addZeroPadding\",\n        value: function addZeroPadding(map, zP) {\n\n            var data = [];\n\n            for (var row = 0; row < map.length; row++) {\n                data.push(map[row].slice(0));\n            }\n\n            var extraRows = [];\n\n            for (var i = 0; i < data.length + 2 * zP; i++) {\n                extraRows.push(0);\n            }\n\n            for (var col = 0; col < data.length; col++) {\n                for (var _i = 0; _i < zP; _i++) {\n                    data[col].splice(0, 0, 0);\n                    data[col].splice(data.length + 1, data.length, 0);\n                }\n            }\n\n            for (var _i2 = 0; _i2 < zP; _i2++) {\n                data.splice(0, 0, extraRows.slice(0));\n                data.splice(data.length, data.length - 1, extraRows.slice(0));\n            }\n\n            return data;\n        }\n    }, {\n        key: \"arrayToMap\",\n        value: function arrayToMap(arr, size) {\n            var map = [];\n\n            for (var i = 0; i < size; i++) {\n                map[i] = [];\n\n                for (var j = 0; j < size; j++) {\n                    map[i][j] = arr[i * size + j];\n                }\n            }\n\n            return map;\n        }\n    }, {\n        key: \"arrayToVolume\",\n        value: function arrayToVolume(arr, channels) {\n\n            var vol = [];\n            var size = Math.sqrt(arr.length / channels);\n            var mapValues = Math.pow(size, 2);\n\n            for (var d = 0; d < Math.floor(arr.length / mapValues); d++) {\n\n                var map = [];\n\n                for (var i = 0; i < size; i++) {\n                    map[i] = [];\n\n                    for (var j = 0; j < size; j++) {\n                        map[i][j] = arr[d * mapValues + i * size + j];\n                    }\n                }\n\n                vol[d] = map;\n            }\n\n            return vol;\n        }\n    }, {\n        key: \"convolve\",\n        value: function convolve(_ref29) {\n            var input = _ref29.input,\n                zeroPadding = _ref29.zeroPadding,\n                weights = _ref29.weights,\n                channels = _ref29.channels,\n                stride = _ref29.stride,\n                bias = _ref29.bias;\n\n\n            var inputVol = NetUtil.arrayToVolume(input, channels);\n            var outputMap = [];\n\n            var paddedLength = inputVol[0].length + zeroPadding * 2;\n            var fSSpread = Math.floor(weights[0].length / 2\n\n            // For each input channels,\n            );for (var di = 0; di < channels; di++) {\n                inputVol[di] = NetUtil.addZeroPadding(inputVol[di], zeroPadding\n                // For each inputY without ZP\n                );for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += stride) {\n                    outputMap[(inputY - fSSpread) / stride] = outputMap[(inputY - fSSpread) / stride] || [];\n                    // For each inputX without zP\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += stride) {\n                        var sum = 0;\n                        // For each weightsY on input\n                        for (var weightsY = 0; weightsY < weights[0].length; weightsY++) {\n                            // For each weightsX on input\n                            for (var weightsX = 0; weightsX < weights[0].length; weightsX++) {\n                                sum += inputVol[di][inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] * weights[di][weightsY][weightsX];\n                            }\n                        }\n\n                        outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] = (outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] || 0) + sum;\n                    }\n                }\n            }\n\n            // Then add bias\n            for (var outY = 0; outY < outputMap.length; outY++) {\n                for (var outX = 0; outX < outputMap.length; outX++) {\n                    outputMap[outY][outX] += bias;\n                }\n            }\n\n            return outputMap;\n        }\n    }, {\n        key: \"buildConvErrorMap\",\n        value: function buildConvErrorMap(nextLayer, errorMap, filterI) {\n\n            // Cache / convenience\n            var zeroPadding = nextLayer.zeroPadding;\n            var paddedLength = errorMap.length + zeroPadding * 2;\n            var fSSpread = Math.floor(nextLayer.filterSize / 2\n\n            // Zero pad and clear the error map, to allow easy convoling\n            );var paddedRow = [];\n\n            for (var val = 0; val < paddedLength; val++) {\n                paddedRow.push(0);\n            }\n\n            for (var row = 0; row < paddedLength; row++) {\n                errorMap[row] = paddedRow.slice(0);\n            }\n\n            // For each channel in filter in the next layer which corresponds to this filter\n            for (var nlFilterI = 0; nlFilterI < nextLayer.size; nlFilterI++) {\n\n                var weights = nextLayer.filters[nlFilterI].weights[filterI];\n                var errMap = nextLayer.filters[nlFilterI].errorMap;\n\n                // Unconvolve their error map using the weights\n                for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += nextLayer.stride) {\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += nextLayer.stride) {\n\n                        for (var weightsY = 0; weightsY < nextLayer.filterSize; weightsY++) {\n                            for (var weightsX = 0; weightsX < nextLayer.filterSize; weightsX++) {\n                                errorMap[inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] += weights[weightsY][weightsX] * errMap[(inputY - fSSpread) / nextLayer.stride][(inputX - fSSpread) / nextLayer.stride];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Take out the zero padding. Rows:\n            errorMap.splice(0, zeroPadding);\n            errorMap.splice(errorMap.length - zeroPadding, errorMap.length\n\n            // Columns:\n            );for (var emXI = 0; emXI < errorMap.length; emXI++) {\n                errorMap[emXI] = errorMap[emXI].splice(zeroPadding, errorMap[emXI].length - zeroPadding * 2);\n            }\n        }\n    }, {\n        key: \"buildConvDWeights\",\n        value: function buildConvDWeights(layer) {\n\n            var weightsCount = layer.filters[0].weights[0].length;\n            var fSSpread = Math.floor(weightsCount / 2);\n            var channelsCount = layer.filters[0].weights.length;\n\n            // Adding an intermediary step to allow regularization to work\n            var deltaDeltaWeights = [];\n\n            // Filling the deltaDeltaWeights with 0 values\n            for (var weightsY = 0; weightsY < weightsCount; weightsY++) {\n                deltaDeltaWeights[weightsY] = [];\n                for (var weightsX = 0; weightsX < weightsCount; weightsX++) {\n                    deltaDeltaWeights[weightsY][weightsX] = 0;\n                }\n            }\n\n            // For each filter\n            for (var filterI = 0; filterI < layer.filters.length; filterI++) {\n\n                var filter = layer.filters[filterI];\n\n                // Each channel will take the error map and the corresponding inputMap from the input...\n                for (var channelI = 0; channelI < channelsCount; channelI++) {\n\n                    var inputValues = NetUtil.getActivations(layer.prevLayer, channelI, layer.inMapValuesCount);\n                    var inputMap = NetUtil.addZeroPadding(NetUtil.arrayToMap(inputValues, Math.sqrt(layer.inMapValuesCount)), layer.zeroPadding\n\n                    // ...slide the filter with correct stride across the zero-padded inputMap...\n                    );for (var inputY = fSSpread; inputY < inputMap.length - fSSpread; inputY += layer.stride) {\n                        for (var inputX = fSSpread; inputX < inputMap.length - fSSpread; inputX += layer.stride) {\n\n                            // ...and at each location...\n                            for (var _weightsY = 0; _weightsY < weightsCount; _weightsY++) {\n                                for (var _weightsX = 0; _weightsX < weightsCount; _weightsX++) {\n\n                                    var activation = inputMap[inputY - fSSpread + _weightsY][inputX - fSSpread + _weightsX];\n\n                                    // Increment and regularize the delta delta weights by the input activation (later multiplied by the error)\n                                    deltaDeltaWeights[_weightsY][_weightsX] += activation * (1 + ((layer.net.l2 || 0) + (layer.net.l1 || 0)) / layer.net.miniBatchSize * filter.weights[channelI][_weightsY][_weightsX]);\n                                }\n                            }\n\n                            var error = filter.errorMap[(inputY - fSSpread) / layer.stride][(inputX - fSSpread) / layer.stride];\n\n                            // Applying and resetting the deltaDeltaWeights\n                            for (var _weightsY2 = 0; _weightsY2 < weightsCount; _weightsY2++) {\n                                for (var _weightsX2 = 0; _weightsX2 < weightsCount; _weightsX2++) {\n                                    filter.deltaWeights[channelI][_weightsY2][_weightsX2] += deltaDeltaWeights[_weightsY2][_weightsX2] * error;\n                                    deltaDeltaWeights[_weightsY2][_weightsX2] = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Increment the deltaBias by the sum of all errors in the filter\n                for (var eY = 0; eY < filter.errorMap.length; eY++) {\n                    for (var eX = 0; eX < filter.errorMap.length; eX++) {\n                        filter.deltaBias += filter.errorMap[eY][eX];\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getActivations\",\n        value: function getActivations(layer, mapStartI, mapSize) {\n\n            var returnArr = [];\n\n            if (arguments.length == 1) {\n\n                if (layer instanceof FCLayer) {\n\n                    for (var ni = 0; ni < layer.neurons.length; ni++) {\n                        returnArr.push(layer.neurons[ni].activation);\n                    }\n                } else if (layer instanceof ConvLayer) {\n\n                    for (var fi = 0; fi < layer.filters.length; fi++) {\n                        for (var rowI = 0; rowI < layer.filters[fi].activationMap.length; rowI++) {\n                            for (var colI = 0; colI < layer.filters[fi].activationMap[rowI].length; colI++) {\n                                returnArr.push(layer.filters[fi].activationMap[rowI][colI]);\n                            }\n                        }\n                    }\n                } else {\n\n                    for (var channel = 0; channel < layer.activations.length; channel++) {\n                        for (var row = 0; row < layer.activations[0].length; row++) {\n                            for (var col = 0; col < layer.activations[0].length; col++) {\n                                returnArr.push(layer.activations[channel][row][col]);\n                            }\n                        }\n                    }\n                }\n            } else {\n\n                if (layer instanceof FCLayer) {\n\n                    for (var i = mapStartI * mapSize; i < (mapStartI + 1) * mapSize; i++) {\n                        returnArr.push(layer.neurons[i].activation);\n                    }\n                } else if (layer instanceof ConvLayer) {\n\n                    for (var _row3 = 0; _row3 < layer.filters[mapStartI].activationMap.length; _row3++) {\n                        for (var _col3 = 0; _col3 < layer.filters[mapStartI].activationMap[_row3].length; _col3++) {\n                            returnArr.push(layer.filters[mapStartI].activationMap[_row3][_col3]);\n                        }\n                    }\n                } else {\n\n                    for (var _row4 = 0; _row4 < layer.activations[mapStartI].length; _row4++) {\n                        for (var _col4 = 0; _col4 < layer.activations[mapStartI].length; _col4++) {\n                            returnArr.push(layer.activations[mapStartI][_row4][_col4]);\n                        }\n                    }\n                }\n            }\n\n            return returnArr;\n        }\n    }]);\n\n    return NetUtil;\n}();\n\ntypeof window == \"undefined\" && (exports.NetUtil = NetUtil);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref30.learningRate,\n            _ref30$layers = _ref30.layers,\n            layers = _ref30$layers === undefined ? [] : _ref30$layers,\n            _ref30$updateFn = _ref30.updateFn,\n            updateFn = _ref30$updateFn === undefined ? \"vanillaupdatefn\" : _ref30$updateFn,\n            _ref30$activation = _ref30.activation,\n            activation = _ref30$activation === undefined ? \"sigmoid\" : _ref30$activation,\n            _ref30$cost = _ref30.cost,\n            cost = _ref30$cost === undefined ? \"meansquarederror\" : _ref30$cost,\n            rmsDecay = _ref30.rmsDecay,\n            rho = _ref30.rho,\n            lreluSlope = _ref30.lreluSlope,\n            eluAlpha = _ref30.eluAlpha,\n            _ref30$dropout = _ref30.dropout,\n            dropout = _ref30$dropout === undefined ? 1 : _ref30$dropout,\n            _ref30$l = _ref30.l2,\n            l2 = _ref30$l === undefined ? true : _ref30$l,\n            _ref30$l2 = _ref30.l1,\n            l1 = _ref30$l2 === undefined ? true : _ref30$l2,\n            maxNorm = _ref30.maxNorm,\n            weightsConfig = _ref30.weightsConfig,\n            channels = _ref30.channels,\n            conv = _ref30.conv,\n            pool = _ref30.pool;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.conv = {};\n        this.pool = {};\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n        this.error = 0;\n        activation = NetUtil.format(activation);\n        updateFn = NetUtil.format(updateFn);\n        cost = NetUtil.format(cost);\n\n        if (l2) {\n            this.l2 = typeof l2 == \"boolean\" ? 0.001 : l2;\n            this.l2Error = 0;\n        }\n\n        if (l1) {\n            this.l1 = typeof l1 == \"boolean\" ? 0.005 : l1;\n            this.l1Error = 0;\n        }\n\n        if (maxNorm) {\n            this.maxNorm = typeof maxNorm == \"boolean\" && maxNorm ? 1000 : maxNorm;\n            this.maxNormTotal = 0;\n        }\n\n        if (learningRate) this.learningRate = learningRate;\n        if (channels) this.channels = channels;\n\n        if (conv) {\n            if (conv.filterSize != undefined) this.conv.filterSize = conv.filterSize;\n            if (conv.zeroPadding != undefined) this.conv.zeroPadding = conv.zeroPadding;\n            if (conv.stride != undefined) this.conv.stride = conv.stride;\n        }\n\n        if (pool) {\n            if (pool.size) this.pool.size = pool.size;\n            if (pool.stride) this.pool.stride = pool.stride;\n        }\n\n        // Activation function / Learning Rate\n        switch (updateFn) {\n\n            case \"rmsprop\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n\n                    switch (activation) {\n\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.updateFn = [false, null, undefined].includes(updateFn) ? \"vanillaupdatefn\" : updateFn;\n        this.weightUpdateFn = NetMath[this.updateFn];\n        this.activation = typeof activation == \"function\" ? activation : NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = typeof cost == \"function\" ? cost : NetMath[cost];\n\n        if (this.updateFn == \"rmsprop\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n\n        // Weights distributiom\n        this.weightsConfig = { distribution: \"xavieruniform\" };\n\n        if (weightsConfig != undefined && weightsConfig.distribution) {\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution);\n        }\n\n        if (this.weightsConfig.distribution == \"uniform\") {\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit != undefined ? weightsConfig.limit : 0.1;\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\n            this.weightsConfig.mean = weightsConfig.mean || 0;\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05;\n        }\n\n        if (typeof this.weightsConfig.distribution == \"function\") {\n            this.weightsInitFn = this.weightsConfig.distribution;\n        } else {\n            this.weightsInitFn = NetMath[this.weightsConfig.distribution];\n        }\n\n        // State\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new FCLayer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (layer) {\n                    return layer instanceof FCLayer || layer instanceof ConvLayer || layer instanceof PoolLayer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"not-defined\":\n                    this.layers[0] = new FCLayer(input);\n                    this.layers[1] = new FCLayer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new FCLayer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.net = this;\n            layer.activation = layer.activation == undefined ? this.activation : layer.activation;\n\n            layer.weightsConfig = {};\n            Object.assign(layer.weightsConfig, this.weightsConfig);\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1], layerIndex);\n\n                layer.weightsConfig.fanIn = layer.prevLayer.size;\n                layer.prevLayer.weightsConfig.fanOut = layer.size;\n\n                layer.init();\n                layer.state = \"initialised\";\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\", expected);\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this7 = this;\n\n            var _ref31 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref31$epochs = _ref31.epochs,\n                epochs = _ref31$epochs === undefined ? 1 : _ref31$epochs,\n                callback = _ref31.callback,\n                _ref31$log = _ref31.log,\n                log = _ref31$log === undefined ? true : _ref31$log,\n                _ref31$miniBatchSize = _ref31.miniBatchSize,\n                miniBatchSize = _ref31$miniBatchSize === undefined ? 1 : _ref31$miniBatchSize,\n                _ref31$shuffle = _ref31.shuffle,\n                shuffle = _ref31$shuffle === undefined ? false : _ref31$shuffle;\n\n            this.miniBatchSize = typeof miniBatchSize == \"boolean\" && miniBatchSize ? dataSet[0].expected.length : miniBatchSize;\n\n            return new Promise(function (resolve, reject) {\n\n                if (shuffle) {\n                    NetUtil.shuffle(dataSet);\n                }\n\n                if (log) {\n                    console.log(\"Training started. Epochs: \" + epochs + \" Batch Size: \" + _this7.miniBatchSize);\n                }\n\n                if (dataSet === undefined || dataSet === null) {\n                    return void reject(\"No data provided\");\n                }\n\n                if (_this7.state != \"initialised\") {\n                    _this7.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this7.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var startTime = Date.now();\n\n                var doEpoch = function doEpoch() {\n                    _this7.epochs++;\n                    _this7.error = 0;\n                    iterationIndex = 0;\n\n                    if (_this7.l2Error != undefined) _this7.l2Error = 0;\n                    if (_this7.l1Error != undefined) _this7.l1Error = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this7.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this7.backward(target);\n\n                    if (++iterationIndex % _this7.miniBatchSize == 0) {\n                        _this7.applyDeltaWeights();\n                        _this7.resetDeltaWeights();\n                    } else if (iterationIndex >= dataSet.length) {\n                        _this7.applyDeltaWeights();\n                    }\n\n                    var iterationError = _this7.cost(target, output);\n                    var elapsed = Date.now() - startTime;\n                    _this7.error += iterationError;\n                    _this7.iterations++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this7.iterations,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this7), 0);\n                    } else {\n                        epochsCounter++;\n\n                        if (log) {\n                            console.log(\"Epoch: \" + _this7.epochs + \" Error: \" + _this7.error / iterationIndex + (_this7.l2 == undefined ? \"\" : \" L2 Error: \" + _this7.l2Error / iterationIndex), \"\\nElapsed: \" + NetUtil.format(elapsed, \"time\") + \" Average Duration: \" + NetUtil.format(elapsed / epochsCounter, \"time\"));\n                        }\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this7.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n\n                            if (log) {\n                                console.log(\"Training finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                            }\n                            resolve();\n                        }\n                    }\n                };\n\n                _this7.resetDeltaWeights();\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this8 = this;\n\n            var _ref32 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref32$log = _ref32.log,\n                log = _ref32$log === undefined ? true : _ref32$log,\n                callback = _ref32.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (log) {\n                    console.log(\"Testing started\");\n                }\n\n                var totalError = 0;\n                var iterationIndex = 0;\n                var startTime = Date.now();\n\n                var testInput = function testInput() {\n\n                    var input = testSet[iterationIndex].input;\n                    var output = _this8.forward(input);\n                    var target = testSet[iterationIndex].expected || testSet[iterationIndex].output;\n                    var elapsed = Date.now() - startTime;\n\n                    var iterationError = _this8.cost(target, output);\n                    totalError += iterationError;\n                    iterationIndex++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: iterationIndex,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < testSet.length) {\n                        setTimeout(testInput.bind(_this8), 0);\n                    } else {\n\n                        if (log) {\n                            console.log(\"Testing finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                        }\n\n                        resolve(totalError / testSet.length);\n                    }\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                return li && layer.resetDeltaWeights();\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n\n            this.layers.forEach(function (layer, li) {\n                return li && layer.applyDeltaWeights();\n            });\n\n            if (this.maxNorm != undefined) {\n                this.maxNormTotal = Math.sqrt(this.maxNormTotal);\n                NetMath.maxNorm.bind(this)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return layer.toJSON();\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            if (data.layers.length != this.layers.length) {\n                throw new Error(\"Mismatched layers (\" + data.layers.length + \" layers in import data, but \" + this.layers.length + \" configured)\");\n            }\n\n            this.resetDeltaWeights();\n            this.layers.forEach(function (layer, li) {\n                return li && layer.fromJSON(data.layers[li], li);\n            });\n        }\n    }], [{\n        key: \"version\",\n        get: function get() {\n            return \"2.0.0\";\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (exports.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron() {\n        _classCallCheck(this, Neuron);\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init() {\n            var _this9 = this;\n\n            var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                updateFn = _ref33.updateFn,\n                activation = _ref33.activation,\n                eluAlpha = _ref33.eluAlpha;\n\n            var size = this.weights.length;\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (updateFn) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.getWeightGain = function (i) {\n                        return _this9.weightGains[i];\n                    };\n                    this.setWeightGain = function (i, v) {\n                        return _this9.weightGains[i] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n                    this.getWeightsCache = function (i) {\n                        return _this9.weightsCache[i];\n                    };\n                    this.setWeightsCache = function (i, v) {\n                        return _this9.weightsCache[i] = v;\n                    };\n\n                    if (updateFn == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.getAdadeltaCache = function (i) {\n                            return _this9.adadeltaCache[i];\n                        };\n                        this.setAdadeltaCache = function (i, v) {\n                            return _this9.adadeltaCache[i] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activation == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activation == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(i) {\n            return this.weights[i];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(i, v) {\n            this.weights[i] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(i) {\n            return this.deltaWeights[i];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(i, v) {\n            this.deltaWeights[i] = v;\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (exports.Neuron = Neuron);\n\"use strict\";\n\nvar PoolLayer = function () {\n    function PoolLayer(size) {\n        var _ref34 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            stride = _ref34.stride,\n            activation = _ref34.activation;\n\n        _classCallCheck(this, PoolLayer);\n\n        if (size) this.size = size;\n        if (stride) this.stride = stride;\n\n        if (activation != undefined && activation != false) {\n            this.activation = typeof activation == \"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this);\n        } else {\n            this.activation = false;\n        }\n    }\n\n    _createClass(PoolLayer, [{\n        key: \"init\",\n        value: function init() {}\n    }, {\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer, layerIndex) {\n            var _this10 = this;\n\n            this.prevLayer = layer;\n            this.size = this.size || this.net.pool.size || 2;\n            this.stride = this.stride || this.net.pool.stride || this.size;\n\n            var prevLayerOutWidth = layer.outMapSize;\n\n            switch (layer.constructor.name) {\n\n                case \"FCLayer\":\n                    this.channels = this.net.channels;\n                    prevLayerOutWidth = Math.max(Math.floor(Math.sqrt(layer.size / this.channels)), 1);\n                    break;\n\n                case \"ConvLayer\":\n                    this.channels = layer.size;\n                    break;\n\n                case \"PoolLayer\":\n                    this.channels = layer.channels;\n                    break;\n            }\n\n            this.prevLayerOutWidth = prevLayerOutWidth;\n            this.outMapSize = (prevLayerOutWidth - this.size) / this.stride + 1;\n            this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2);\n\n            if (this.outMapSize % 1 != 0) {\n                throw new Error(\"Misconfigured hyperparameters. Activation volume dimensions would be \" + this.outMapSize + \" in pool layer at index \" + layerIndex);\n            }\n\n            this.activations = [].concat(_toConsumableArray(new Array(this.channels))).map(function (channel) {\n                return [].concat(_toConsumableArray(new Array(_this10.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this10.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n            });\n            this.errors = [].concat(_toConsumableArray(new Array(this.channels))).map(function (channel) {\n                return [].concat(_toConsumableArray(new Array(prevLayerOutWidth))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(prevLayerOutWidth))).map(function (v) {\n                        return 0;\n                    });\n                });\n            });\n            this.indeces = this.activations.map(function (channel) {\n                return channel.map(function (row) {\n                    return row.map(function (v) {\n                        return [0, 0];\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n            for (var channel = 0; channel < this.channels; channel++) {\n\n                NetMath.maxPool(this, channel\n\n                // Apply activations\n                );if (this.activation) {\n                    for (var row = 0; row < this.outMapSize; row++) {\n                        for (var col = 0; col < this.outMapSize; col++) {\n                            this.activations[channel][row][col] = this.activation(this.activations[channel][row][col], false, this.net);\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"backward\",\n        value: function backward() {\n\n            // Clear the existing error values, first\n            for (var channel = 0; channel < this.channels; channel++) {\n                for (var row = 0; row < this.errors[0].length; row++) {\n                    for (var col = 0; col < this.errors[0].length; col++) {\n                        this.errors[channel][row][col] = 0;\n                    }\n                }\n            }\n\n            if (this.nextLayer instanceof FCLayer) {\n\n                for (var _channel = 0; _channel < this.channels; _channel++) {\n                    for (var _row5 = 0; _row5 < this.outMapSize; _row5++) {\n                        for (var _col5 = 0; _col5 < this.outMapSize; _col5++) {\n\n                            var rowI = this.indeces[_channel][_row5][_col5][0] + _row5 * this.stride;\n                            var colI = this.indeces[_channel][_row5][_col5][1] + _col5 * this.stride;\n                            var neuronI = _channel * Math.pow(this.outMapSize, 2) + _row5 * this.outMapSize + _col5;\n\n                            var weightIndex = _channel * Math.pow(this.outMapSize, 2) + _row5 * this.outMapSize + _col5;\n\n                            for (var neuron = 0; neuron < this.nextLayer.neurons.length; neuron++) {\n                                this.errors[_channel][rowI][colI] += this.nextLayer.neurons[neuron].error * this.nextLayer.neurons[neuron].weights[weightIndex];\n                            }\n                        }\n                    }\n                }\n            } else if (this.nextLayer instanceof ConvLayer) {\n\n                for (var _channel2 = 0; _channel2 < this.channels; _channel2++) {\n\n                    var errs = [];\n\n                    for (var _col6 = 0; _col6 < this.outMapSize; _col6++) {\n                        errs[_col6] = 0;\n                    }\n\n                    // Convolve on the error map\n                    NetUtil.buildConvErrorMap(this.nextLayer, errs, _channel2);\n\n                    for (var _row6 = 0; _row6 < this.outMapSize; _row6++) {\n                        for (var _col7 = 0; _col7 < this.outMapSize; _col7++) {\n\n                            var _rowI = this.indeces[_channel2][_row6][_col7][0] + _row6 * this.stride;\n                            var _colI = this.indeces[_channel2][_row6][_col7][1] + _col7 * this.stride;\n\n                            this.errors[_channel2][_rowI][_colI] += errs[_row6][_col7];\n                        }\n                    }\n                }\n            } else {\n\n                for (var _channel3 = 0; _channel3 < this.channels; _channel3++) {\n                    for (var _row7 = 0; _row7 < this.outMapSize; _row7++) {\n                        for (var _col8 = 0; _col8 < this.outMapSize; _col8++) {\n\n                            var _rowI2 = this.indeces[_channel3][_row7][_col8][0] + _row7 * this.stride;\n                            var _colI2 = this.indeces[_channel3][_row7][_col8][1] + _col8 * this.stride;\n\n                            this.errors[_channel3][_rowI2][_colI2] += this.nextLayer.errors[_channel3][_row7][_col8];\n                        }\n                    }\n                }\n            }\n\n            // Apply derivatives\n            if (this.activation) {\n                for (var _channel4 = 0; _channel4 < this.channels; _channel4++) {\n\n                    for (var _row8 = 0; _row8 < this.indeces[_channel4].length; _row8++) {\n                        for (var _col9 = 0; _col9 < this.indeces[_channel4].length; _col9++) {\n\n                            var _rowI3 = this.indeces[_channel4][_row8][_col9][0] + _row8 * this.stride;\n                            var _colI3 = this.indeces[_channel4][_row8][_col9][1] + _col9 * this.stride;\n\n                            this.errors[_channel4][_rowI3][_colI3] *= this.activation(this.errors[_channel4][_rowI3][_colI3], true, this.net);\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {}\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {}\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {};\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON() {}\n    }]);\n\n    return PoolLayer;\n}();\n\ntypeof window == \"undefined\" && (exports.PoolLayer = PoolLayer);\n//# sourceMappingURL=jsNet.concat.js.map\n//# sourceMappingURL=jsNet.min.js.map\n"]}