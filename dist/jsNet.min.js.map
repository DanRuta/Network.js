{"version":3,"sources":["jsNet.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ConvLayer","size","_ref","arguments","filterSize","zeroPadding","stride","activation","this","NetMath","NetUtil","format","bind","state","layer","nextLayer","layerIndex","prevLayer","net","conv","constructor","name","channels","activations","Math","floor","prevLayerOutWidth","FCLayer","max","sqrt","outMapSize","inMapValuesCount","pow","inZPMapValuesCount","Error","filters","concat","map","f","Filter","_this","forEach","filter","weights","channelWeights","weightsRow","weightsInitFn","weightsConfig","activationMap","row","v","errorMap","dropoutMap","bias","random","init","updateFn","activationConfig","eluAlpha","getActivations","filterI","sumMap","convolve","input","sumY","sumX","dropout","emY","emX","weightIndex","neuronI","neurons","neuron","error","_filterI","buildConvErrorMap","_filterI2","_filter","col","errors","_filterI3","_filter2","_row","_col","buildConvDWeights","channel","deltaWeights","_row2","_col2","l2","l2Error","l1","l1Error","abs","weightUpdateFn","maxNorm","maxNormTotal","deltaBias","data","fi","window","exports","n","Neuron","_this2","weightsCount","_this3","ni","dropped","sum","ai","expected","_this4","derivative","reduce","p","c","wi","miniBatchSize","dw","_this5","dwi","Layer","_this6","_ref2","wRow","w","biasGain","weightGains","getWeightGain","_ref3","_ref4","column","setWeightGain","_ref5","_ref6","biasCache","weightsCache","getWeightsCache","_ref7","_ref8","setWeightsCache","_ref9","_ref10","adadeltaBiasCache","adadeltaCache","getAdadeltaCache","_ref11","_ref12","setAdadeltaCache","_ref13","_ref14","m","rreluSlope","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","prime","val","exp","lreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","min","rmsDecay","mt","iterations","vt","rho","_newVal","_ref23","limit","values","_ref24","mean","stdDeviation","x1","x2","r","_ref25","fanIn","fanOut","gaussian","lecunnormal","_ref26","uniform","lecununiform","_ref27","_ref28","rowStart","colStart","filterRow","filterCol","indeces","total","avg","diffs","multiplier","layers","li","setWeight","getWeight","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getHours","getMinutes","getSeconds","join","j","x","zP","slice","extraRows","splice","_i2","vol","mapValues","d","_ref29","inputVol","arrayToVolume","outputMap","paddedLength","fSSpread","di","addZeroPadding","inputY","inputX","weightsY","weightsX","outY","outX","paddedRow","nlFilterI","errMap","emXI","channelsCount","deltaDeltaWeights","channelI","inputValues","inputMap","arrayToMap","_weightsY","_weightsX","_weightsY2","_weightsX2","eY","eX","mapStartI","mapSize","returnArr","rowI","colI","_row3","_col3","_row4","_col4","Network","_ref30","_ref30$layers","_ref30$updateFn","_ref30$activation","_ref30$cost","cost","_ref30$dropout","_ref30$l","_ref30$l2","pool","epochs","includes","distribution","every","item","Number","isInteger","initLayers","ceil","joinLayer","assign","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this7","_ref31","_ref31$epochs","callback","_ref31$log","_ref31$miniBatchSize","_ref31$shuffle","shuffle","Promise","resolve","reject","iterationIndex","epochsCounter","startTime","now","doEpoch","doIteration","hasOwnProperty","applyDeltaWeights","resetDeltaWeights","iterationError","elapsed","setTimeout","testSet","_this8","_ref32","_ref32$log","totalError","testInput","toJSON","fromJSON","get","_this9","_ref33","PoolLayer","_ref34","_this10","maxPool","_channel","_row5","_col5","_channel2","errs","_col6","_row6","_col7","_rowI","_colI","_channel3","_row7","_col8","_rowI2","_colI2","_channel4","_row8","_col9","_rowI3","_colI3"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ConvLayer = function () {\n    function ConvLayer(size) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            filterSize = _ref.filterSize,\n            zeroPadding = _ref.zeroPadding,\n            stride = _ref.stride,\n            activation = _ref.activation;\n\n        _classCallCheck(this, ConvLayer);\n\n        if (filterSize) this.filterSize = filterSize;\n        if (stride) this.stride = stride;\n        if (size) this.size = size;\n\n        this.zeroPadding = zeroPadding;\n\n        if (activation != undefined) {\n\n            if (typeof activation == \"boolean\" && !activation) {\n                this.activation = false;\n            } else {\n                this.activation = typeof activation == \"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this);\n            }\n        }\n\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(ConvLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer, layerIndex) {\n\n            this.prevLayer = layer;\n\n            this.size = this.size || 4;\n            this.filterSize = this.filterSize || this.net.conv.filterSize || 3;\n            this.stride = this.stride || this.net.conv.stride || 1;\n\n            switch (layer.constructor.name) {\n                case \"FCLayer\":\n                    this.channels = this.net.channels || 1;\n                    break;\n\n                case \"ConvLayer\":\n                    this.channels = layer.size;\n                    break;\n\n                case \"PoolLayer\":\n                    this.channels = layer.activations.length;\n                    break;\n            }\n\n            if (this.zeroPadding == undefined) {\n                this.zeroPadding = this.net.conv.zeroPadding == undefined ? Math.floor(this.filterSize / 2) : this.net.conv.zeroPadding;\n            }\n\n            // Caching calculations\n            var prevLayerOutWidth = layer instanceof FCLayer ? Math.max(Math.floor(Math.sqrt(layer.size / this.channels)), 1) : layer.outMapSize;\n\n            this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2);\n            this.inZPMapValuesCount = Math.pow(prevLayerOutWidth + this.zeroPadding * 2, 2);\n            this.outMapSize = (prevLayerOutWidth - this.filterSize + 2 * this.zeroPadding) / this.stride + 1;\n\n            if (this.outMapSize % 1 != 0) {\n                throw new Error(\"Misconfigured hyperparameters. Activation volume dimensions would be \" + this.outMapSize + \" in conv layer at index \" + layerIndex);\n            }\n\n            this.filters = [].concat(_toConsumableArray(new Array(this.size))).map(function (f) {\n                return new Filter();\n            });\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this = this;\n\n            this.filters.forEach(function (filter) {\n\n                filter.weights = [].concat(_toConsumableArray(new Array(_this.channels))).map(function (channelWeights) {\n                    return [].concat(_toConsumableArray(new Array(_this.filterSize))).map(function (weightsRow) {\n                        return _this.net.weightsInitFn(_this.filterSize * (_this.prevLayer.channels || 1), _this.weightsConfig);\n                    });\n                });\n\n                filter.activationMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.errorMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.dropoutMap = filter.activationMap.map(function (row) {\n                    return row.map(function (v) {\n                        return false;\n                    });\n                });\n                filter.bias = Math.random() * 0.2 - 0.1;\n\n                filter.init({\n                    updateFn: _this.net.updateFn,\n                    activation: _this.net.activationConfig,\n                    eluAlpha: _this.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n\n            var activations = NetUtil.getActivations(this.prevLayer);\n\n            for (var filterI = 0; filterI < this.size; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                filter.sumMap = NetUtil.convolve({\n                    input: activations,\n                    zeroPadding: this.zeroPadding,\n                    weights: filter.weights,\n                    channels: this.channels,\n                    stride: this.stride,\n                    bias: filter.bias\n                });\n\n                for (var sumY = 0; sumY < filter.sumMap.length; sumY++) {\n                    for (var sumX = 0; sumX < filter.sumMap.length; sumX++) {\n                        if (this.state == \"training\" && (filter.dropoutMap[sumY][sumX] = Math.random() > this.net.dropout)) {\n                            filter.activationMap[sumY][sumX] = 0;\n                        } else if (this.activation) {\n                            filter.activationMap[sumY][sumX] = this.activation(filter.sumMap[sumY][sumX], false, filter) / (this.net.dropout || 1);\n                        } else {\n                            filter.activationMap[sumY][sumX] = filter.sumMap[sumY][sumX];\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"backward\",\n        value: function backward() {\n\n            // First, get the filters' error maps\n            if (this.nextLayer instanceof FCLayer) {\n\n                // For each filter, build the errorMap from the weighted neuron errors in the next FCLayer corresponding to each value in the activation map\n                for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                    var filter = this.filters[filterI];\n\n                    for (var emY = 0; emY < filter.errorMap.length; emY++) {\n                        for (var emX = 0; emX < filter.errorMap.length; emX++) {\n\n                            var weightIndex = filterI * Math.pow(this.outMapSize, 2) + emY * filter.errorMap.length + emX;\n\n                            for (var neuronI = 0; neuronI < this.nextLayer.neurons.length; neuronI++) {\n\n                                var neuron = this.nextLayer.neurons[neuronI];\n                                filter.errorMap[emY][emX] += neuron.error * neuron.weights[weightIndex];\n                            }\n                        }\n                    }\n                }\n            } else if (this.nextLayer instanceof ConvLayer) {\n\n                for (var _filterI = 0; _filterI < this.filters.length; _filterI++) {\n                    NetUtil.buildConvErrorMap(this.nextLayer, this.filters[_filterI].errorMap, _filterI);\n                }\n            } else {\n\n                for (var _filterI2 = 0; _filterI2 < this.filters.length; _filterI2++) {\n\n                    var _filter = this.filters[_filterI2];\n\n                    for (var row = 0; row < _filter.errorMap.length; row++) {\n                        for (var col = 0; col < _filter.errorMap.length; col++) {\n                            _filter.errorMap[row][col] = this.nextLayer.errors[_filterI2][row][col];\n                        }\n                    }\n                }\n            }\n\n            // Apply derivative to each error value\n            for (var _filterI3 = 0; _filterI3 < this.filters.length; _filterI3++) {\n\n                var _filter2 = this.filters[_filterI3];\n\n                for (var _row = 0; _row < _filter2.errorMap.length; _row++) {\n                    for (var _col = 0; _col < _filter2.errorMap[0].length; _col++) {\n\n                        if (_filter2.dropoutMap[_row][_col]) {\n                            _filter2.errorMap[_row][_col] = 0;\n                        } else if (this.activation) {\n                            _filter2.errorMap[_row][_col] *= this.activation(_filter2.sumMap[_row][_col], true, _filter2);\n                        }\n                    }\n                }\n            }\n\n            // Then use the error map values to build the delta weights\n            NetUtil.buildConvDWeights(this);\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n                            filter.deltaWeights[channel][row][col] = 0;\n                        }\n                    }\n                }\n\n                for (var _row2 = 0; _row2 < filter.dropoutMap.length; _row2++) {\n                    for (var _col2 = 0; _col2 < filter.dropoutMap[0].length; _col2++) {\n                        filter.dropoutMap[_row2][_col2] = false;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n\n                            if (this.net.l2 != undefined) this.net.l2Error += 0.5 * this.net.l2 * Math.pow(filter.weights[channel][row][col], 2);\n                            if (this.net.l1 != undefined) this.net.l1Error += this.net.l1 * Math.abs(filter.weights[channel][row][col]);\n\n                            filter.weights[channel][row][col] = this.net.weightUpdateFn.bind(this.net, filter.weights[channel][row][col], filter.deltaWeights[channel][row][col], filter, [channel, row, col])();\n\n                            if (this.net.maxNorm != undefined) this.net.maxNormTotal += Math.pow(filter.weights[channel][row][col], 2);\n                        }\n                    }\n                }\n\n                filter.bias = this.net.weightUpdateFn.bind(this.net, filter.bias, filter.deltaBias, filter)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.filters.map(function (filter) {\n                    return {\n                        bias: filter.bias,\n                        weights: filter.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.filters.forEach(function (filter, fi) {\n\n                if (data.weights[fi].weights.length != filter.weights.length) {\n                    throw new Error(\"Mismatched weights depth. Given: \" + data.weights[fi].weights.length + \" Existing: \" + filter.weights.length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                if (data.weights[fi].weights[0].length != filter.weights[0].length) {\n                    throw new Error(\"Mismatched weights size. Given: \" + data.weights[fi].weights[0].length + \" Existing: \" + filter.weights[0].length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                filter.bias = data.weights[fi].bias;\n                filter.weights = data.weights[fi].weights;\n            });\n        }\n    }]);\n\n    return ConvLayer;\n}();\n\ntypeof window == \"undefined\" && (exports.ConvLayer = ConvLayer);\n\"use strict\";\n\nvar FCLayer = function () {\n    function FCLayer(size) {\n        _classCallCheck(this, FCLayer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n) {\n            return new Neuron();\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(FCLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            this.prevLayer = layer;\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron) {\n\n                var weightsCount = void 0;\n\n                switch (_this2.prevLayer.constructor.name) {\n                    case \"FCLayer\":\n                        weightsCount = _this2.prevLayer.size;\n                        break;\n\n                    case \"ConvLayer\":\n                        weightsCount = _this2.prevLayer.filters.length * Math.pow(_this2.prevLayer.outMapSize, 2);\n                        break;\n\n                    case \"PoolLayer\":\n                        weightsCount = _this2.prevLayer.activations.length * Math.pow(_this2.prevLayer.outMapSize, 2);\n                        break;\n                }\n\n                neuron.weights = _this2.net.weightsInitFn(weightsCount, _this2.weightsConfig);\n                neuron.bias = Math.random() * 0.2 - 0.1;\n\n                neuron.init({\n                    updateFn: _this2.net.updateFn,\n                    activationConfig: _this2.net.activationConfig,\n                    eluAlpha: _this2.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n                if (_this3.state == \"training\" && (neuron.dropped = Math.random() > _this3.net.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n\n                    var activations = NetUtil.getActivations(_this3.prevLayer);\n\n                    for (var ai = 0; ai < activations.length; ai++) {\n                        neuron.sum += activations[ai] * neuron.weights[ai];\n                    }\n\n                    neuron.activation = _this3.activation(neuron.sum, false, neuron) / (_this3.net.dropout || 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this4 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this4.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this4.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    var activations = NetUtil.getActivations(_this4.prevLayer);\n\n                    for (var wi = 0; wi < neuron.weights.length; wi++) {\n                        neuron.deltaWeights[wi] += neuron.error * activations[wi] * (1 + ((_this4.net.l2 || 0) + (_this4.net.l1 || 0)) / _this4.net.miniBatchSize * neuron.deltaWeights[wi]);\n                    }\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.neurons.forEach(function (neuron) {\n                return neuron.deltaWeights = neuron.weights.map(function (dw) {\n                    return 0;\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this5 = this;\n\n            this.neurons.forEach(function (neuron) {\n                neuron.deltaWeights.forEach(function (dw, dwi) {\n\n                    if (_this5.net.l2 != undefined) _this5.net.l2Error += 0.5 * _this5.net.l2 * Math.pow(neuron.weights[dwi], 2);\n                    if (_this5.net.l1 != undefined) _this5.net.l1Error += _this5.net.l1 * Math.abs(neuron.weights[dwi]);\n\n                    neuron.weights[dwi] = _this5.net.weightUpdateFn.bind(_this5.net, neuron.weights[dwi], dw, neuron, dwi)();\n\n                    if (_this5.net.maxNorm != undefined) _this5.net.maxNormTotal += Math.pow(neuron.weights[dwi], 2);\n                });\n\n                neuron.bias = _this5.net.weightUpdateFn.bind(_this5.net, neuron.bias, neuron.deltaBias, neuron)();\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.neurons.map(function (neuron) {\n                    return {\n                        bias: neuron.bias,\n                        weights: neuron.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (data.weights[ni].weights.length != neuron.weights.length) {\n                    throw new Error(\"Mismatched weights count. Given: \" + data.weights[ni].weights.length + \" Existing: \" + neuron.weights.length + \". At layers[\" + layerIndex + \"], neurons[\" + ni + \"]\");\n                }\n\n                neuron.bias = data.weights[ni].bias;\n                neuron.weights = data.weights[ni].weights;\n            });\n        }\n    }]);\n\n    return FCLayer;\n}();\n\nvar Layer = FCLayer;\n\ntypeof window == \"undefined\" && (exports.FCLayer = exports.Layer = FCLayer);\n\"use strict\";\n\nvar Filter = function () {\n    function Filter() {\n        _classCallCheck(this, Filter);\n    }\n\n    _createClass(Filter, [{\n        key: \"init\",\n        value: function init() {\n            var _this6 = this;\n\n            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                updateFn = _ref2.updateFn,\n                activation = _ref2.activation,\n                eluAlpha = _ref2.eluAlpha;\n\n            var size = this.weights.length;\n\n            this.deltaWeights = this.weights.map(function (channel) {\n                return channel.map(function (wRow) {\n                    return wRow.map(function (w) {\n                        return 0;\n                    });\n                });\n            });\n            this.deltaBias = 0;\n\n            switch (updateFn) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 1;\n                            });\n                        });\n                    });\n                    this.getWeightGain = function (_ref3) {\n                        var _ref4 = _slicedToArray(_ref3, 3),\n                            channel = _ref4[0],\n                            row = _ref4[1],\n                            column = _ref4[2];\n\n                        return _this6.weightGains[channel][row][column];\n                    };\n                    this.setWeightGain = function (_ref5, v) {\n                        var _ref6 = _slicedToArray(_ref5, 3),\n                            channel = _ref6[0],\n                            row = _ref6[1],\n                            column = _ref6[2];\n\n                        return _this6.weightGains[channel][row][column] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 0;\n                            });\n                        });\n                    });\n                    this.getWeightsCache = function (_ref7) {\n                        var _ref8 = _slicedToArray(_ref7, 3),\n                            channel = _ref8[0],\n                            row = _ref8[1],\n                            column = _ref8[2];\n\n                        return _this6.weightsCache[channel][row][column];\n                    };\n                    this.setWeightsCache = function (_ref9, v) {\n                        var _ref10 = _slicedToArray(_ref9, 3),\n                            channel = _ref10[0],\n                            row = _ref10[1],\n                            column = _ref10[2];\n\n                        return _this6.weightsCache[channel][row][column] = v;\n                    };\n\n                    if (updateFn == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = this.weights.map(function (channel) {\n                            return channel.map(function (wRow) {\n                                return wRow.map(function (w) {\n                                    return 0;\n                                });\n                            });\n                        });\n                        this.getAdadeltaCache = function (_ref11) {\n                            var _ref12 = _slicedToArray(_ref11, 3),\n                                channel = _ref12[0],\n                                row = _ref12[1],\n                                column = _ref12[2];\n\n                            return _this6.adadeltaCache[channel][row][column];\n                        };\n                        this.setAdadeltaCache = function (_ref13, v) {\n                            var _ref14 = _slicedToArray(_ref13, 3),\n                                channel = _ref14[0],\n                                row = _ref14[1],\n                                column = _ref14[2];\n\n                            return _this6.adadeltaCache[channel][row][column] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n            }\n\n            if (activation == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activation == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(_ref15) {\n            var _ref16 = _slicedToArray(_ref15, 3),\n                channel = _ref16[0],\n                row = _ref16[1],\n                column = _ref16[2];\n\n            return this.weights[channel][row][column];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(_ref17, v) {\n            var _ref18 = _slicedToArray(_ref17, 3),\n                channel = _ref18[0],\n                row = _ref18[1],\n                column = _ref18[2];\n\n            this.weights[channel][row][column] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(_ref19) {\n            var _ref20 = _slicedToArray(_ref19, 3),\n                channel = _ref20[0],\n                row = _ref20[1],\n                column = _ref20[2];\n\n            return this.deltaWeights[channel][row][column];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(_ref21, v) {\n            var _ref22 = _slicedToArray(_ref21, 3),\n                channel = _ref22[0],\n                row = _ref22[1],\n                column = _ref22[2];\n\n            this.deltaWeights[channel][row][column] = v;\n        }\n    }]);\n\n    return Filter;\n}();\n\ntypeof window == \"undefined\" && (exports.Filter = Filter);\n\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope || -0.0005 : Math.max((this.lreluSlope || -0.0005) * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossentropy\",\n        value: function crossentropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meansquarederror\",\n        value: function meansquarederror(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"vanillaupdatefn\",\n        value: function vanillaupdatefn(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.getWeightGain(weightI));\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.max(neuron.getWeightGain(weightI) * 0.95, 0.5));\n                } else {\n                    neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n                }\n            } else {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.min(neuron.getWeightGain(weightI) + 0.05, 5));\n                } else {\n                    neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n                }\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, neuron.getWeightsCache(weightI) + Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache += Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"rmsprop\",\n        value: function rmsprop(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rmsDecay * neuron.getWeightsCache(weightI) + (1 - this.rmsDecay) * Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rho * neuron.getWeightsCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                var newVal = value + Math.sqrt((neuron.getAdadeltaCache(weightI) + 1e-6) / (neuron.getWeightsCache(weightI) + 1e-6)) * deltaValue;\n                neuron.setAdadeltaCache(weightI, this.rho * neuron.getAdadeltaCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Weights init\n\n    }, {\n        key: \"uniform\",\n        value: function uniform(size, _ref23) {\n            var limit = _ref23.limit;\n\n            var values = [];\n\n            for (var i = 0; i < size; i++) {\n                values.push(Math.random() * 2 * limit - limit);\n            }\n\n            return values;\n        }\n    }, {\n        key: \"gaussian\",\n        value: function gaussian(size, _ref24) {\n            var mean = _ref24.mean,\n                stdDeviation = _ref24.stdDeviation;\n\n            var values = [];\n\n            // Polar Box Muller\n            for (var i = 0; i < size; i++) {\n                var x1 = void 0,\n                    x2 = void 0,\n                    r = void 0,\n                    y = void 0;\n\n                do {\n                    x1 = 2 * Math.random() - 1;\n                    x2 = 2 * Math.random() - 1;\n                    r = Math.pow(x1, 2) + Math.pow(x2, 2);\n                } while (r >= 1 || !r);\n\n                values.push(mean + x1 * Math.sqrt(-2 * Math.log(r) / r) * stdDeviation);\n            }\n\n            return values;\n        }\n    }, {\n        key: \"xaviernormal\",\n        value: function xaviernormal(size, _ref25) {\n            var fanIn = _ref25.fanIn,\n                fanOut = _ref25.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(2 / (fanIn + fanOut)) }) : NetMath.lecunnormal(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"xavieruniform\",\n        value: function xavieruniform(size, _ref26) {\n            var fanIn = _ref26.fanIn,\n                fanOut = _ref26.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.uniform(size, { limit: Math.sqrt(6 / (fanIn + fanOut)) }) : NetMath.lecununiform(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"lecunnormal\",\n        value: function lecunnormal(size, _ref27) {\n            var fanIn = _ref27.fanIn;\n\n            return NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(1 / fanIn) });\n        }\n    }, {\n        key: \"lecununiform\",\n        value: function lecununiform(size, _ref28) {\n            var fanIn = _ref28.fanIn;\n\n            return NetMath.uniform(size, { limit: Math.sqrt(3 / fanIn) });\n        }\n\n        // Pool\n\n    }, {\n        key: \"maxPool\",\n        value: function maxPool(layer, channel) {\n\n            var activations = NetUtil.getActivations(layer.prevLayer, channel, layer.inMapValuesCount);\n\n            for (var row = 0; row < layer.outMapSize; row++) {\n                for (var col = 0; col < layer.outMapSize; col++) {\n\n                    var rowStart = row * layer.stride;\n                    var colStart = col * layer.stride;\n\n                    // The first value\n                    var activation = activations[rowStart * layer.prevLayerOutWidth + colStart];\n\n                    for (var filterRow = 0; filterRow < layer.size; filterRow++) {\n                        for (var filterCol = 0; filterCol < layer.size; filterCol++) {\n\n                            var value = activations[(rowStart + filterRow) * layer.prevLayerOutWidth + (colStart + filterCol)];\n\n                            if (value > activation) {\n                                activation = value;\n                                layer.indeces[channel][row][col] = [filterRow, filterCol];\n                            }\n                        }\n                    }\n\n                    layer.activations[channel][row][col] = activation;\n                }\n            }\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }, {\n        key: \"standardDeviation\",\n        value: function standardDeviation(arr) {\n            var avg = arr.reduce(function (p, c) {\n                return p + c;\n            }) / arr.length;\n            var diffs = arr.map(function (v) {\n                return v - avg;\n            }).map(function (v) {\n                return Math.pow(v, 2);\n            });\n            return Math.sqrt(diffs.reduce(function (p, c) {\n                return p + c;\n            }) / diffs.length);\n        }\n    }, {\n        key: \"maxNorm\",\n        value: function maxNorm() {\n\n            if (this.maxNormTotal > this.maxNorm) {\n\n                var multiplier = this.maxNorm / (1e-18 + this.maxNormTotal);\n\n                this.layers.forEach(function (layer, li) {\n                    li && layer.neurons.forEach(function (neuron) {\n                        neuron.weights.forEach(function (w, wi) {\n                            return neuron.setWeight(wi, neuron.getWeight(wi) * multiplier);\n                        });\n                    });\n                });\n            }\n\n            this.maxNormTotal = 0;\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (exports.NetMath = NetMath);\n\"use strict\";\n\nvar NetUtil = function () {\n    function NetUtil() {\n        _classCallCheck(this, NetUtil);\n    }\n\n    _createClass(NetUtil, null, [{\n        key: \"format\",\n        value: function format(value) {\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"string\";\n\n            switch (true) {\n\n                case type == \"string\" && typeof value == \"string\":\n                    value = value.replace(/(_|\\s)/g, \"\").toLowerCase();\n                    break;\n\n                case type == \"time\" && typeof value == \"number\":\n                    var date = new Date(value);\n                    var formatted = [];\n\n                    if (value < 1000) {\n                        formatted.push(date.getMilliseconds() + \"ms\");\n                    } else {\n\n                        if (value >= 3600000) formatted.push(date.getHours() + \"h\");\n                        if (value >= 60000) formatted.push(date.getMinutes() + \"m\");\n\n                        formatted.push(date.getSeconds() + \"s\");\n                    }\n\n                    value = formatted.join(\" \");\n                    break;\n            }\n\n            return value;\n        }\n    }, {\n        key: \"shuffle\",\n        value: function shuffle(arr) {\n            for (var i = arr.length; i; i--) {\n                var j = Math.floor(Math.random() * i);\n                var x = arr[i - 1];\n                arr[i - 1] = arr[j];\n                arr[j] = x;\n            }\n        }\n    }, {\n        key: \"addZeroPadding\",\n        value: function addZeroPadding(map, zP) {\n\n            var data = [];\n\n            for (var row = 0; row < map.length; row++) {\n                data.push(map[row].slice(0));\n            }\n\n            var extraRows = [];\n\n            for (var i = 0; i < data.length + 2 * zP; i++) {\n                extraRows.push(0);\n            }\n\n            for (var col = 0; col < data.length; col++) {\n                for (var _i = 0; _i < zP; _i++) {\n                    data[col].splice(0, 0, 0);\n                    data[col].splice(data.length + 1, data.length, 0);\n                }\n            }\n\n            for (var _i2 = 0; _i2 < zP; _i2++) {\n                data.splice(0, 0, extraRows.slice(0));\n                data.splice(data.length, data.length - 1, extraRows.slice(0));\n            }\n\n            return data;\n        }\n    }, {\n        key: \"arrayToMap\",\n        value: function arrayToMap(arr, size) {\n            var map = [];\n\n            for (var i = 0; i < size; i++) {\n                map[i] = [];\n\n                for (var j = 0; j < size; j++) {\n                    map[i][j] = arr[i * size + j];\n                }\n            }\n\n            return map;\n        }\n    }, {\n        key: \"arrayToVolume\",\n        value: function arrayToVolume(arr, channels) {\n\n            var vol = [];\n            var size = Math.sqrt(arr.length / channels);\n            var mapValues = Math.pow(size, 2);\n\n            for (var d = 0; d < Math.floor(arr.length / mapValues); d++) {\n\n                var map = [];\n\n                for (var i = 0; i < size; i++) {\n                    map[i] = [];\n\n                    for (var j = 0; j < size; j++) {\n                        map[i][j] = arr[d * mapValues + i * size + j];\n                    }\n                }\n\n                vol[d] = map;\n            }\n\n            return vol;\n        }\n    }, {\n        key: \"convolve\",\n        value: function convolve(_ref29) {\n            var input = _ref29.input,\n                zeroPadding = _ref29.zeroPadding,\n                weights = _ref29.weights,\n                channels = _ref29.channels,\n                stride = _ref29.stride,\n                bias = _ref29.bias;\n\n\n            var inputVol = NetUtil.arrayToVolume(input, channels);\n            var outputMap = [];\n\n            var paddedLength = inputVol[0].length + zeroPadding * 2;\n            var fSSpread = Math.floor(weights[0].length / 2\n\n            // For each input channels,\n            );for (var di = 0; di < channels; di++) {\n                inputVol[di] = NetUtil.addZeroPadding(inputVol[di], zeroPadding\n                // For each inputY without ZP\n                );for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += stride) {\n                    outputMap[(inputY - fSSpread) / stride] = outputMap[(inputY - fSSpread) / stride] || [];\n                    // For each inputX without zP\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += stride) {\n                        var sum = 0;\n                        // For each weightsY on input\n                        for (var weightsY = 0; weightsY < weights[0].length; weightsY++) {\n                            // For each weightsX on input\n                            for (var weightsX = 0; weightsX < weights[0].length; weightsX++) {\n                                sum += inputVol[di][inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] * weights[di][weightsY][weightsX];\n                            }\n                        }\n\n                        outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] = (outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] || 0) + sum;\n                    }\n                }\n            }\n\n            // Then add bias\n            for (var outY = 0; outY < outputMap.length; outY++) {\n                for (var outX = 0; outX < outputMap.length; outX++) {\n                    outputMap[outY][outX] += bias;\n                }\n            }\n\n            return outputMap;\n        }\n    }, {\n        key: \"buildConvErrorMap\",\n        value: function buildConvErrorMap(nextLayer, errorMap, filterI) {\n\n            // Cache / convenience\n            var zeroPadding = nextLayer.zeroPadding;\n            var paddedLength = errorMap.length + zeroPadding * 2;\n            var fSSpread = Math.floor(nextLayer.filterSize / 2\n\n            // Zero pad and clear the error map, to allow easy convoling\n            );var paddedRow = [];\n\n            for (var val = 0; val < paddedLength; val++) {\n                paddedRow.push(0);\n            }\n\n            for (var row = 0; row < paddedLength; row++) {\n                errorMap[row] = paddedRow.slice(0);\n            }\n\n            // For each channel in filter in the next layer which corresponds to this filter\n            for (var nlFilterI = 0; nlFilterI < nextLayer.size; nlFilterI++) {\n\n                var weights = nextLayer.filters[nlFilterI].weights[filterI];\n                var errMap = nextLayer.filters[nlFilterI].errorMap;\n\n                // Unconvolve their error map using the weights\n                for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += nextLayer.stride) {\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += nextLayer.stride) {\n\n                        for (var weightsY = 0; weightsY < nextLayer.filterSize; weightsY++) {\n                            for (var weightsX = 0; weightsX < nextLayer.filterSize; weightsX++) {\n                                errorMap[inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] += weights[weightsY][weightsX] * errMap[(inputY - fSSpread) / nextLayer.stride][(inputX - fSSpread) / nextLayer.stride];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Take out the zero padding. Rows:\n            errorMap.splice(0, zeroPadding);\n            errorMap.splice(errorMap.length - zeroPadding, errorMap.length\n\n            // Columns:\n            );for (var emXI = 0; emXI < errorMap.length; emXI++) {\n                errorMap[emXI] = errorMap[emXI].splice(zeroPadding, errorMap[emXI].length - zeroPadding * 2);\n            }\n        }\n    }, {\n        key: \"buildConvDWeights\",\n        value: function buildConvDWeights(layer) {\n\n            var weightsCount = layer.filters[0].weights[0].length;\n            var fSSpread = Math.floor(weightsCount / 2);\n            var channelsCount = layer.filters[0].weights.length;\n\n            // Adding an intermediary step to allow regularization to work\n            var deltaDeltaWeights = [];\n\n            // Filling the deltaDeltaWeights with 0 values\n            for (var weightsY = 0; weightsY < weightsCount; weightsY++) {\n                deltaDeltaWeights[weightsY] = [];\n                for (var weightsX = 0; weightsX < weightsCount; weightsX++) {\n                    deltaDeltaWeights[weightsY][weightsX] = 0;\n                }\n            }\n\n            // For each filter\n            for (var filterI = 0; filterI < layer.filters.length; filterI++) {\n\n                var filter = layer.filters[filterI];\n\n                // Each channel will take the error map and the corresponding inputMap from the input...\n                for (var channelI = 0; channelI < channelsCount; channelI++) {\n\n                    var inputValues = NetUtil.getActivations(layer.prevLayer, channelI, layer.inMapValuesCount);\n                    var inputMap = NetUtil.addZeroPadding(NetUtil.arrayToMap(inputValues, Math.sqrt(layer.inMapValuesCount)), layer.zeroPadding\n\n                    // ...slide the filter with correct stride across the zero-padded inputMap...\n                    );for (var inputY = fSSpread; inputY < inputMap.length - fSSpread; inputY += layer.stride) {\n                        for (var inputX = fSSpread; inputX < inputMap.length - fSSpread; inputX += layer.stride) {\n\n                            // ...and at each location...\n                            for (var _weightsY = 0; _weightsY < weightsCount; _weightsY++) {\n                                for (var _weightsX = 0; _weightsX < weightsCount; _weightsX++) {\n\n                                    var activation = inputMap[inputY - fSSpread + _weightsY][inputX - fSSpread + _weightsX];\n\n                                    // Increment and regularize the delta delta weights by the input activation (later multiplied by the error)\n                                    deltaDeltaWeights[_weightsY][_weightsX] += activation * (1 + ((layer.net.l2 || 0) + (layer.net.l1 || 0)) / layer.net.miniBatchSize * filter.weights[channelI][_weightsY][_weightsX]);\n                                }\n                            }\n\n                            var error = filter.errorMap[(inputY - fSSpread) / layer.stride][(inputX - fSSpread) / layer.stride];\n\n                            // Applying and resetting the deltaDeltaWeights\n                            for (var _weightsY2 = 0; _weightsY2 < weightsCount; _weightsY2++) {\n                                for (var _weightsX2 = 0; _weightsX2 < weightsCount; _weightsX2++) {\n                                    filter.deltaWeights[channelI][_weightsY2][_weightsX2] += deltaDeltaWeights[_weightsY2][_weightsX2] * error;\n                                    deltaDeltaWeights[_weightsY2][_weightsX2] = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Increment the deltaBias by the sum of all errors in the filter\n                for (var eY = 0; eY < filter.errorMap.length; eY++) {\n                    for (var eX = 0; eX < filter.errorMap.length; eX++) {\n                        filter.deltaBias += filter.errorMap[eY][eX];\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getActivations\",\n        value: function getActivations(layer, mapStartI, mapSize) {\n\n            var returnArr = [];\n\n            if (arguments.length == 1) {\n\n                if (layer instanceof FCLayer) {\n\n                    for (var ni = 0; ni < layer.neurons.length; ni++) {\n                        returnArr.push(layer.neurons[ni].activation);\n                    }\n                } else if (layer instanceof ConvLayer) {\n\n                    for (var fi = 0; fi < layer.filters.length; fi++) {\n                        for (var rowI = 0; rowI < layer.filters[fi].activationMap.length; rowI++) {\n                            for (var colI = 0; colI < layer.filters[fi].activationMap[rowI].length; colI++) {\n                                returnArr.push(layer.filters[fi].activationMap[rowI][colI]);\n                            }\n                        }\n                    }\n                } else {\n\n                    for (var channel = 0; channel < layer.activations.length; channel++) {\n                        for (var row = 0; row < layer.activations[0].length; row++) {\n                            for (var col = 0; col < layer.activations[0].length; col++) {\n                                returnArr.push(layer.activations[channel][row][col]);\n                            }\n                        }\n                    }\n                }\n            } else {\n\n                if (layer instanceof FCLayer) {\n\n                    for (var i = mapStartI * mapSize; i < (mapStartI + 1) * mapSize; i++) {\n                        returnArr.push(layer.neurons[i].activation);\n                    }\n                } else if (layer instanceof ConvLayer) {\n\n                    for (var _row3 = 0; _row3 < layer.filters[mapStartI].activationMap.length; _row3++) {\n                        for (var _col3 = 0; _col3 < layer.filters[mapStartI].activationMap[_row3].length; _col3++) {\n                            returnArr.push(layer.filters[mapStartI].activationMap[_row3][_col3]);\n                        }\n                    }\n                } else {\n\n                    for (var _row4 = 0; _row4 < layer.activations[mapStartI].length; _row4++) {\n                        for (var _col4 = 0; _col4 < layer.activations[mapStartI].length; _col4++) {\n                            returnArr.push(layer.activations[mapStartI][_row4][_col4]);\n                        }\n                    }\n                }\n            }\n\n            return returnArr;\n        }\n    }]);\n\n    return NetUtil;\n}();\n\ntypeof window == \"undefined\" && (exports.NetUtil = NetUtil);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref30.learningRate,\n            _ref30$layers = _ref30.layers,\n            layers = _ref30$layers === undefined ? [] : _ref30$layers,\n            _ref30$updateFn = _ref30.updateFn,\n            updateFn = _ref30$updateFn === undefined ? \"vanillaupdatefn\" : _ref30$updateFn,\n            _ref30$activation = _ref30.activation,\n            activation = _ref30$activation === undefined ? \"sigmoid\" : _ref30$activation,\n            _ref30$cost = _ref30.cost,\n            cost = _ref30$cost === undefined ? \"meansquarederror\" : _ref30$cost,\n            rmsDecay = _ref30.rmsDecay,\n            rho = _ref30.rho,\n            lreluSlope = _ref30.lreluSlope,\n            eluAlpha = _ref30.eluAlpha,\n            _ref30$dropout = _ref30.dropout,\n            dropout = _ref30$dropout === undefined ? 1 : _ref30$dropout,\n            _ref30$l = _ref30.l2,\n            l2 = _ref30$l === undefined ? true : _ref30$l,\n            _ref30$l2 = _ref30.l1,\n            l1 = _ref30$l2 === undefined ? true : _ref30$l2,\n            maxNorm = _ref30.maxNorm,\n            weightsConfig = _ref30.weightsConfig,\n            channels = _ref30.channels,\n            conv = _ref30.conv,\n            pool = _ref30.pool;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.conv = {};\n        this.pool = {};\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n        this.error = 0;\n        activation = NetUtil.format(activation);\n        updateFn = NetUtil.format(updateFn);\n        cost = NetUtil.format(cost);\n\n        if (l2) {\n            this.l2 = typeof l2 == \"boolean\" ? 0.001 : l2;\n            this.l2Error = 0;\n        }\n\n        if (l1) {\n            this.l1 = typeof l1 == \"boolean\" ? 0.005 : l1;\n            this.l1Error = 0;\n        }\n\n        if (maxNorm) {\n            this.maxNorm = typeof maxNorm == \"boolean\" && maxNorm ? 1000 : maxNorm;\n            this.maxNormTotal = 0;\n        }\n\n        if (learningRate) this.learningRate = learningRate;\n        if (channels) this.channels = channels;\n\n        if (conv) {\n            if (conv.filterSize != undefined) this.conv.filterSize = conv.filterSize;\n            if (conv.zeroPadding != undefined) this.conv.zeroPadding = conv.zeroPadding;\n            if (conv.stride != undefined) this.conv.stride = conv.stride;\n        }\n\n        if (pool) {\n            if (pool.size) this.pool.size = pool.size;\n            if (pool.stride) this.pool.stride = pool.stride;\n        }\n\n        // Activation function / Learning Rate\n        switch (updateFn) {\n\n            case \"rmsprop\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n\n                    switch (activation) {\n\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.updateFn = [false, null, undefined].includes(updateFn) ? \"vanillaupdatefn\" : updateFn;\n        this.weightUpdateFn = NetMath[this.updateFn];\n        this.activation = typeof activation == \"function\" ? activation : NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = typeof cost == \"function\" ? cost : NetMath[cost];\n\n        if (this.updateFn == \"rmsprop\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n\n        // Weights distributiom\n        this.weightsConfig = { distribution: \"xavieruniform\" };\n\n        if (weightsConfig != undefined && weightsConfig.distribution) {\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution);\n        }\n\n        if (this.weightsConfig.distribution == \"uniform\") {\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit != undefined ? weightsConfig.limit : 0.1;\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\n            this.weightsConfig.mean = weightsConfig.mean || 0;\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05;\n        }\n\n        if (typeof this.weightsConfig.distribution == \"function\") {\n            this.weightsInitFn = this.weightsConfig.distribution;\n        } else {\n            this.weightsInitFn = NetMath[this.weightsConfig.distribution];\n        }\n\n        // State\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new FCLayer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (layer) {\n                    return [\"FCLayer\", \"ConvLayer\", \"PoolLayer\"].includes(layer.constructor.name);\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"not-defined\":\n                    this.layers[0] = new FCLayer(input);\n                    this.layers[1] = new FCLayer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new FCLayer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.net = this;\n            layer.activation = layer.activation == undefined ? this.activation : layer.activation;\n\n            layer.weightsConfig = {};\n            Object.assign(layer.weightsConfig, this.weightsConfig);\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1], layerIndex);\n\n                layer.weightsConfig.fanIn = layer.prevLayer.size;\n                layer.prevLayer.weightsConfig.fanOut = layer.size;\n\n                layer.init();\n                layer.state = \"initialised\";\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\", expected);\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this7 = this;\n\n            var _ref31 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref31$epochs = _ref31.epochs,\n                epochs = _ref31$epochs === undefined ? 1 : _ref31$epochs,\n                callback = _ref31.callback,\n                _ref31$log = _ref31.log,\n                log = _ref31$log === undefined ? true : _ref31$log,\n                _ref31$miniBatchSize = _ref31.miniBatchSize,\n                miniBatchSize = _ref31$miniBatchSize === undefined ? 1 : _ref31$miniBatchSize,\n                _ref31$shuffle = _ref31.shuffle,\n                shuffle = _ref31$shuffle === undefined ? false : _ref31$shuffle;\n\n            this.miniBatchSize = typeof miniBatchSize == \"boolean\" && miniBatchSize ? dataSet[0].expected.length : miniBatchSize;\n\n            return new Promise(function (resolve, reject) {\n\n                if (shuffle) {\n                    NetUtil.shuffle(dataSet);\n                }\n\n                if (log) {\n                    console.log(\"Training started. Epochs: \" + epochs + \" Batch Size: \" + _this7.miniBatchSize);\n                }\n\n                if (dataSet === undefined || dataSet === null) {\n                    return void reject(\"No data provided\");\n                }\n\n                if (_this7.state != \"initialised\") {\n                    _this7.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this7.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var startTime = Date.now();\n\n                var doEpoch = function doEpoch() {\n                    _this7.epochs++;\n                    _this7.error = 0;\n                    iterationIndex = 0;\n\n                    if (_this7.l2Error != undefined) _this7.l2Error = 0;\n                    if (_this7.l1Error != undefined) _this7.l1Error = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this7.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this7.backward(target);\n\n                    if (++iterationIndex % _this7.miniBatchSize == 0) {\n                        _this7.applyDeltaWeights();\n                        _this7.resetDeltaWeights();\n                    } else if (iterationIndex >= dataSet.length) {\n                        _this7.applyDeltaWeights();\n                    }\n\n                    var iterationError = _this7.cost(target, output);\n                    var elapsed = Date.now() - startTime;\n                    _this7.error += iterationError;\n                    _this7.iterations++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this7.iterations,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this7), 0);\n                    } else {\n                        epochsCounter++;\n\n                        if (log) {\n                            console.log(\"Epoch: \" + _this7.epochs + \" Error: \" + _this7.error / iterationIndex + (_this7.l2 == undefined ? \"\" : \" L2 Error: \" + _this7.l2Error / iterationIndex), \"\\nElapsed: \" + NetUtil.format(elapsed, \"time\") + \" Average Duration: \" + NetUtil.format(elapsed / epochsCounter, \"time\"));\n                        }\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this7.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n\n                            if (log) {\n                                console.log(\"Training finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                            }\n                            resolve();\n                        }\n                    }\n                };\n\n                _this7.resetDeltaWeights();\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this8 = this;\n\n            var _ref32 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref32$log = _ref32.log,\n                log = _ref32$log === undefined ? true : _ref32$log,\n                callback = _ref32.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (log) {\n                    console.log(\"Testing started\");\n                }\n\n                var totalError = 0;\n                var iterationIndex = 0;\n                var startTime = Date.now();\n\n                var testInput = function testInput() {\n\n                    var input = testSet[iterationIndex].input;\n                    var output = _this8.forward(input);\n                    var target = testSet[iterationIndex].expected || testSet[iterationIndex].output;\n                    var elapsed = Date.now() - startTime;\n\n                    var iterationError = _this8.cost(target, output);\n                    totalError += iterationError;\n                    iterationIndex++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: iterationIndex,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < testSet.length) {\n                        setTimeout(testInput.bind(_this8), 0);\n                    } else {\n\n                        if (log) {\n                            console.log(\"Testing finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                        }\n\n                        resolve(totalError / testSet.length);\n                    }\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                return li && layer.resetDeltaWeights();\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n\n            this.layers.forEach(function (layer, li) {\n                return li && layer.applyDeltaWeights();\n            });\n\n            if (this.maxNorm != undefined) {\n                this.maxNormTotal = Math.sqrt(this.maxNormTotal);\n                NetMath.maxNorm.bind(this)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return layer.toJSON();\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            if (data.layers.length != this.layers.length) {\n                throw new Error(\"Mismatched layers (\" + data.layers.length + \" layers in import data, but \" + this.layers.length + \" configured)\");\n            }\n\n            this.resetDeltaWeights();\n            this.layers.forEach(function (layer, li) {\n                return li && layer.fromJSON(data.layers[li], li);\n            });\n        }\n    }], [{\n        key: \"version\",\n        get: function get() {\n            return \"2.0.0\";\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (exports.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron() {\n        _classCallCheck(this, Neuron);\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init() {\n            var _this9 = this;\n\n            var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                updateFn = _ref33.updateFn,\n                activation = _ref33.activation,\n                eluAlpha = _ref33.eluAlpha;\n\n            var size = this.weights.length;\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (updateFn) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.getWeightGain = function (i) {\n                        return _this9.weightGains[i];\n                    };\n                    this.setWeightGain = function (i, v) {\n                        return _this9.weightGains[i] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n                    this.getWeightsCache = function (i) {\n                        return _this9.weightsCache[i];\n                    };\n                    this.setWeightsCache = function (i, v) {\n                        return _this9.weightsCache[i] = v;\n                    };\n\n                    if (updateFn == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.getAdadeltaCache = function (i) {\n                            return _this9.adadeltaCache[i];\n                        };\n                        this.setAdadeltaCache = function (i, v) {\n                            return _this9.adadeltaCache[i] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activation == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activation == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(i) {\n            return this.weights[i];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(i, v) {\n            this.weights[i] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(i) {\n            return this.deltaWeights[i];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(i, v) {\n            this.deltaWeights[i] = v;\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (exports.Neuron = Neuron);\n\"use strict\";\n\nvar PoolLayer = function () {\n    function PoolLayer(size) {\n        var _ref34 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            stride = _ref34.stride,\n            activation = _ref34.activation;\n\n        _classCallCheck(this, PoolLayer);\n\n        if (size) this.size = size;\n        if (stride) this.stride = stride;\n\n        if (activation != undefined && activation != false) {\n            this.activation = typeof activation == \"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this);\n        } else {\n            this.activation = false;\n        }\n    }\n\n    _createClass(PoolLayer, [{\n        key: \"init\",\n        value: function init() {}\n    }, {\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer, layerIndex) {\n            var _this10 = this;\n\n            this.prevLayer = layer;\n            this.size = this.size || this.net.pool.size || 2;\n            this.stride = this.stride || this.net.pool.stride || this.size;\n\n            var prevLayerOutWidth = layer.outMapSize;\n\n            switch (layer.constructor.name) {\n\n                case \"FCLayer\":\n                    this.channels = this.net.channels;\n                    prevLayerOutWidth = Math.max(Math.floor(Math.sqrt(layer.size / this.channels)), 1);\n                    break;\n\n                case \"ConvLayer\":\n                    this.channels = layer.size;\n                    break;\n\n                case \"PoolLayer\":\n                    this.channels = layer.channels;\n                    break;\n            }\n\n            this.prevLayerOutWidth = prevLayerOutWidth;\n            this.outMapSize = (prevLayerOutWidth - this.size) / this.stride + 1;\n            this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2);\n\n            if (this.outMapSize % 1 != 0) {\n                throw new Error(\"Misconfigured hyperparameters. Activation volume dimensions would be \" + this.outMapSize + \" in pool layer at index \" + layerIndex);\n            }\n\n            this.activations = [].concat(_toConsumableArray(new Array(this.channels))).map(function (channel) {\n                return [].concat(_toConsumableArray(new Array(_this10.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this10.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n            });\n            this.errors = [].concat(_toConsumableArray(new Array(this.channels))).map(function (channel) {\n                return [].concat(_toConsumableArray(new Array(prevLayerOutWidth))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(prevLayerOutWidth))).map(function (v) {\n                        return 0;\n                    });\n                });\n            });\n            this.indeces = this.activations.map(function (channel) {\n                return channel.map(function (row) {\n                    return row.map(function (v) {\n                        return [0, 0];\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n            for (var channel = 0; channel < this.channels; channel++) {\n\n                NetMath.maxPool(this, channel\n\n                // Apply activations\n                );if (this.activation) {\n                    for (var row = 0; row < this.outMapSize; row++) {\n                        for (var col = 0; col < this.outMapSize; col++) {\n                            this.activations[channel][row][col] = this.activation(this.activations[channel][row][col], false, this.net);\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"backward\",\n        value: function backward() {\n\n            // Clear the existing error values, first\n            for (var channel = 0; channel < this.channels; channel++) {\n                for (var row = 0; row < this.errors[0].length; row++) {\n                    for (var col = 0; col < this.errors[0].length; col++) {\n                        this.errors[channel][row][col] = 0;\n                    }\n                }\n            }\n\n            if (this.nextLayer instanceof FCLayer) {\n\n                for (var _channel = 0; _channel < this.channels; _channel++) {\n                    for (var _row5 = 0; _row5 < this.outMapSize; _row5++) {\n                        for (var _col5 = 0; _col5 < this.outMapSize; _col5++) {\n\n                            var rowI = this.indeces[_channel][_row5][_col5][0] + _row5 * this.stride;\n                            var colI = this.indeces[_channel][_row5][_col5][1] + _col5 * this.stride;\n                            var neuronI = _channel * Math.pow(this.outMapSize, 2) + _row5 * this.outMapSize + _col5;\n\n                            var weightIndex = _channel * Math.pow(this.outMapSize, 2) + _row5 * this.outMapSize + _col5;\n\n                            for (var neuron = 0; neuron < this.nextLayer.neurons.length; neuron++) {\n                                this.errors[_channel][rowI][colI] += this.nextLayer.neurons[neuron].error * this.nextLayer.neurons[neuron].weights[weightIndex];\n                            }\n                        }\n                    }\n                }\n            } else if (this.nextLayer instanceof ConvLayer) {\n\n                for (var _channel2 = 0; _channel2 < this.channels; _channel2++) {\n\n                    var errs = [];\n\n                    for (var _col6 = 0; _col6 < this.outMapSize; _col6++) {\n                        errs[_col6] = 0;\n                    }\n\n                    // Convolve on the error map\n                    NetUtil.buildConvErrorMap(this.nextLayer, errs, _channel2);\n\n                    for (var _row6 = 0; _row6 < this.outMapSize; _row6++) {\n                        for (var _col7 = 0; _col7 < this.outMapSize; _col7++) {\n\n                            var _rowI = this.indeces[_channel2][_row6][_col7][0] + _row6 * this.stride;\n                            var _colI = this.indeces[_channel2][_row6][_col7][1] + _col7 * this.stride;\n\n                            this.errors[_channel2][_rowI][_colI] += errs[_row6][_col7];\n                        }\n                    }\n                }\n            } else {\n\n                for (var _channel3 = 0; _channel3 < this.channels; _channel3++) {\n                    for (var _row7 = 0; _row7 < this.outMapSize; _row7++) {\n                        for (var _col8 = 0; _col8 < this.outMapSize; _col8++) {\n\n                            var _rowI2 = this.indeces[_channel3][_row7][_col8][0] + _row7 * this.stride;\n                            var _colI2 = this.indeces[_channel3][_row7][_col8][1] + _col8 * this.stride;\n\n                            this.errors[_channel3][_rowI2][_colI2] += this.nextLayer.errors[_channel3][_row7][_col8];\n                        }\n                    }\n                }\n            }\n\n            // Apply derivatives\n            if (this.activation) {\n                for (var _channel4 = 0; _channel4 < this.channels; _channel4++) {\n\n                    for (var _row8 = 0; _row8 < this.indeces[_channel4].length; _row8++) {\n                        for (var _col9 = 0; _col9 < this.indeces[_channel4].length; _col9++) {\n\n                            var _rowI3 = this.indeces[_channel4][_row8][_col9][0] + _row8 * this.stride;\n                            var _colI3 = this.indeces[_channel4][_row8][_col9][1] + _col9 * this.stride;\n\n                            this.errors[_channel4][_rowI3][_colI3] *= this.activation(this.errors[_channel4][_rowI3][_colI3], true, this.net);\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {}\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {}\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {};\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON() {}\n    }]);\n\n    return PoolLayer;\n}();\n\ntypeof window == \"undefined\" && (exports.PoolLayer = PoolLayer);\n//# sourceMappingURL=jsNet.concat.js.map\n//# sourceMappingURL=jsNet.min.js.map\n"]}