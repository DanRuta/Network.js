{"version":3,"sources":["jsNetWebAssembly.concat.js"],"names":["ConvLayer","[object Object]","size","filterSize","zeroPadding","stride","activation","this","layerIndex","activationName","undefined","Error","NetUtil","format","layer","nextLayer","netInstance","net","prevLayer","conv","defineProperty","pre","channels","FCLayer","PoolLayer","activations","length","Math","floor","prevLayerOutWidth","max","sqrt","outMapSize","outSize","inMapValuesCount","pow","inZPMapValuesCount","getCallback","_","activationsIndeces","filters","Array","map","f","Filter","forEach","filter","fi","paramTypes","params","defineMapProperty","m","row","v","init","updateFn","weights","bias","data","window","exports","global","jsNetWASMPath","neurons","n","Neuron","neuron","ni","Layer","filterIndex","defineVolumeProperty","NetMath","values","total","i","func","returnType","heapIn","heapOut","returnArraySize","heapMap","HEAP8","Int8Array","HEAPU8","Uint8Array","HEAP16","Int16Array","HEAPU16","Uint16Array","HEAP32","Int32Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","res","error","returnTypeParam","parameters","parameterTypes","bufs","p","isArray","typedArray","buf","Module","_malloc","BYTES_PER_ELEMENT","set","push","ccall","e","b","_free","returnData","depth","rows","columns","totalValues","parameter","isVolume","flat","d","r","c","splice","ccallArrays","vol","value","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getSeconds","getHours","getMinutes","join","arr","j","random","x","training","validation","test","split","minVal","Infinity","maxVal","self","prop","valTypes","setCallback","Object","get","val","concat","returnSize","ccallVolume","noactivation","sigmoid","tanh","lecuntanh","relu","lrelu","rrelu","elu","Network","learningRate","cost","layers","rmsDecay","rho","lreluSlope","eluAlpha","dropout","l2","l1","maxNorm","weightsConfig","pool","state","cwrap","bind","costIndeces","meansquarederror","crossentropy","costFunctionName","updateFnIndeces","vanillaupdatefn","gain","adagrad","rmsprop","adam","adadelta","index","keys","find","key","name","weightsConfigFns","uniform","gaussian","xavieruniform","xaviernormal","lecununiform","lecunnormal","round","distribution","limit","mean","stdDeviation","epochs","every","item","Number","isInteger","initLayers","input","expected","ceil","abs","l","joinLayer","assignNext","assignPrev","console","warn","callback","miniBatchSize","log","shuffle","Promise","resolve","reject","startTime","now","dimension","itemSize","itemsCount","di","hasOwnProperty","ii","ei","elapsed","validationBuf","validationInterval","interval","epochIndex","iterationIndex","doEpoch","l2Error","l1Error","doIteration","iterations","validations","trainingError","validationError","setTimeout","text","lastValidationError","totalError","avgError","toJSON","li","fromJSON","version","neuronIndex","defineArrayProperty","parseInt","y"],"mappings":"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","file":"jsNetWebAssembly.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass ConvLayer {\r\n\r\n    constructor (size, {filterSize, zeroPadding, stride, activation}={}) {\r\n\r\n        this.size = size\r\n        this.stride = stride\r\n        this.filterSize = filterSize\r\n        this.layerIndex = 0\r\n        this.zeroPadding = zeroPadding\r\n\r\n        this.activation = false\r\n        this.activationName = activation\r\n\r\n        if (activation != undefined) {\r\n            if (typeof activation == \"boolean\" && !activation) {\r\n                activation = \"noactivation\"\r\n            }\r\n            if (typeof activation != \"string\") {\r\n                throw new Error(\"Custom activation functions are not available in the WebAssembly version\")\r\n            }\r\n            this.activationName = NetUtil.format(activation)\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n\r\n        this.netInstance = this.net.netInstance\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n\r\n        const stride = this.stride || this.net.conv.stride || 1\r\n        const filterSize = this.filterSize || this.net.conv.filterSize || 3\r\n        let zeroPadding = this.zeroPadding\r\n\r\n        NetUtil.defineProperty(this, \"channels\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"filterSize\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"stride\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"zeroPadding\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n\r\n        this.size = this.size || 4\r\n        let channels\r\n\r\n        switch (true) {\r\n            case layer instanceof FCLayer:\r\n                channels = this.net.channels || 1\r\n                break\r\n\r\n            case layer instanceof ConvLayer:\r\n                channels = layer.size\r\n                break\r\n\r\n            case layer instanceof PoolLayer:\r\n                channels = layer.activations.length\r\n                break\r\n        }\r\n\r\n        if (zeroPadding == undefined) {\r\n            zeroPadding = this.net.conv.zeroPadding==undefined ? Math.floor(filterSize/2) : this.net.conv.zeroPadding\r\n        }\r\n\r\n        this.channels = channels\r\n        this.filterSize = filterSize\r\n        this.stride = stride\r\n        this.zeroPadding = zeroPadding\r\n\r\n        // Caching calculations\r\n        const prevLayerOutWidth = layer instanceof FCLayer ? Math.max(Math.floor(Math.sqrt(layer.size/channels)), 1)\r\n                                                           : layer.outMapSize\r\n\r\n        NetUtil.defineProperty(this, \"inMapValuesCount\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"inZPMapValuesCount\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"outMapSize\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n\r\n        const outSize = (prevLayerOutWidth - filterSize + 2*zeroPadding) / stride + 1\r\n        this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2)\r\n        this.inZPMapValuesCount = Math.pow(prevLayerOutWidth + zeroPadding*2, 2)\r\n        this.outMapSize = outSize\r\n\r\n        if (outSize%1!=0) {\r\n            throw new Error(`Misconfigured hyperparameters. Activation volume dimensions would be ${outSize} in conv layer at index ${layerIndex}`)\r\n        }\r\n\r\n        if (this.activationName !== false && this.net.activationName !== false) {\r\n            NetUtil.defineProperty(this, \"activation\", [\"number\", \"number\"], [this.netInstance, layerIndex], {\r\n                pre: \"conv_\",\r\n                getCallback: _ => `WASM ${this.activationName||this.net.activationName}`\r\n            })\r\n            this.activation = NetUtil.activationsIndeces[this.activationName||this.net.activationName]\r\n        }\r\n\r\n        this.filters = [...new Array(this.size)].map(f => new Filter())\r\n    }\r\n\r\n    init () {\r\n        this.filters.forEach((filter, fi) => {\r\n\r\n            const paramTypes = [\"number\", \"number\", \"number\"]\r\n            const params = [this.netInstance, this.layerIndex, fi]\r\n\r\n            NetUtil.defineMapProperty(filter, \"activationMap\", paramTypes, params, this.outMapSize, this.outMapSize, {pre: \"filter_\"})\r\n            NetUtil.defineMapProperty(filter, \"errorMap\", paramTypes, params, this.outMapSize, this.outMapSize, {pre: \"filter_\"})\r\n            NetUtil.defineMapProperty(filter, \"sumMap\", paramTypes, params, this.outMapSize, this.outMapSize, {pre: \"filter_\"})\r\n            NetUtil.defineMapProperty(filter, \"dropoutMap\", paramTypes, params, this.outMapSize, this.outMapSize, {\r\n                pre: \"filter_\",\r\n                getCallback: m => m.map(row => row.map(v => v==1))\r\n            })\r\n\r\n            filter.init(this.netInstance, this.layerIndex, fi, {\r\n                updateFn: this.net.updateFn,\r\n                filterSize: this.filterSize,\r\n                channels: this.channels\r\n            })\r\n        })\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            weights: this.filters.map(filter => {\r\n                return {\r\n                    bias: filter.bias,\r\n                    weights: filter.weights\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fromJSON (data, layerIndex) {\r\n        this.filters.forEach((filter, fi) => {\r\n\r\n            if (data.weights[fi].weights.length != filter.weights.length) {\r\n                throw new Error(`Mismatched weights depth. Given: ${data.weights[fi].weights.length} Existing: ${filter.weights.length}. At: layers[${layerIndex}], filters[${fi}]`)\r\n            }\r\n\r\n            if (data.weights[fi].weights[0].length != filter.weights[0].length) {\r\n                throw new Error(`Mismatched weights size. Given: ${data.weights[fi].weights[0].length} Existing: ${filter.weights[0].length}. At: layers[${layerIndex}], filters[${fi}]`)\r\n            }\r\n\r\n            filter.bias = data.weights[fi].bias\r\n            filter.weights = data.weights[fi].weights\r\n        })\r\n    }\r\n\r\n}\r\n\r\n// https://github.com/DanRuta/jsNet/issues/33\r\n/* istanbul ignore next */\r\nif (typeof window!=\"undefined\") {\r\n    window.exports = window.exports || {}\r\n    window.global = window.global || {}\r\n    window.global.jsNetWASMPath = \"./NetWASM.wasm\"\r\n    window.ConvLayer = ConvLayer\r\n}\r\nexports.ConvLayer = ConvLayer\r\n\r\n\"use strict\"\r\n\r\nclass FCLayer {\r\n\r\n    constructor (size, {activation}={}) {\r\n        this.size = size\r\n        this.neurons = [...new Array(size)].map(n => new Neuron())\r\n        this.layerIndex = 0\r\n\r\n        if (activation != undefined) {\r\n            if (typeof activation == \"boolean\" && !activation) {\r\n                activation = \"noactivation\"\r\n            }\r\n            if (typeof activation != \"string\") {\r\n                throw new Error(\"Custom activation functions are not available in the WebAssembly version\")\r\n            }\r\n            this.activationName = NetUtil.format(activation)\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n        this.netInstance = this.net.netInstance\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n\r\n        if (this.activationName || this.net.activationName) {\r\n            NetUtil.defineProperty(this, \"activation\", [\"number\", \"number\"], [this.netInstance, layerIndex], {\r\n                pre: \"fc_\",\r\n                getCallback: _ => `WASM ${this.activationName||this.net.activationName}`\r\n            })\r\n            this.activation = NetUtil.activationsIndeces[this.activationName||this.net.activationName]\r\n        }\r\n    }\r\n\r\n    init () {\r\n        this.neurons.forEach((neuron, ni) => {\r\n            switch (true) {\r\n\r\n                case this.prevLayer instanceof FCLayer:\r\n                    neuron.size = this.prevLayer.size\r\n                    break\r\n\r\n                case this.prevLayer instanceof ConvLayer:\r\n                    neuron.size = this.prevLayer.filters.length * this.prevLayer.outMapSize**2\r\n                    break\r\n\r\n                case this.prevLayer instanceof PoolLayer:\r\n                    neuron.size = this.prevLayer.channels * this.prevLayer.outMapSize**2\r\n                    break\r\n            }\r\n\r\n            neuron.init(this.netInstance, this.layerIndex, ni, {\r\n                updateFn: this.net.updateFn\r\n            })\r\n        })\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            weights: this.neurons.map(neuron => {\r\n                return {\r\n                    bias: neuron.bias,\r\n                    weights: neuron.weights\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fromJSON (data, layerIndex) {\r\n\r\n        this.neurons.forEach((neuron, ni) => {\r\n\r\n            if (data.weights[ni].weights.length!=(neuron.weights).length) {\r\n                throw new Error(`Mismatched weights count. Given: ${data.weights[ni].weights.length} Existing: ${neuron.weights.length}. At layers[${layerIndex}], neurons[${ni}]`)\r\n            }\r\n\r\n            neuron.bias = data.weights[ni].bias\r\n            neuron.weights = data.weights[ni].weights\r\n        })\r\n    }\r\n}\r\n\r\nconst Layer = FCLayer\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.FCLayer = window.Layer = FCLayer)\r\nexports.FCLayer = exports.Layer = FCLayer\r\n\"use strict\"\r\n\r\nclass Filter {\r\n\r\n    constructor () {}\r\n\r\n    init (netInstance, layerIndex, filterIndex, {updateFn, channels, filterSize}) {\r\n\r\n        const paramTypes = [\"number\", \"number\", \"number\"]\r\n        const params = [netInstance, layerIndex, filterIndex]\r\n\r\n        NetUtil.defineProperty(this, \"bias\", paramTypes, params, {pre: \"filter_\"})\r\n        NetUtil.defineVolumeProperty(this, \"weights\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n        NetUtil.defineProperty(this, \"deltaBias\", paramTypes, params, {pre: \"filter_\"})\r\n        NetUtil.defineVolumeProperty(this, \"deltaWeights\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n\r\n        switch (updateFn) {\r\n            case \"gain\":\r\n                NetUtil.defineProperty(this, \"biasGain\", paramTypes, params, {pre: \"filter_\"})\r\n                NetUtil.defineVolumeProperty(this, \"weightGain\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n                break\r\n            case \"adagrad\":\r\n            case \"rmsprop\":\r\n            case \"adadelta\":\r\n                NetUtil.defineProperty(this, \"biasCache\", paramTypes, params, {pre: \"filter_\"})\r\n                NetUtil.defineVolumeProperty(this, \"weightsCache\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n\r\n                if (updateFn == \"adadelta\") {\r\n                    NetUtil.defineProperty(this, \"adadeltaBiasCache\", paramTypes, params, {pre: \"filter_\"})\r\n                    NetUtil.defineVolumeProperty(this, \"adadeltaWeightsCache\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n                }\r\n                break\r\n            case \"adam\":\r\n                NetUtil.defineProperty(this, \"m\", paramTypes, params, {pre: \"filter_\"})\r\n                NetUtil.defineProperty(this, \"v\", paramTypes, params, {pre: \"filter_\"})\r\n                break\r\n        }\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.Filter = Filter)\r\nexports.Filter = Filter\r\n\"use strict\"\r\n\r\nclass NetMath {\r\n    static softmax (values) {\r\n        let total = 0\r\n\r\n        for (let i=0; i<values.length; i++) {\r\n            total += values[i]\r\n        }\r\n\r\n        for (let i=0; i<values.length; i++) {\r\n            if (total) {\r\n                values[i] /= total\r\n            }\r\n        }\r\n\r\n        return values\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.NetMath = NetMath)\r\nexports.NetMath = NetMath\r\n\"use strict\"\r\n\r\nclass NetUtil {\r\n\r\n    static ccallArrays (func, returnType, paramTypes, params, {heapIn=\"HEAPF32\", heapOut=\"HEAPF32\", returnArraySize=1}={}) {\r\n\r\n        const heapMap = {}\r\n        heapMap.HEAP8 = Int8Array // int8_t\r\n        heapMap.HEAPU8 = Uint8Array // uint8_t\r\n        heapMap.HEAP16 = Int16Array // int16_t\r\n        heapMap.HEAPU16 = Uint16Array // uint16_t\r\n        heapMap.HEAP32 = Int32Array // int32_t\r\n        heapMap.HEAPU32 = Uint32Array // uint32_t\r\n        heapMap.HEAPF32 = Float32Array // float\r\n        heapMap.HEAPF64 = Float64Array // double\r\n\r\n        let res\r\n        let error\r\n        paramTypes = paramTypes || []\r\n        const returnTypeParam = returnType==\"array\" ? \"number\" : returnType\r\n        const parameters = []\r\n        const parameterTypes = []\r\n        const bufs = []\r\n\r\n        try {\r\n            if (params) {\r\n                for (let p=0; p<params.length; p++) {\r\n\r\n                    if (paramTypes[p] == \"array\" || Array.isArray(params[p])) {\r\n\r\n                        const typedArray = new heapMap[heapIn](params[p].length)\r\n\r\n                        for (let i=0; i<params[p].length; i++) {\r\n                            typedArray[i] = params[p][i]\r\n                        }\r\n\r\n                        const buf = NetUtil.Module._malloc(typedArray.length * typedArray.BYTES_PER_ELEMENT)\r\n\r\n                        switch (heapIn) {\r\n                            case \"HEAP8\": case \"HEAPU8\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf)\r\n                                break\r\n                            case \"HEAP16\": case \"HEAPU16\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf >> 1)\r\n                                break\r\n                            case \"HEAP32\": case \"HEAPU32\": case \"HEAPF32\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf >> 2)\r\n                                break\r\n                            case \"HEAPF64\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf >> 3)\r\n                                break\r\n                        }\r\n\r\n                        bufs.push(buf)\r\n                        parameters.push(buf)\r\n                        parameters.push(params[p].length)\r\n                        parameterTypes.push(\"number\")\r\n                        parameterTypes.push(\"number\")\r\n\r\n                    } else {\r\n                        parameters.push(params[p])\r\n                        parameterTypes.push(paramTypes[p]==undefined ? \"number\" : paramTypes[p])\r\n                    }\r\n                }\r\n            }\r\n\r\n            res = NetUtil.Module.ccall(func, returnTypeParam, parameterTypes, parameters)\r\n        } catch (e) {\r\n            error = e\r\n        } finally {\r\n            for (let b=0; b<bufs.length; b++) {\r\n                NetUtil.Module._free(bufs[b])\r\n            }\r\n        }\r\n\r\n        if (error) throw error\r\n\r\n\r\n        if (returnType==\"array\") {\r\n            const returnData = []\r\n\r\n            for (let v=0; v<returnArraySize; v++) {\r\n                returnData.push(NetUtil.Module[heapOut][res/heapMap[heapOut].BYTES_PER_ELEMENT+v])\r\n            }\r\n\r\n            return returnData\r\n        } else {\r\n            return res\r\n        }\r\n    }\r\n\r\n    static ccallVolume (func, returnType, paramTypes=[], params=[], {heapIn=\"HEAPF32\", heapOut=\"HEAPF32\", depth=1, rows=1, columns=rows}={}) {\r\n\r\n        const totalValues = depth * rows * columns\r\n        const parameters = []\r\n        const parameterTypes = []\r\n\r\n        // Loop through parameters, check if they are volumes, flatten them, and send them along with their dimensions\r\n        for (let p=0; p<params.length; p++) {\r\n\r\n            let parameter = params[p]\r\n            const isVolume = Array.isArray(parameter) && Array.isArray(parameter[0]) && Array.isArray(parameter[0][0])\r\n\r\n            if (paramTypes[p] == \"volume\" || isVolume) {\r\n                const flat = []\r\n\r\n                for (let d=0; d<parameter.length; d++) {\r\n                    for (let r=0; r<parameter[d].length; r++) {\r\n                        for (let c=0; c<parameter[d][r].length; c++) {\r\n                            flat.push(parameter[d][r][c])\r\n                        }\r\n                    }\r\n                }\r\n\r\n                parameters.splice(parameters.length, 0, flat, parameter.length, parameter[0].length, parameter[0][0].length)\r\n                parameterTypes.splice(parameterTypes.length, 0, \"array\", \"number\", \"number\", \"number\")\r\n\r\n            } else {\r\n                parameters.push(parameter)\r\n                parameterTypes.push(paramTypes[p])\r\n            }\r\n        }\r\n\r\n        const res = NetUtil.ccallArrays(func, returnType==\"volume\" ? \"array\" : returnType, parameterTypes, parameters, {heapIn, heapOut, returnArraySize: totalValues})\r\n        const vol = []\r\n\r\n        if (returnType == \"volume\") {\r\n            for (let d=0; d<depth; d++) {\r\n                const map = []\r\n\r\n                for (let r=0; r<rows; r++) {\r\n                    const row = []\r\n\r\n                    for (let c=0; c<columns; c++) {\r\n                        row.push(res[d * rows * columns + r * columns + c])\r\n                    }\r\n                    map.push(row)\r\n                }\r\n                vol.push(map)\r\n            }\r\n            return vol\r\n        }\r\n\r\n        return res\r\n    }\r\n\r\n    static format (value, type=\"string\") {\r\n        switch (true) {\r\n\r\n            case type==\"string\" && typeof value==\"string\":\r\n                value = value.replace(/(_|\\s)/g, \"\").toLowerCase()\r\n                break\r\n\r\n            case type==\"time\" && typeof value==\"number\":\r\n                const date = new Date(value)\r\n                const formatted = []\r\n\r\n                if (value < 1000) {\r\n                    formatted.push(`${date.getMilliseconds()}ms`)\r\n\r\n                } else if (value < 60000) {\r\n                    formatted.push(`${date.getSeconds()}.${date.getMilliseconds()}s`)\r\n\r\n                } else {\r\n\r\n                    if (value >= 3600000) formatted.push(`${date.getHours()}h`)\r\n\r\n                    formatted.push(`${date.getMinutes()}m`)\r\n                    formatted.push(`${date.getSeconds()}s`)\r\n                }\r\n\r\n                value = formatted.join(\" \")\r\n                break\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    static shuffle (arr) {\r\n        for (let i=arr.length; i; i--) {\r\n            const j = Math.floor(Math.random() * i)\r\n            const x = arr[i-1]\r\n            arr[i-1] = arr[j]\r\n            arr[j] = x\r\n        }\r\n    }\r\n\r\n    static splitData (data, {training=0.7, validation=0.15, test=0.15}={}) {\r\n\r\n        const split = {\r\n            training: [],\r\n            validation: [],\r\n            test: []\r\n        }\r\n\r\n        // Define here splits, for returning at the end\r\n        for (let i=0; i<data.length; i++) {\r\n            let x = Math.random()\r\n\r\n            if (x > 1-training) {\r\n                split.training.push(data[i])\r\n            } else {\r\n\r\n                if (x<validation) {\r\n                    split.validation.push(data[i])\r\n                } else {\r\n                    split.test.push(data[i])\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return split\r\n    }\r\n\r\n    static normalize (data) {\r\n        let minVal = Infinity\r\n        let maxVal = -Infinity\r\n\r\n        for (let i=0; i<data.length; i++) {\r\n            if (data[i] < minVal) {\r\n                minVal = data[i]\r\n            }\r\n            if (data[i] > maxVal) {\r\n                maxVal = data[i]\r\n            }\r\n        }\r\n\r\n        if ((-1*minVal + maxVal) != 0) {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = (data[i] + -1*minVal) / (-1*minVal + maxVal)\r\n            }\r\n        } else {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = 0.5\r\n            }\r\n        }\r\n\r\n        return {minVal, maxVal}\r\n    }\r\n\r\n    static defineProperty (self, prop, valTypes=[], values=[], {getCallback=x=>x, setCallback=x=>x, pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => getCallback(this.Module.ccall(`get_${pre}${prop}`, \"number\", valTypes, values)),\r\n            set: val => this.Module.ccall(`set_${pre}${prop}`, null, valTypes.concat(\"number\"), values.concat(setCallback(val)))\r\n        })\r\n    }\r\n\r\n    static defineArrayProperty (self, prop, valTypes, values, returnSize, {pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => NetUtil.ccallArrays(`get_${pre}${prop}`, \"array\", valTypes, values, {returnArraySize: returnSize, heapOut: \"HEAPF64\"}),\r\n            set: value => NetUtil.ccallArrays(`set_${pre}${prop}`, null, valTypes.concat(\"array\"), values.concat([value]), {heapIn: \"HEAPF64\"})\r\n        })\r\n    }\r\n\r\n    static defineMapProperty (self, prop, valTypes, values, rows, columns, {getCallback=x=>x, setCallback=x=>x, pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => getCallback(NetUtil.ccallVolume(`get_${pre}${prop}`, \"volume\", valTypes, values, {depth: 1, rows, columns, heapOut: \"HEAPF64\"})[0]),\r\n            set: value => NetUtil.ccallVolume(`set_${pre}${prop}`, null, valTypes.concat(\"array\"), values.concat([setCallback(value)]), {heapIn: \"HEAPF64\"})\r\n        })\r\n    }\r\n\r\n    static defineVolumeProperty (self, prop, valTypes, values, depth, rows, columns, {getCallback=x=>x, setCallback=x=>x, pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => getCallback(NetUtil.ccallVolume(`get_${pre}${prop}`, \"volume\", valTypes, values, {depth, rows, columns, heapOut: \"HEAPF64\"})),\r\n            set: value => NetUtil.ccallVolume(`set_${pre}${prop}`, null, valTypes.concat(\"array\"), values.concat([setCallback(value)]), {heapIn: \"HEAPF64\"})\r\n        })\r\n    }\r\n}\r\n\r\nNetUtil.activationsIndeces = {\r\n    noactivation: -1,\r\n    sigmoid: 0,\r\n    tanh: 1,\r\n    lecuntanh: 2,\r\n    relu: 3,\r\n    lrelu: 4,\r\n    rrelu: 5,\r\n    elu: 6\r\n};\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.NetUtil = NetUtil)\r\nexports.NetUtil = NetUtil\r\n\"use strict\"\r\n\r\nclass Network {\r\n\r\n    constructor ({Module, learningRate, activation=\"sigmoid\", updateFn=\"vanillaupdatefn\", cost=\"meansquarederror\", layers=[],\r\n        rmsDecay, rho, lreluSlope, eluAlpha, dropout=1, l2, l1, maxNorm, weightsConfig, channels, conv, pool}) {\r\n\r\n        if (!Module) {\r\n            throw new Error(\"WASM module not provided\")\r\n        }\r\n\r\n        if (typeof activation == \"function\" || typeof cost == \"function\") {\r\n            throw new Error(\"Custom functions are not (yet) supported with WASM.\")\r\n        }\r\n\r\n        NetUtil.Module = Module\r\n        this.Module = Module\r\n        this.conv = {}\r\n        this.pool = {}\r\n        this.netInstance = this.Module.ccall(\"newNetwork\", null, null, null)\r\n        this.state = \"not-defined\"\r\n\r\n        // Learning Rate get / set\r\n        Object.defineProperty(this, \"learningRate\", {\r\n            get: this.Module.cwrap(\"getLearningRate\", null, null).bind(this, this.netInstance),\r\n            set: this.Module.cwrap(\"setLearningRate\", \"number\", null).bind(this, this.netInstance)\r\n        })\r\n\r\n        if (learningRate) this.learningRate = learningRate\r\n\r\n        NetUtil.defineProperty(this, \"dropout\", [\"number\"], [this.netInstance])\r\n        this.dropout = dropout==false ? 1 : dropout\r\n\r\n        if (l2) {\r\n            NetUtil.defineProperty(this, \"l2\", [\"number\"], [this.netInstance])\r\n            NetUtil.defineProperty(this, \"l2Error\", [\"number\"], [this.netInstance])\r\n            this.l2 = typeof l2==\"boolean\" ? 0.001 : l2\r\n        }\r\n\r\n        if (l1) {\r\n            NetUtil.defineProperty(this, \"l1\", [\"number\"], [this.netInstance])\r\n            NetUtil.defineProperty(this, \"l1Error\", [\"number\"], [this.netInstance])\r\n            this.l1 = typeof l1==\"boolean\" ? 0.005 : l1\r\n        }\r\n\r\n        if (maxNorm) {\r\n            NetUtil.defineProperty(this, \"maxNorm\", [\"number\"], [this.netInstance])\r\n            NetUtil.defineProperty(this, \"maxNormTotal\", [\"number\"], [this.netInstance])\r\n            this.maxNorm = typeof maxNorm==\"boolean\" && maxNorm ? 1000 : maxNorm\r\n        }\r\n\r\n        if (channels) {\r\n            NetUtil.defineProperty(this, \"channels\", [\"number\"], [this.netInstance])\r\n            this.channels = channels\r\n        }\r\n\r\n        if (conv) {\r\n            if (conv.filterSize!=undefined)     this.conv.filterSize = conv.filterSize\r\n            if (conv.zeroPadding!=undefined)    this.conv.zeroPadding = conv.zeroPadding\r\n            if (conv.stride!=undefined)         this.conv.stride = conv.stride\r\n        }\r\n\r\n        if (pool) {\r\n            if (pool.size)      this.pool.size = pool.size\r\n            if (pool.stride)    this.pool.stride = pool.stride\r\n        }\r\n\r\n        Object.defineProperty(this, \"error\", {\r\n            get: () => Module.ccall(\"getError\", \"number\", [\"number\"], [this.netInstance])\r\n        })\r\n        Object.defineProperty(this, \"validationError\", {\r\n            get: () => Module.ccall(\"getValidationError\", \"number\", [\"number\"], [this.netInstance])\r\n        })\r\n        Object.defineProperty(this, \"lastValidationError\", {\r\n            get: () => Module.ccall(\"getLastValidationError\", \"number\", [\"number\"], [this.netInstance])\r\n        })\r\n\r\n        // Activation function get / set\r\n        this.activationName = NetUtil.format(activation)\r\n        Object.defineProperty(this, \"activation\", {\r\n            get: () => `WASM ${this.activationName}`,\r\n            set: activation => {\r\n\r\n                if (NetUtil.activationsIndeces[activation] == undefined) {\r\n                    throw new Error(`The ${activation} activation function does not exist`)\r\n                }\r\n                this.activationName = activation\r\n                this.Module.ccall(\"setActivation\", null, [\"number\", \"number\"], [this.netInstance, NetUtil.activationsIndeces[activation]])\r\n            }\r\n        })\r\n        this.activation = this.activationName\r\n\r\n        // Cost function get / set\r\n        const costIndeces = {\r\n            meansquarederror: 0,\r\n            crossentropy: 1\r\n        }\r\n        let costFunctionName = NetUtil.format(cost)\r\n        Object.defineProperty(this, \"cost\", {\r\n            get: () => `WASM ${costFunctionName}`,\r\n            set: cost => {\r\n                if (costIndeces[cost] == undefined) {\r\n                    throw new Error(`The ${cost} function does not exist`)\r\n                }\r\n                costFunctionName = cost\r\n                this.Module.ccall(\"setCostFunction\", null, [\"number\", \"number\"], [this.netInstance, costIndeces[cost]])\r\n            }\r\n        })\r\n        this.cost = costFunctionName\r\n\r\n        const updateFnIndeces = {\r\n            vanillaupdatefn: 0,\r\n            gain: 1,\r\n            adagrad: 2,\r\n            rmsprop: 3,\r\n            adam: 4,\r\n            adadelta: 5\r\n        }\r\n        NetUtil.defineProperty(this, \"updateFn\", [\"number\"], [this.netInstance], {\r\n            getCallback: index => Object.keys(updateFnIndeces).find(key => updateFnIndeces[key]==index),\r\n            setCallback: name => updateFnIndeces[name]\r\n        })\r\n        this.updateFn = NetUtil.format(updateFn)\r\n\r\n\r\n        // Weights init configs\r\n        const weightsConfigFns = {\r\n            uniform: 0,\r\n            gaussian: 1,\r\n            xavieruniform: 2,\r\n            xaviernormal: 3,\r\n            lecununiform: 4,\r\n            lecunnormal: 5\r\n        }\r\n        this.weightsConfig = {}\r\n\r\n        NetUtil.defineProperty(this.weightsConfig, \"distribution\", [\"number\"], [this.netInstance], {\r\n            getCallback: index => Object.keys(weightsConfigFns).find(key => weightsConfigFns[key]==Math.round(index)),\r\n            setCallback: name => weightsConfigFns[name]\r\n        })\r\n        NetUtil.defineProperty(this.weightsConfig, \"limit\", [\"number\"], [this.netInstance])\r\n        NetUtil.defineProperty(this.weightsConfig, \"mean\", [\"number\"], [this.netInstance])\r\n        NetUtil.defineProperty(this.weightsConfig, \"stdDeviation\", [\"number\"], [this.netInstance])\r\n\r\n        this.weightsConfig.distribution = \"xavieruniform\"\r\n\r\n        if (weightsConfig!=undefined && weightsConfig.distribution) {\r\n\r\n            if (typeof weightsConfig.distribution == \"function\") {\r\n                throw new Error(\"Custom weights init functions are not (yet) supported with WASM.\")\r\n            }\r\n\r\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution)\r\n        }\r\n\r\n        this.weightsConfig.limit = weightsConfig && weightsConfig.limit!=undefined ? weightsConfig.limit : 0.1\r\n        this.weightsConfig.mean = weightsConfig && weightsConfig.mean!=undefined ? weightsConfig.mean : 0\r\n        this.weightsConfig.stdDeviation = weightsConfig && weightsConfig.stdDeviation!=undefined ? weightsConfig.stdDeviation : 0.05\r\n\r\n        switch (NetUtil.format(updateFn)) {\r\n\r\n            case \"rmsprop\":\r\n                this.learningRate = this.learningRate==undefined ? 0.001 : this.learningRate\r\n                break\r\n\r\n            case \"adam\":\r\n                this.learningRate = this.learningRate==undefined ? 0.01 : this.learningRate\r\n                break\r\n\r\n            case \"adadelta\":\r\n                NetUtil.defineProperty(this, \"rho\", [\"number\"], [this.netInstance])\r\n                this.rho = rho==null ? 0.95 : rho\r\n                break\r\n\r\n            default:\r\n\r\n                if (learningRate==undefined) {\r\n\r\n                    switch (this.activationName) {\r\n                        case \"relu\":\r\n                        case \"lrelu\":\r\n                        case \"rrelu\":\r\n                        case \"elu\":\r\n                            this.learningRate = 0.01\r\n                            break\r\n\r\n                        case \"tanh\":\r\n                        case \"lecuntanh\":\r\n                            this.learningRate = 0.001\r\n                            break\r\n\r\n                        default:\r\n                            this.learningRate = 0.2\r\n                    }\r\n                }\r\n        }\r\n\r\n        if (this.updateFn==\"rmsprop\") {\r\n            NetUtil.defineProperty(this, \"rmsDecay\", [\"number\"], [this.netInstance])\r\n            this.rmsDecay = rmsDecay===undefined ? 0.99 : rmsDecay\r\n        }\r\n\r\n        if (this.activationName==\"lrelu\") {\r\n            NetUtil.defineProperty(this, \"lreluSlope\", [\"number\"], [this.netInstance])\r\n            this.lreluSlope = lreluSlope==undefined ? -0.0005 : lreluSlope\r\n        } else if (this.activationName==\"elu\") {\r\n            NetUtil.defineProperty(this, \"eluAlpha\", [\"number\"], [this.netInstance])\r\n            this.eluAlpha = eluAlpha==undefined ? 1 : eluAlpha\r\n        }\r\n\r\n        this.layers = []\r\n        this.epochs = 0\r\n\r\n        NetUtil.defineProperty(this, \"iterations\", [\"number\"], [this.netInstance])\r\n        NetUtil.defineProperty(this, \"validations\", [\"number\"], [this.netInstance])\r\n        NetUtil.defineProperty(this, \"validationInterval\", [\"number\"], [this.netInstance])\r\n\r\n        if (layers.length) {\r\n\r\n            this.state = \"constructed\"\r\n\r\n            switch (true) {\r\n                case layers.every(item => Number.isInteger(item)):\r\n                    this.layers = layers.map(size => new FCLayer(size))\r\n                    this.initLayers()\r\n                    break\r\n\r\n                case layers.every(layer => layer instanceof FCLayer || layer instanceof ConvLayer || layer instanceof PoolLayer):\r\n                    this.layers = layers\r\n                    this.initLayers()\r\n                    break\r\n\r\n                default:\r\n                    throw new Error(\"There was an error constructing from the layers given.\")\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    initLayers (input, expected) {\r\n\r\n        if (this.state == \"initialised\") {\r\n            return\r\n        }\r\n\r\n        if (this.state == \"not-defined\") {\r\n            this.layers[0] = new FCLayer(input)\r\n            this.layers[1] = new FCLayer(Math.ceil(input/expected > 5 ? expected + (Math.abs(input-expected))/4\r\n                                                                      : input + expected))\r\n            this.layers[2] = new FCLayer(Math.ceil(expected))\r\n        }\r\n\r\n        this.state = \"initialised\"\r\n\r\n        for (let l=0; l<this.layers.length; l++) {\r\n\r\n            const layer = this.layers[l]\r\n\r\n            switch (true) {\r\n                case layer instanceof FCLayer:\r\n                    this.Module.ccall(\"addFCLayer\", null, [\"number\", \"number\"], [this.netInstance, layer.size])\r\n                    break\r\n\r\n                case layer instanceof ConvLayer:\r\n                    this.Module.ccall(\"addConvLayer\", null, [\"number\", \"number\"], [this.netInstance, layer.size])\r\n                    break\r\n\r\n                case layer instanceof PoolLayer:\r\n                    this.Module.ccall(\"addPoolLayer\", null, [\"number\", \"number\"], [this.netInstance, layer.size])\r\n                    break\r\n            }\r\n\r\n            this.joinLayer(layer, l)\r\n        }\r\n\r\n        this.Module.ccall(\"initLayers\", null, [\"number\"], [this.netInstance])\r\n    }\r\n\r\n    joinLayer (layer, layerIndex) {\r\n\r\n        layer.net = this\r\n        layer.layerIndex = layerIndex\r\n\r\n        if (layerIndex) {\r\n            this.layers[layerIndex-1].assignNext(layer)\r\n            layer.assignPrev(this.layers[layerIndex-1], layerIndex)\r\n        }\r\n        layer.init()\r\n    }\r\n\r\n    forward (data) {\r\n\r\n        if (this.state!=\"initialised\") {\r\n            throw new Error(\"The network layers have not been initialised.\")\r\n        }\r\n\r\n        if (data === undefined || data === null) {\r\n            throw new Error(\"No data passed to Network.forward()\")\r\n        }\r\n\r\n        if (data.length != this.layers[0].neurons.length) {\r\n            console.warn(\"Input data length did not match input layer neurons count.\")\r\n        }\r\n\r\n        return NetUtil.ccallArrays(\"forward\", \"array\", [\"number\", \"array\"], [this.netInstance, data], {\r\n            heapOut: \"HEAPF64\",\r\n            returnArraySize: this.layers[this.layers.length-1].neurons.length\r\n        })\r\n    }\r\n\r\n    train (data, {epochs=1, callback, miniBatchSize=1, log=true, shuffle=false, validation}={}) {\r\n\r\n        miniBatchSize = typeof miniBatchSize==\"boolean\" && miniBatchSize ? data[0].expected.length : miniBatchSize\r\n        this.Module.ccall(\"set_miniBatchSize\", null, [\"number\", \"number\"], [this.netInstance, miniBatchSize])\r\n        this.validation = validation\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (data === undefined || data === null) {\r\n                return void reject(\"No data provided\")\r\n            }\r\n\r\n            if (this.state != \"initialised\") {\r\n                this.initLayers(data[0].input.length, data[0].expected.length)\r\n            }\r\n\r\n            const startTime = Date.now()\r\n\r\n            const dimension = data[0].input.length\r\n            const itemSize = dimension + data[0].expected.length\r\n            const itemsCount = itemSize * data.length\r\n\r\n            if (log) {\r\n                console.log(`Training started. Epochs: ${epochs} Batch size: ${miniBatchSize}`)\r\n            }\r\n\r\n            // Load training data\r\n            const typedArray = new Float32Array(itemsCount)\r\n\r\n            for (let di=0; di<data.length; di++) {\r\n\r\n                if (!data[di].hasOwnProperty(\"input\") || !data[di].hasOwnProperty(\"expected\")) {\r\n                    return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected'\")\r\n                }\r\n\r\n                let index = itemSize*di\r\n\r\n                for (let ii=0; ii<data[di].input.length; ii++) {\r\n                    typedArray[index] = data[di].input[ii]\r\n                    index++\r\n                }\r\n\r\n                for (let ei=0; ei<data[di].expected.length; ei++) {\r\n                    typedArray[index] = data[di].expected[ei]\r\n                    index++\r\n                }\r\n            }\r\n\r\n            const buf = this.Module._malloc(typedArray.length*typedArray.BYTES_PER_ELEMENT)\r\n            this.Module.HEAPF32.set(typedArray, buf >> 2)\r\n\r\n            let elapsed\r\n\r\n            this.Module.ccall(\"loadTrainingData\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"],\r\n                                                      [this.netInstance, buf, itemsCount, itemSize, dimension])\r\n\r\n            if (shuffle) {\r\n                this.Module.ccall(\"shuffleTrainingData\", null, [\"number\"], [this.netInstance])\r\n            }\r\n\r\n            let validationBuf\r\n\r\n            if (this.validation) {\r\n\r\n                this.validationInterval = this.validation.interval || data.length // Default to 1 epoch\r\n\r\n                // Load validation data\r\n                if (this.validation.data) {\r\n                    const typedArray = new Float32Array(this.validation.data.length)\r\n\r\n                    for (let di=0; di<this.validation.data.length; di++) {\r\n\r\n                        let index = itemSize*di\r\n\r\n                        for (let ii=0; ii<this.validation.data[di].input.length; ii++) {\r\n                            typedArray[index] = this.validation.data[di].input[ii]\r\n                            index++\r\n                        }\r\n\r\n                        for (let ei=0; ei<this.validation.data[di].expected.length; ei++) {\r\n                            typedArray[index] = this.validation.data[di].expected[ei]\r\n                            index++\r\n                        }\r\n                    }\r\n                    validationBuf = this.Module._malloc(typedArray.length*typedArray.BYTES_PER_ELEMENT)\r\n                    this.Module.HEAPF32.set(typedArray, buf >> 2)\r\n\r\n                    this.Module.ccall(\"loadValidationData\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"],\r\n                                                    [this.netInstance, buf, itemsCount, itemSize, dimension])\r\n                }\r\n            }\r\n\r\n            if (callback) {\r\n\r\n                let epochIndex = 0\r\n                let iterationIndex = 0\r\n\r\n                const doEpoch = () => {\r\n\r\n                    if (this.l2) this.l2Error = 0\r\n                    if (this.l1) this.l1Error = 0\r\n\r\n                    iterationIndex = 0\r\n                    doIteration()\r\n                }\r\n\r\n                const doIteration = () => {\r\n\r\n                    this.Module.ccall(\"train\", \"number\", [\"number\", \"number\", \"number\"], [this.netInstance, miniBatchSize, iterationIndex])\r\n\r\n                    callback({\r\n                        iterations: (this.iterations),\r\n                        validations: (this.validations),\r\n                        trainingError: this.error,\r\n                        validationError: this.validationError,\r\n                        elapsed: Date.now() - startTime,\r\n                        input: data[iterationIndex].input\r\n                    })\r\n\r\n                    iterationIndex += miniBatchSize\r\n\r\n                    if (iterationIndex < data.length) {\r\n                        setTimeout(doIteration.bind(this), 0)\r\n                    } else {\r\n                        epochIndex++\r\n\r\n                        elapsed = Date.now() - startTime\r\n\r\n                        if (log) {\r\n                            let text = `Epoch: ${epochIndex}\\nTraining Error: ${this.error}`\r\n\r\n                            if (this.validation) {\r\n                                text += `\\nValidation Error: ${this.lastValidationError}`\r\n                            }\r\n\r\n                            if (this.l2Error!=undefined) {\r\n                                text += `\\nL2 Error: ${this.l2Error/iterationIndex}`\r\n                            }\r\n\r\n                            text += `\\nElapsed: ${NetUtil.format(elapsed, \"time\")} Average Duration: ${NetUtil.format(elapsed/epochIndex, \"time\")}`\r\n                            console.log(text)\r\n                        }\r\n\r\n                        if (epochIndex < epochs) {\r\n                            doEpoch()\r\n                        } else {\r\n                            this.Module._free(buf)\r\n                            this.Module._free(validationBuf)\r\n                            resolve()\r\n                        }\r\n                    }\r\n                }\r\n                doEpoch()\r\n\r\n            } else {\r\n                for (let e=0; e<epochs; e++) {\r\n\r\n                    if (this.l2) this.l2Error = 0\r\n                    if (this.l1) this.l1Error = 0\r\n\r\n                    this.Module.ccall(\"train\", \"number\", [\"number\", \"number\", \"number\"], [this.netInstance, -1, 0])\r\n                    elapsed = Date.now() - startTime\r\n\r\n                    if (log) {\r\n                        let text = `Epoch: ${e+1}\\nTraining Error: ${this.error}`\r\n\r\n                        if (validation) {\r\n                            text += `\\nValidation Error: ${this.lastValidationError}`\r\n                        }\r\n\r\n                        if (this.l2Error!=undefined) {\r\n                            text += `\\nL2 Error: ${this.l2Error/data.length}`\r\n                        }\r\n\r\n                        text += `\\nElapsed: ${NetUtil.format(elapsed, \"time\")} Average Duration: ${NetUtil.format(elapsed/(e+1), \"time\")}`\r\n                        console.log(text)\r\n                    }\r\n                }\r\n                this.Module._free(buf)\r\n                this.Module._free(validationBuf)\r\n\r\n                if (log) {\r\n                    console.log(`Training finished. Total time: ${NetUtil.format(elapsed, \"time\")}`)\r\n                }\r\n                resolve()\r\n            }\r\n        })\r\n    }\r\n\r\n    test (data, {log=true, callback}={}) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (data === undefined || data === null) {\r\n                reject(\"No data provided\")\r\n            }\r\n\r\n            if (log) {\r\n                console.log(\"Testing started\")\r\n            }\r\n\r\n            const startTime = Date.now()\r\n            const dimension = data[0].input.length\r\n            const itemSize = dimension + data[0].expected.length\r\n            const itemsCount = itemSize * data.length\r\n            const typedArray = new Float32Array(itemsCount)\r\n\r\n            for (let di=0; di<data.length; di++) {\r\n\r\n                let index = itemSize*di\r\n\r\n                for (let ii=0; ii<data[di].input.length; ii++) {\r\n                    typedArray[index] = data[di].input[ii]\r\n                    index++\r\n                }\r\n\r\n                for (let ei=0; ei<data[di].expected.length; ei++) {\r\n                    typedArray[index] = data[di].expected[ei]\r\n                    index++\r\n                }\r\n            }\r\n\r\n            const buf = this.Module._malloc(typedArray.length*typedArray.BYTES_PER_ELEMENT)\r\n            this.Module.HEAPF32.set(typedArray, buf >> 2)\r\n\r\n            this.Module.ccall(\"loadTestingData\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"],\r\n                                            [this.netInstance, buf, itemsCount, itemSize, dimension])\r\n\r\n            if (callback) {\r\n\r\n                let iterationIndex = 0\r\n                let totalError = 0\r\n\r\n                const doIteration = () => {\r\n\r\n                    totalError += this.Module.ccall(\"test\", \"number\", [\"number\", \"number\", \"number\"], [this.netInstance, 1, iterationIndex])\r\n\r\n                    callback({\r\n                        iterations: (iterationIndex+1),\r\n                        error: totalError/(iterationIndex+1),\r\n                        elapsed: Date.now() - startTime,\r\n                        input: data[iterationIndex].input\r\n                    })\r\n\r\n                    if (++iterationIndex < data.length) {\r\n                        setTimeout(doIteration.bind(this), 0)\r\n                    } else {\r\n                        iterationIndex\r\n\r\n                        const elapsed = Date.now() - startTime\r\n                        log && console.log(`Testing finished. Total time: ${NetUtil.format(elapsed, \"time\")}  Average iteration time: ${NetUtil.format(elapsed/iterationIndex, \"time\")}`)\r\n\r\n                        this.Module._free(buf)\r\n                        resolve(totalError/data.length)\r\n                    }\r\n                }\r\n\r\n                doIteration()\r\n\r\n            } else {\r\n\r\n                const avgError = this.Module.ccall(\"test\", \"number\", [\"number\", \"number\"], [this.netInstance, -1, 0])\r\n                this.Module._free(buf)\r\n\r\n                const elapsed = Date.now() - startTime\r\n\r\n                if (log) {\r\n                    console.log(`Testing finished. Total time: ${NetUtil.format(elapsed, \"time\")}  Average iteration time: ${NetUtil.format(elapsed/data.length, \"time\")}`)\r\n                }\r\n\r\n                resolve(avgError)\r\n            }\r\n        })\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            layers: this.layers.map(layer => layer.toJSON())\r\n        }\r\n    }\r\n\r\n    fromJSON (data) {\r\n\r\n        if (data === undefined || data === null) {\r\n            throw new Error(\"No JSON data given to import.\")\r\n        }\r\n\r\n        if (data.layers.length != this.layers.length) {\r\n            throw new Error(`Mismatched layers (${data.layers.length} layers in import data, but ${this.layers.length} configured)`)\r\n        }\r\n\r\n        this.Module.ccall(\"resetDeltaWeights\", null, [\"number\"], [this.netInstance])\r\n        this.layers.forEach((layer, li) => li && layer.fromJSON(data.layers[li], li))\r\n    }\r\n\r\n    static get version () {\r\n        return \"3.2.0\"\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.Network = Network)\r\nexports.Network = Network\r\n\"use strict\"\r\n\r\nclass Neuron {\r\n\r\n    constructor () {}\r\n\r\n    init (netInstance, layerIndex, neuronIndex, {updateFn}) {\r\n\r\n        const paramTypes = [\"number\", \"number\", \"number\"]\r\n        const params = [netInstance, layerIndex, neuronIndex]\r\n\r\n        NetUtil.defineProperty(this, \"sum\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineProperty(this, \"dropped\", paramTypes, params, {\r\n            pre: \"neuron_\",\r\n            getCallback: v => v==1,\r\n            setCallback: v => v ? 1 : 0\r\n        })\r\n        NetUtil.defineProperty(this, \"activation\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineProperty(this, \"error\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineProperty(this, \"derivative\", paramTypes, params, {pre: \"neuron_\"})\r\n\r\n        NetUtil.defineProperty(this, \"bias\", paramTypes, params, {pre: \"neuron_\"})\r\n\r\n        if (layerIndex) {\r\n            NetUtil.defineArrayProperty(this, \"weights\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n        }\r\n\r\n        NetUtil.defineProperty(this, \"deltaBias\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineArrayProperty(this, \"deltaWeights\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n\r\n        switch (updateFn) {\r\n            case \"gain\":\r\n                NetUtil.defineProperty(this, \"biasGain\", paramTypes, params, {pre: \"neuron_\"})\r\n                NetUtil.defineArrayProperty(this, \"weightGain\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n                break\r\n            case \"adagrad\":\r\n            case \"rmsprop\":\r\n            case \"adadelta\":\r\n                NetUtil.defineProperty(this, \"biasCache\", paramTypes, params, {pre: \"neuron_\"})\r\n                NetUtil.defineArrayProperty(this, \"weightsCache\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n\r\n                if (updateFn==\"adadelta\") {\r\n                    NetUtil.defineProperty(this, \"adadeltaBiasCache\", paramTypes, params, {pre: \"neuron_\"})\r\n                    NetUtil.defineArrayProperty(this, \"adadeltaCache\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n                }\r\n                break\r\n\r\n            case \"adam\":\r\n                NetUtil.defineProperty(this, \"m\", paramTypes, params, {pre: \"neuron_\"})\r\n                NetUtil.defineProperty(this, \"v\", paramTypes, params, {pre: \"neuron_\"})\r\n                break\r\n        }\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.Neuron = Neuron)\r\nexports.Neuron = Neuron\r\n\"use strict\"\r\n\r\nclass PoolLayer {\r\n\r\n    constructor (size, {stride, activation}={}) {\r\n\r\n        if (size)   this.size = size\r\n        if (stride) this.stride = stride\r\n\r\n        this.activation = false\r\n        this.activationName = activation\r\n\r\n        if (activation != undefined) {\r\n            if (typeof activation == \"boolean\" && !activation) {\r\n                activation = \"noactivation\"\r\n            }\r\n            if (typeof activation != \"string\") {\r\n                throw new Error(\"Custom activation functions are not available in the WebAssembly version\")\r\n            }\r\n            this.activationName = NetUtil.format(activation)\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n\r\n        this.netInstance = this.net.netInstance\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n\r\n        let channels\r\n        let prevLayerOutWidth = layer.outMapSize\r\n        const size = this.size || this.net.pool.size || 2\r\n        const stride = this.stride || this.net.pool.stride || this.size\r\n\r\n        NetUtil.defineProperty(this, \"channels\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineProperty(this, \"stride\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        this.size = size\r\n        this.stride = stride\r\n\r\n        switch (true) {\r\n\r\n            case layer instanceof FCLayer:\r\n                channels = this.net.channels\r\n                prevLayerOutWidth = Math.max(Math.floor(Math.sqrt(layer.size/channels)), 1)\r\n                break\r\n\r\n            case layer instanceof ConvLayer:\r\n                channels = layer.size\r\n                break\r\n\r\n            case layer instanceof PoolLayer:\r\n                channels = layer.channels\r\n                break\r\n        }\r\n\r\n        this.channels = channels\r\n\r\n        NetUtil.defineProperty(this, \"prevLayerOutWidth\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineProperty(this, \"inMapValuesCount\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineProperty(this, \"outMapSize\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineVolumeProperty(this, \"errors\", [\"number\", \"number\"], [this.netInstance, layerIndex], channels, prevLayerOutWidth, prevLayerOutWidth, {pre: \"pool_\"})\r\n\r\n        const outMapSize = (prevLayerOutWidth - size) / stride + 1\r\n        this.outMapSize = outMapSize\r\n        this.inMapValuesCount = prevLayerOutWidth ** 2\r\n\r\n        NetUtil.defineVolumeProperty(this, \"activations\", [\"number\", \"number\"], [this.netInstance, layerIndex], channels, outMapSize, outMapSize, {pre: \"pool_\"})\r\n        NetUtil.defineVolumeProperty(this, \"indeces\", [\"number\", \"number\"], [this.netInstance, layerIndex], channels, outMapSize, outMapSize, {\r\n            pre: \"pool_\",\r\n            getCallback: vol => vol.map(map => map.map(row => row.map(val => [parseInt(val/2), val%2]))),\r\n            setCallback: vol => vol.map(map => map.map(row => row.map(([x,y]) => 2*x+y)))\r\n        })\r\n\r\n        if (outMapSize%1 != 0) {\r\n            throw new Error(`Misconfigured hyperparameters. Activation volume dimensions would be ${outMapSize} in pool layer at index ${layerIndex}`)\r\n        }\r\n\r\n        if (this.activationName) {\r\n            NetUtil.defineProperty(this, \"activation\", [\"number\", \"number\"], [this.netInstance, layerIndex], {\r\n                pre: \"pool_\",\r\n                getCallback: _ => `WASM ${this.activationName}`\r\n            })\r\n            this.activation = NetUtil.activationsIndeces[this.activationName]\r\n        }\r\n    }\r\n\r\n    init () {}\r\n\r\n    toJSON () {\r\n        return {}\r\n    }\r\n\r\n    fromJSON() {}\r\n\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.PoolLayer = PoolLayer)\r\nexports.PoolLayer = PoolLayer\n//# sourceMappingURL=jsNetWebAssembly.concat.js.map"]}