{"version":3,"sources":["jsNetWebAssembly.concat.js"],"names":["ConvLayer","[object Object]","size","filterSize","zeroPadding","stride","activation","this","layerIndex","activationName","Error","NetUtil","format","layer","nextLayer","netInstance","net","prevLayer","conv","defineProperty","pre","channels","FCLayer","PoolLayer","activations","length","undefined","Math","floor","prevLayerOutWidth","max","sqrt","outMapSize","outSize","inMapValuesCount","pow","inZPMapValuesCount","getCallback","_","activationsIndeces","filters","Array","map","f","Filter","forEach","filter","fi","paramTypes","params","defineMapProperty","m","row","v","init","updateFn","weights","bias","data","window","exports","neurons","n","Neuron","neuron","ni","Layer","filterIndex","defineVolumeProperty","NetMath","values","total","i","func","returnType","heapIn","heapOut","returnArraySize","heapMap","HEAP8","Int8Array","HEAPU8","Uint8Array","HEAP16","Int16Array","HEAPU16","Uint16Array","HEAP32","Int32Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","res","error","returnTypeParam","parameters","parameterTypes","bufs","p","isArray","typedArray","buf","Module","_malloc","BYTES_PER_ELEMENT","set","push","ccall","e","b","_free","returnData","depth","rows","columns","totalValues","parameter","isVolume","flat","d","r","c","splice","ccallArrays","vol","value","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getSeconds","getHours","getMinutes","join","self","prop","valTypes","x","setCallback","Object","get","val","concat","returnSize","ccallVolume","sigmoid","tanh","lecuntanh","relu","lrelu","rrelu","elu","Network","learningRate","cost","layers","rmsDecay","rho","lreluSlope","eluAlpha","dropout","l2","l1","maxNorm","weightsConfig","pool","state","cwrap","bind","costIndeces","meansquarederror","crossentropy","costFunctionName","updateFnIndeces","vanillaupdatefn","gain","adagrad","rmsprop","adam","adadelta","index","keys","find","key","name","weightsConfigFns","uniform","gaussian","xavieruniform","xaviernormal","lecununiform","lecunnormal","round","distribution","limit","mean","stdDeviation","epochs","iterations","every","item","Number","isInteger","initLayers","input","expected","ceil","abs","l","joinLayer","assignNext","assignPrev","console","warn","callback","miniBatchSize","log","shuffle","Promise","resolve","reject","output","startTime","now","dimension","itemSize","itemsCount","di","hasOwnProperty","ii","ei","elapsed","epochIndex","iterationIndex","doEpoch","l2Error","l1Error","doIteration","setTimeout","totalError","avgError","toJSON","li","fromJSON","version","neuronIndex","defineArrayProperty","parseInt","y"],"mappings":"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","file":"jsNetWebAssembly.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass ConvLayer {\r\n\r\n    constructor (size, {filterSize, zeroPadding, stride, activation}={}) {\r\n\r\n        this.size = size\r\n        this.stride = stride\r\n        this.filterSize = filterSize\r\n        this.layerIndex = 0\r\n        this.zeroPadding = zeroPadding\r\n\r\n        this.activation = false\r\n        this.activationName = activation\r\n\r\n        if (activation) {\r\n            if (typeof activation != \"string\") {\r\n                throw new Error(\"Custom activation functions are not available in the WebAssembly version\")\r\n            }\r\n            this.activationName = NetUtil.format(activation)\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n\r\n        this.netInstance = this.net.netInstance\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n\r\n        const stride = this.stride || this.net.conv.stride || 1\r\n        const filterSize = this.filterSize || this.net.conv.filterSize || 3\r\n        let zeroPadding = this.zeroPadding\r\n\r\n        NetUtil.defineProperty(this, \"channels\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"filterSize\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"stride\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"zeroPadding\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n\r\n        this.size = this.size || 4\r\n        let channels\r\n\r\n        switch (true) {\r\n            case layer instanceof FCLayer:\r\n                channels = this.net.channels || 1\r\n                break\r\n\r\n            case layer instanceof ConvLayer:\r\n                channels = layer.size\r\n                break\r\n\r\n            case layer instanceof PoolLayer:\r\n                channels = layer.activations.length\r\n                break\r\n        }\r\n\r\n        if (zeroPadding == undefined) {\r\n            zeroPadding = this.net.conv.zeroPadding==undefined ? Math.floor(filterSize/2) : this.net.conv.zeroPadding\r\n        }\r\n\r\n        this.channels = channels\r\n        this.filterSize = filterSize\r\n        this.stride = stride\r\n        this.zeroPadding = zeroPadding\r\n\r\n        // Caching calculations\r\n        const prevLayerOutWidth = layer instanceof FCLayer ? Math.max(Math.floor(Math.sqrt(layer.size/channels)), 1)\r\n                                                           : layer.outMapSize\r\n\r\n        NetUtil.defineProperty(this, \"inMapValuesCount\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"inZPMapValuesCount\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n        NetUtil.defineProperty(this, \"outMapSize\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"conv_\"})\r\n\r\n        const outSize = (prevLayerOutWidth - filterSize + 2*zeroPadding) / stride + 1\r\n        this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2)\r\n        this.inZPMapValuesCount = Math.pow(prevLayerOutWidth + zeroPadding*2, 2)\r\n        this.outMapSize = outSize\r\n\r\n        if (outSize%1!=0) {\r\n            throw new Error(`Misconfigured hyperparameters. Activation volume dimensions would be ${outSize} in conv layer at index ${layerIndex}`)\r\n        }\r\n\r\n        if (this.activationName !== false && this.net.activationName !== false) {\r\n            NetUtil.defineProperty(this, \"activation\", [\"number\", \"number\"], [this.netInstance, layerIndex], {\r\n                pre: \"conv_\",\r\n                getCallback: _ => `WASM ${this.activationName||this.net.activationName}`\r\n            })\r\n            this.activation = NetUtil.activationsIndeces[this.activationName||this.net.activationName]\r\n        }\r\n\r\n        this.filters = [...new Array(this.size)].map(f => new Filter())\r\n    }\r\n\r\n    init () {\r\n        this.filters.forEach((filter, fi) => {\r\n\r\n            const paramTypes = [\"number\", \"number\", \"number\"]\r\n            const params = [this.netInstance, this.layerIndex, fi]\r\n\r\n            NetUtil.defineMapProperty(filter, \"activationMap\", paramTypes, params, this.outMapSize, this.outMapSize, {pre: \"filter_\"})\r\n            NetUtil.defineMapProperty(filter, \"errorMap\", paramTypes, params, this.outMapSize, this.outMapSize, {pre: \"filter_\"})\r\n            NetUtil.defineMapProperty(filter, \"sumMap\", paramTypes, params, this.outMapSize, this.outMapSize, {pre: \"filter_\"})\r\n            NetUtil.defineMapProperty(filter, \"dropoutMap\", paramTypes, params, this.outMapSize, this.outMapSize, {\r\n                pre: \"filter_\",\r\n                getCallback: m => m.map(row => row.map(v => v==1))\r\n            })\r\n\r\n            filter.init(this.netInstance, this.layerIndex, fi, {\r\n                updateFn: this.net.updateFn,\r\n                filterSize: this.filterSize,\r\n                channels: this.channels\r\n            })\r\n        })\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            weights: this.filters.map(filter => {\r\n                return {\r\n                    bias: filter.bias,\r\n                    weights: filter.weights\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fromJSON (data, layerIndex) {\r\n        this.filters.forEach((filter, fi) => {\r\n\r\n            if (data.weights[fi].weights.length != filter.weights.length) {\r\n                throw new Error(`Mismatched weights depth. Given: ${data.weights[fi].weights.length} Existing: ${filter.weights.length}. At: layers[${layerIndex}], filters[${fi}]`)\r\n            }\r\n\r\n            if (data.weights[fi].weights[0].length != filter.weights[0].length) {\r\n                throw new Error(`Mismatched weights size. Given: ${data.weights[fi].weights[0].length} Existing: ${filter.weights[0].length}. At: layers[${layerIndex}], filters[${fi}]`)\r\n            }\r\n\r\n            filter.bias = data.weights[fi].bias\r\n            filter.weights = data.weights[fi].weights\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.ConvLayer = ConvLayer)\r\n\r\n\"use strict\"\r\n\r\nclass FCLayer {\r\n\r\n    constructor (size, {activation}={}) {\r\n        this.size = size\r\n        this.neurons = [...new Array(size)].map(n => new Neuron())\r\n        this.layerIndex = 0\r\n\r\n        if (activation != undefined) {\r\n            if (typeof activation != \"string\") {\r\n                throw new Error(\"Custom activation functions are not available in the WebAssembly version\")\r\n            }\r\n            this.activationName = NetUtil.format(activation)\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n        this.netInstance = this.net.netInstance\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n\r\n        if (this.activationName || this.net.activationName) {\r\n            NetUtil.defineProperty(this, \"activation\", [\"number\", \"number\"], [this.netInstance, layerIndex], {\r\n                pre: \"fc_\",\r\n                getCallback: _ => `WASM ${this.activationName||this.net.activationName}`\r\n            })\r\n            this.activation = NetUtil.activationsIndeces[this.activationName||this.net.activationName]\r\n        }\r\n    }\r\n\r\n    init () {\r\n        this.neurons.forEach((neuron, ni) => {\r\n            switch (true) {\r\n\r\n                case this.prevLayer instanceof FCLayer:\r\n                    neuron.size = this.prevLayer.size\r\n                    break\r\n\r\n                case this.prevLayer instanceof ConvLayer:\r\n                    neuron.size = this.prevLayer.filters.length * this.prevLayer.outMapSize**2\r\n                    break\r\n\r\n                case this.prevLayer instanceof PoolLayer:\r\n                    neuron.size = this.prevLayer.channels * this.prevLayer.outMapSize**2\r\n                    break\r\n            }\r\n\r\n            neuron.init(this.netInstance, this.layerIndex, ni, {\r\n                updateFn: this.net.updateFn\r\n            })\r\n        })\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            weights: this.neurons.map(neuron => {\r\n                return {\r\n                    bias: neuron.bias,\r\n                    weights: neuron.weights\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fromJSON (data, layerIndex) {\r\n\r\n        this.neurons.forEach((neuron, ni) => {\r\n\r\n            if (data.weights[ni].weights.length!=(neuron.weights).length) {\r\n                throw new Error(`Mismatched weights count. Given: ${data.weights[ni].weights.length} Existing: ${neuron.weights.length}. At layers[${layerIndex}], neurons[${ni}]`)\r\n            }\r\n\r\n            neuron.bias = data.weights[ni].bias\r\n            neuron.weights = data.weights[ni].weights\r\n        })\r\n    }\r\n}\r\n\r\nconst Layer = FCLayer\r\n\r\ntypeof window==\"undefined\" && (exports.FCLayer = exports.Layer = FCLayer)\r\n\"use strict\"\r\n\r\nclass Filter {\r\n\r\n    constructor () {}\r\n\r\n    init (netInstance, layerIndex, filterIndex, {updateFn, channels, filterSize}) {\r\n\r\n        const paramTypes = [\"number\", \"number\", \"number\"]\r\n        const params = [netInstance, layerIndex, filterIndex]\r\n\r\n        NetUtil.defineProperty(this, \"bias\", paramTypes, params, {pre: \"filter_\"})\r\n        NetUtil.defineVolumeProperty(this, \"weights\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n        NetUtil.defineProperty(this, \"deltaBias\", paramTypes, params, {pre: \"filter_\"})\r\n        NetUtil.defineVolumeProperty(this, \"deltaWeights\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n\r\n        switch (updateFn) {\r\n            case \"gain\":\r\n                NetUtil.defineProperty(this, \"biasGain\", paramTypes, params, {pre: \"filter_\"})\r\n                NetUtil.defineVolumeProperty(this, \"weightGain\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n                break\r\n            case \"adagrad\":\r\n            case \"rmsprop\":\r\n            case \"adadelta\":\r\n                NetUtil.defineProperty(this, \"biasCache\", paramTypes, params, {pre: \"filter_\"})\r\n                NetUtil.defineVolumeProperty(this, \"weightsCache\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n\r\n                if (updateFn == \"adadelta\") {\r\n                    NetUtil.defineProperty(this, \"adadeltaBiasCache\", paramTypes, params, {pre: \"filter_\"})\r\n                    NetUtil.defineVolumeProperty(this, \"adadeltaWeightsCache\", paramTypes, params, channels, filterSize, filterSize, {pre: \"filter_\"})\r\n                }\r\n                break\r\n            case \"adam\":\r\n                NetUtil.defineProperty(this, \"m\", paramTypes, params, {pre: \"filter_\"})\r\n                NetUtil.defineProperty(this, \"v\", paramTypes, params, {pre: \"filter_\"})\r\n                break\r\n        }\r\n    }\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.Filter = Filter)\r\n\"use strict\"\r\n\r\nclass NetMath {\r\n    static softmax (values) {\r\n        let total = 0\r\n\r\n        for (let i=0; i<values.length; i++) {\r\n            total += values[i]\r\n        }\r\n\r\n        for (let i=0; i<values.length; i++) {\r\n            if (total) {\r\n                values[i] /= total\r\n            }\r\n        }\r\n\r\n        return values\r\n    }\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.NetMath = NetMath)\r\n\"use strict\"\r\n\r\nclass NetUtil {\r\n\r\n    static ccallArrays (func, returnType, paramTypes, params, {heapIn=\"HEAPF32\", heapOut=\"HEAPF32\", returnArraySize=1}={}) {\r\n\r\n        const heapMap = {}\r\n        heapMap.HEAP8 = Int8Array // int8_t\r\n        heapMap.HEAPU8 = Uint8Array // uint8_t\r\n        heapMap.HEAP16 = Int16Array // int16_t\r\n        heapMap.HEAPU16 = Uint16Array // uint16_t\r\n        heapMap.HEAP32 = Int32Array // int32_t\r\n        heapMap.HEAPU32 = Uint32Array // uint32_t\r\n        heapMap.HEAPF32 = Float32Array // float\r\n        heapMap.HEAPF64 = Float64Array // double\r\n\r\n        let res\r\n        let error\r\n        paramTypes = paramTypes || []\r\n        const returnTypeParam = returnType==\"array\" ? \"number\" : returnType\r\n        const parameters = []\r\n        const parameterTypes = []\r\n        const bufs = []\r\n\r\n        try {\r\n            if (params) {\r\n                for (let p=0; p<params.length; p++) {\r\n\r\n                    if (paramTypes[p] == \"array\" || Array.isArray(params[p])) {\r\n\r\n                        const typedArray = new heapMap[heapIn](params[p].length)\r\n\r\n                        for (let i=0; i<params[p].length; i++) {\r\n                            typedArray[i] = params[p][i]\r\n                        }\r\n\r\n                        const buf = NetUtil.Module._malloc(typedArray.length * typedArray.BYTES_PER_ELEMENT)\r\n\r\n                        switch (heapIn) {\r\n                            case \"HEAP8\": case \"HEAPU8\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf)\r\n                                break\r\n                            case \"HEAP16\": case \"HEAPU16\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf >> 1)\r\n                                break\r\n                            case \"HEAP32\": case \"HEAPU32\": case \"HEAPF32\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf >> 2)\r\n                                break\r\n                            case \"HEAPF64\":\r\n                                NetUtil.Module[heapIn].set(typedArray, buf >> 3)\r\n                                break\r\n                        }\r\n\r\n                        bufs.push(buf)\r\n                        parameters.push(buf)\r\n                        parameters.push(params[p].length)\r\n                        parameterTypes.push(\"number\")\r\n                        parameterTypes.push(\"number\")\r\n\r\n                    } else {\r\n                        parameters.push(params[p])\r\n                        parameterTypes.push(paramTypes[p]==undefined ? \"number\" : paramTypes[p])\r\n                    }\r\n                }\r\n            }\r\n\r\n            res = NetUtil.Module.ccall(func, returnTypeParam, parameterTypes, parameters)\r\n        } catch (e) {\r\n            error = e\r\n        } finally {\r\n            for (let b=0; b<bufs.length; b++) {\r\n                NetUtil.Module._free(bufs[b])\r\n            }\r\n        }\r\n\r\n        if (error) throw error\r\n\r\n\r\n        if (returnType==\"array\") {\r\n            const returnData = []\r\n\r\n            for (let v=0; v<returnArraySize; v++) {\r\n                returnData.push(NetUtil.Module[heapOut][res/heapMap[heapOut].BYTES_PER_ELEMENT+v])\r\n            }\r\n\r\n            return returnData\r\n        } else {\r\n            return res\r\n        }\r\n    }\r\n\r\n    static ccallVolume (func, returnType, paramTypes=[], params=[], {heapIn=\"HEAPF32\", heapOut=\"HEAPF32\", depth=1, rows=1, columns=rows}={}) {\r\n\r\n        const totalValues = depth * rows * columns\r\n        const parameters = []\r\n        const parameterTypes = []\r\n\r\n        // Loop through parameters, check if they are volumes, flatten them, and send them along with their dimensions\r\n        for (let p=0; p<params.length; p++) {\r\n\r\n            let parameter = params[p]\r\n            const isVolume = Array.isArray(parameter) && Array.isArray(parameter[0]) && Array.isArray(parameter[0][0])\r\n\r\n            if (paramTypes[p] == \"volume\" || isVolume) {\r\n                const flat = []\r\n\r\n                for (let d=0; d<parameter.length; d++) {\r\n                    for (let r=0; r<parameter[d].length; r++) {\r\n                        for (let c=0; c<parameter[d][r].length; c++) {\r\n                            flat.push(parameter[d][r][c])\r\n                        }\r\n                    }\r\n                }\r\n\r\n                parameters.splice(parameters.length, 0, flat, parameter.length, parameter[0].length, parameter[0][0].length)\r\n                parameterTypes.splice(parameterTypes.length, 0, \"array\", \"number\", \"number\", \"number\")\r\n\r\n            } else {\r\n                parameters.push(parameter)\r\n                parameterTypes.push(paramTypes[p])\r\n            }\r\n        }\r\n\r\n        const res = NetUtil.ccallArrays(func, returnType==\"volume\" ? \"array\" : returnType, parameterTypes, parameters, {heapIn, heapOut, returnArraySize: totalValues})\r\n        const vol = []\r\n\r\n        if (returnType == \"volume\") {\r\n            for (let d=0; d<depth; d++) {\r\n                const map = []\r\n\r\n                for (let r=0; r<rows; r++) {\r\n                    const row = []\r\n\r\n                    for (let c=0; c<columns; c++) {\r\n                        row.push(res[d * rows * columns + r * columns + c])\r\n                    }\r\n                    map.push(row)\r\n                }\r\n                vol.push(map)\r\n            }\r\n            return vol\r\n        }\r\n\r\n        return res\r\n    }\r\n\r\n    static format (value, type=\"string\") {\r\n        switch (true) {\r\n\r\n            case type==\"string\" && typeof value==\"string\":\r\n                value = value.replace(/(_|\\s)/g, \"\").toLowerCase()\r\n                break\r\n\r\n            case type==\"time\" && typeof value==\"number\":\r\n                const date = new Date(value)\r\n                const formatted = []\r\n\r\n                if (value < 1000) {\r\n                    formatted.push(`${date.getMilliseconds()}ms`)\r\n\r\n                } else if (value < 60000) {\r\n                    formatted.push(`${date.getSeconds()}.${date.getMilliseconds()}s`)\r\n\r\n                } else {\r\n\r\n                    if (value >= 3600000) formatted.push(`${date.getHours()}h`)\r\n\r\n                    formatted.push(`${date.getMinutes()}m`)\r\n                    formatted.push(`${date.getSeconds()}s`)\r\n                }\r\n\r\n                value = formatted.join(\" \")\r\n                break\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    static defineProperty (self, prop, valTypes=[], values=[], {getCallback=x=>x, setCallback=x=>x, pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => getCallback(this.Module.ccall(`get_${pre}${prop}`, \"number\", valTypes, values)),\r\n            set: val => this.Module.ccall(`set_${pre}${prop}`, null, valTypes.concat(\"number\"), values.concat(setCallback(val)))\r\n        })\r\n    }\r\n\r\n    static defineArrayProperty (self, prop, valTypes, values, returnSize, {pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => NetUtil.ccallArrays(`get_${pre}${prop}`, \"array\", valTypes, values, {returnArraySize: returnSize, heapOut: \"HEAPF64\"}),\r\n            set: value => NetUtil.ccallArrays(`set_${pre}${prop}`, null, valTypes.concat(\"array\"), values.concat([value]), {heapIn: \"HEAPF64\"})\r\n        })\r\n    }\r\n\r\n    static defineMapProperty (self, prop, valTypes, values, rows, columns, {getCallback=x=>x, setCallback=x=>x, pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => getCallback(NetUtil.ccallVolume(`get_${pre}${prop}`, \"volume\", valTypes, values, {depth: 1, rows, columns, heapOut: \"HEAPF64\"})[0]),\r\n            set: value => NetUtil.ccallVolume(`set_${pre}${prop}`, null, valTypes.concat(\"array\"), values.concat([setCallback(value)]), {heapIn: \"HEAPF64\"})\r\n        })\r\n    }\r\n\r\n    static defineVolumeProperty (self, prop, valTypes, values, depth, rows, columns, {getCallback=x=>x, setCallback=x=>x, pre=\"\"}={}) {\r\n        Object.defineProperty(self, prop, {\r\n            get: () => getCallback(NetUtil.ccallVolume(`get_${pre}${prop}`, \"volume\", valTypes, values, {depth, rows, columns, heapOut: \"HEAPF64\"})),\r\n            set: value => NetUtil.ccallVolume(`set_${pre}${prop}`, null, valTypes.concat(\"array\"), values.concat([setCallback(value)]), {heapIn: \"HEAPF64\"})\r\n        })\r\n    }\r\n}\r\n\r\nNetUtil.activationsIndeces = {\r\n    sigmoid: 0,\r\n    tanh: 1,\r\n    lecuntanh: 2,\r\n    relu: 3,\r\n    lrelu: 4,\r\n    rrelu: 5,\r\n    elu: 6\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.NetUtil = NetUtil)\r\n\"use strict\"\r\n\r\nclass Network {\r\n\r\n    constructor ({Module, learningRate, activation=\"sigmoid\", updateFn=\"vanillaupdatefn\", cost=\"meansquarederror\", layers=[],\r\n        rmsDecay, rho, lreluSlope, eluAlpha, dropout=1, l2, l1, maxNorm, weightsConfig, channels, conv, pool}) {\r\n\r\n        if (!Module) {\r\n            throw new Error(\"WASM module not provided\")\r\n        }\r\n\r\n        if (typeof activation == \"function\" || typeof cost == \"function\") {\r\n            throw new Error(\"Custom functions are not (yet) supported with WASM.\")\r\n        }\r\n\r\n        NetUtil.Module = Module\r\n        this.Module = Module\r\n        this.conv = {}\r\n        this.pool = {}\r\n        this.netInstance = this.Module.ccall(\"newNetwork\", null, null, null)\r\n        this.state = \"not-defined\"\r\n\r\n        // Learning Rate get / set\r\n        Object.defineProperty(this, \"learningRate\", {\r\n            get: this.Module.cwrap(\"getLearningRate\", null, null).bind(this, this.netInstance),\r\n            set: this.Module.cwrap(\"setLearningRate\", \"number\", null).bind(this, this.netInstance)\r\n        })\r\n\r\n        if (learningRate) this.learningRate = learningRate\r\n\r\n        NetUtil.defineProperty(this, \"dropout\", [\"number\"], [this.netInstance])\r\n        this.dropout = dropout==false ? 1 : dropout\r\n\r\n        if (l2) {\r\n            NetUtil.defineProperty(this, \"l2\", [\"number\"], [this.netInstance])\r\n            NetUtil.defineProperty(this, \"l2Error\", [\"number\"], [this.netInstance])\r\n            this.l2 = typeof l2==\"boolean\" ? 0.001 : l2\r\n        }\r\n\r\n        if (l1) {\r\n            NetUtil.defineProperty(this, \"l1\", [\"number\"], [this.netInstance])\r\n            NetUtil.defineProperty(this, \"l1Error\", [\"number\"], [this.netInstance])\r\n            this.l1 = typeof l1==\"boolean\" ? 0.005 : l1\r\n        }\r\n\r\n        if (maxNorm) {\r\n            NetUtil.defineProperty(this, \"maxNorm\", [\"number\"], [this.netInstance])\r\n            NetUtil.defineProperty(this, \"maxNormTotal\", [\"number\"], [this.netInstance])\r\n            this.maxNorm = typeof maxNorm==\"boolean\" && maxNorm ? 1000 : maxNorm\r\n        }\r\n\r\n        if (channels) {\r\n            NetUtil.defineProperty(this, \"channels\", [\"number\"], [this.netInstance])\r\n            this.channels = channels\r\n        }\r\n\r\n        if (conv) {\r\n            if (conv.filterSize!=undefined)     this.conv.filterSize = conv.filterSize\r\n            if (conv.zeroPadding!=undefined)    this.conv.zeroPadding = conv.zeroPadding\r\n            if (conv.stride!=undefined)         this.conv.stride = conv.stride\r\n        }\r\n\r\n        if (pool) {\r\n            if (pool.size)      this.pool.size = pool.size\r\n            if (pool.stride)    this.pool.stride = pool.stride\r\n        }\r\n\r\n        Object.defineProperty(this, \"error\", {\r\n            get: () => Module.ccall(\"getError\", \"number\", [\"number\"], [this.netInstance])\r\n        })\r\n\r\n        // Activation function get / set\r\n        this.activationName = NetUtil.format(activation)\r\n        Object.defineProperty(this, \"activation\", {\r\n            get: () => `WASM ${this.activationName}`,\r\n            set: activation => {\r\n\r\n                if (NetUtil.activationsIndeces[activation] == undefined) {\r\n                    throw new Error(`The ${activation} activation function does not exist`)\r\n                }\r\n                this.activationName = activation\r\n                this.Module.ccall(\"setActivation\", null, [\"number\", \"number\"], [this.netInstance, NetUtil.activationsIndeces[activation]])\r\n            }\r\n        })\r\n        this.activation = this.activationName\r\n\r\n        // Cost function get / set\r\n        const costIndeces = {\r\n            meansquarederror: 0,\r\n            crossentropy: 1\r\n        }\r\n        let costFunctionName = NetUtil.format(cost)\r\n        Object.defineProperty(this, \"cost\", {\r\n            get: () => `WASM ${costFunctionName}`,\r\n            set: cost => {\r\n                if (costIndeces[cost] == undefined) {\r\n                    throw new Error(`The ${cost} function does not exist`)\r\n                }\r\n                costFunctionName = cost\r\n                this.Module.ccall(\"setCostFunction\", null, [\"number\", \"number\"], [this.netInstance, costIndeces[cost]])\r\n            }\r\n        })\r\n        this.cost = costFunctionName\r\n\r\n        const updateFnIndeces = {\r\n            vanillaupdatefn: 0,\r\n            gain: 1,\r\n            adagrad: 2,\r\n            rmsprop: 3,\r\n            adam: 4,\r\n            adadelta: 5\r\n        }\r\n        NetUtil.defineProperty(this, \"updateFn\", [\"number\"], [this.netInstance], {\r\n            getCallback: index => Object.keys(updateFnIndeces).find(key => updateFnIndeces[key]==index),\r\n            setCallback: name => updateFnIndeces[name]\r\n        })\r\n        this.updateFn = NetUtil.format(updateFn)\r\n\r\n\r\n        // Weights init configs\r\n        const weightsConfigFns = {\r\n            uniform: 0,\r\n            gaussian: 1,\r\n            xavieruniform: 2,\r\n            xaviernormal: 3,\r\n            lecununiform: 4,\r\n            lecunnormal: 5\r\n        }\r\n        this.weightsConfig = {}\r\n\r\n        NetUtil.defineProperty(this.weightsConfig, \"distribution\", [\"number\"], [this.netInstance], {\r\n            getCallback: index => Object.keys(weightsConfigFns).find(key => weightsConfigFns[key]==Math.round(index)),\r\n            setCallback: name => weightsConfigFns[name]\r\n        })\r\n        NetUtil.defineProperty(this.weightsConfig, \"limit\", [\"number\"], [this.netInstance])\r\n        NetUtil.defineProperty(this.weightsConfig, \"mean\", [\"number\"], [this.netInstance])\r\n        NetUtil.defineProperty(this.weightsConfig, \"stdDeviation\", [\"number\"], [this.netInstance])\r\n\r\n        this.weightsConfig.distribution = \"xavieruniform\"\r\n\r\n        if (weightsConfig!=undefined && weightsConfig.distribution) {\r\n\r\n            if (typeof weightsConfig.distribution == \"function\") {\r\n                throw new Error(\"Custom weights init functions are not (yet) supported with WASM.\")\r\n            }\r\n\r\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution)\r\n        }\r\n\r\n        this.weightsConfig.limit = weightsConfig && weightsConfig.limit!=undefined ? weightsConfig.limit : 0.1\r\n        this.weightsConfig.mean = weightsConfig && weightsConfig.mean!=undefined ? weightsConfig.mean : 0\r\n        this.weightsConfig.stdDeviation = weightsConfig && weightsConfig.stdDeviation!=undefined ? weightsConfig.stdDeviation : 0.05\r\n\r\n        switch (NetUtil.format(updateFn)) {\r\n\r\n            case \"rmsprop\":\r\n                this.learningRate = this.learningRate==undefined ? 0.001 : this.learningRate\r\n                break\r\n\r\n            case \"adam\":\r\n                this.learningRate = this.learningRate==undefined ? 0.01 : this.learningRate\r\n                break\r\n\r\n            case \"adadelta\":\r\n                NetUtil.defineProperty(this, \"rho\", [\"number\"], [this.netInstance])\r\n                this.rho = rho==null ? 0.95 : rho\r\n                break\r\n\r\n            default:\r\n\r\n                if (learningRate==undefined) {\r\n\r\n                    switch (this.activationName) {\r\n                        case \"relu\":\r\n                        case \"lrelu\":\r\n                        case \"rrelu\":\r\n                        case \"elu\":\r\n                            this.learningRate = 0.01\r\n                            break\r\n\r\n                        case \"tanh\":\r\n                        case \"lecuntanh\":\r\n                            this.learningRate = 0.001\r\n                            break\r\n\r\n                        default:\r\n                            this.learningRate = 0.2\r\n                    }\r\n                }\r\n        }\r\n\r\n        if (this.updateFn==\"rmsprop\") {\r\n            NetUtil.defineProperty(this, \"rmsDecay\", [\"number\"], [this.netInstance])\r\n            this.rmsDecay = rmsDecay===undefined ? 0.99 : rmsDecay\r\n        }\r\n\r\n        if (this.activationName==\"lrelu\") {\r\n            NetUtil.defineProperty(this, \"lreluSlope\", [\"number\"], [this.netInstance])\r\n            this.lreluSlope = lreluSlope==undefined ? -0.0005 : lreluSlope\r\n        } else if (this.activationName==\"elu\") {\r\n            NetUtil.defineProperty(this, \"eluAlpha\", [\"number\"], [this.netInstance])\r\n            this.eluAlpha = eluAlpha==undefined ? 1 : eluAlpha\r\n        }\r\n\r\n        this.layers = []\r\n        this.epochs = 0\r\n        this.iterations = 0\r\n\r\n\r\n        if (layers.length) {\r\n\r\n            this.state = \"constructed\"\r\n\r\n            switch (true) {\r\n                case layers.every(item => Number.isInteger(item)):\r\n                    this.layers = layers.map(size => new FCLayer(size))\r\n                    this.initLayers()\r\n                    break\r\n\r\n                case layers.every(layer => layer instanceof FCLayer || layer instanceof ConvLayer || layer instanceof PoolLayer):\r\n                    this.layers = layers\r\n                    this.initLayers()\r\n                    break\r\n\r\n                default:\r\n                    throw new Error(\"There was an error constructing from the layers given.\")\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    initLayers (input, expected) {\r\n\r\n        if (this.state == \"initialised\") {\r\n            return\r\n        }\r\n\r\n        if (this.state == \"not-defined\") {\r\n            this.layers[0] = new FCLayer(input)\r\n            this.layers[1] = new FCLayer(Math.ceil(input/expected > 5 ? expected + (Math.abs(input-expected))/4\r\n                                                                      : input + expected))\r\n            this.layers[2] = new FCLayer(Math.ceil(expected))\r\n        }\r\n\r\n        this.state = \"initialised\"\r\n\r\n        for (let l=0; l<this.layers.length; l++) {\r\n\r\n            const layer = this.layers[l]\r\n\r\n            switch (true) {\r\n                case layer instanceof FCLayer:\r\n                    this.Module.ccall(\"addFCLayer\", null, [\"number\", \"number\"], [this.netInstance, layer.size])\r\n                    break\r\n\r\n                case layer instanceof ConvLayer:\r\n                    this.Module.ccall(\"addConvLayer\", null, [\"number\", \"number\"], [this.netInstance, layer.size])\r\n                    break\r\n\r\n                case layer instanceof PoolLayer:\r\n                    this.Module.ccall(\"addPoolLayer\", null, [\"number\", \"number\"], [this.netInstance, layer.size])\r\n                    break\r\n            }\r\n\r\n            this.joinLayer(layer, l)\r\n        }\r\n\r\n        this.Module.ccall(\"initLayers\", null, [\"number\"], [this.netInstance])\r\n    }\r\n\r\n    joinLayer (layer, layerIndex) {\r\n\r\n        layer.net = this\r\n        layer.layerIndex = layerIndex\r\n\r\n        if (layerIndex) {\r\n            this.layers[layerIndex-1].assignNext(layer)\r\n            layer.assignPrev(this.layers[layerIndex-1], layerIndex)\r\n        }\r\n        layer.init()\r\n    }\r\n\r\n    forward (data) {\r\n\r\n        if (this.state!=\"initialised\") {\r\n            throw new Error(\"The network layers have not been initialised.\")\r\n        }\r\n\r\n        if (data === undefined || data === null) {\r\n            throw new Error(\"No data passed to Network.forward()\")\r\n        }\r\n\r\n        if (data.length != this.layers[0].neurons.length) {\r\n            console.warn(\"Input data length did not match input layer neurons count.\")\r\n        }\r\n\r\n        return NetUtil.ccallArrays(\"forward\", \"array\", [\"number\", \"array\"], [this.netInstance, data], {\r\n            heapOut: \"HEAPF64\",\r\n            returnArraySize: this.layers[this.layers.length-1].neurons.length\r\n        })\r\n    }\r\n\r\n    train (data, {epochs=1, callback, miniBatchSize=1, log=true, shuffle=false}={}) {\r\n\r\n        miniBatchSize = typeof miniBatchSize==\"boolean\" && miniBatchSize ? data[0].expected.length : miniBatchSize\r\n        this.Module.ccall(\"set_miniBatchSize\", null, [\"number\", \"number\"], [this.netInstance, miniBatchSize])\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (data === undefined || data === null) {\r\n                return void reject(\"No data provided\")\r\n            }\r\n\r\n            if (this.state != \"initialised\") {\r\n                this.initLayers(data[0].input.length, (data[0].expected || data[0].output).length)\r\n            }\r\n\r\n            const startTime = Date.now()\r\n\r\n            const dimension = data[0].input.length\r\n            const itemSize = dimension + (data[0].expected || data[0].output).length\r\n            const itemsCount = itemSize * data.length\r\n\r\n            const typedArray = new Float32Array(itemsCount)\r\n\r\n            if (log) {\r\n                console.log(`Training started. Epochs: ${epochs} Batch size: ${miniBatchSize}`)\r\n            }\r\n\r\n            for (let di=0; di<data.length; di++) {\r\n\r\n                if (!data[di].hasOwnProperty(\"input\") || (!data[di].hasOwnProperty(\"expected\") && !data[di].hasOwnProperty(\"output\"))) {\r\n                    return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\")\r\n                }\r\n\r\n                let index = itemSize*di\r\n\r\n                for (let ii=0; ii<data[di].input.length; ii++) {\r\n                    typedArray[index] = data[di].input[ii]\r\n                    index++\r\n                }\r\n\r\n                for (let ei=0; ei<(data[di].expected || data[di].output).length; ei++) {\r\n                    typedArray[index] = (data[di].expected || data[di].output)[ei]\r\n                    index++\r\n                }\r\n            }\r\n\r\n            const buf = this.Module._malloc(typedArray.length*typedArray.BYTES_PER_ELEMENT)\r\n            this.Module.HEAPF32.set(typedArray, buf >> 2)\r\n\r\n            let elapsed\r\n\r\n            this.Module.ccall(\"loadTrainingData\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"],\r\n                                            [this.netInstance, buf, itemsCount, itemSize, dimension])\r\n\r\n            if (shuffle) {\r\n                this.Module.ccall(\"shuffleTrainingData\", null, [\"number\"], [this.netInstance])\r\n            }\r\n\r\n            if (callback) {\r\n\r\n                let epochIndex = 0\r\n                let iterationIndex = 0\r\n\r\n                const doEpoch = () => {\r\n\r\n                    if (this.l2) this.l2Error = 0\r\n                    if (this.l1) this.l1Error = 0\r\n\r\n                    iterationIndex = 0\r\n                    doIteration()\r\n                }\r\n\r\n                const doIteration = () => {\r\n\r\n                    this.Module.ccall(\"train\", \"number\", [\"number\", \"number\", \"number\"], [this.netInstance, miniBatchSize, iterationIndex])\r\n\r\n                    callback({\r\n                        iterations: (iterationIndex+1),\r\n                        error: this.error,\r\n                        elapsed: Date.now() - startTime,\r\n                        input: data[this.iterations].input\r\n                    })\r\n\r\n                    iterationIndex += miniBatchSize\r\n\r\n                    if (iterationIndex < data.length) {\r\n                        setTimeout(doIteration.bind(this), 0)\r\n                    } else {\r\n                        epochIndex++\r\n\r\n                        elapsed = Date.now() - startTime\r\n\r\n                        log && console.log(`Epoch ${epochIndex} Error: ${this.error}${this.l2==undefined ? \"\": ` L2 Error: ${this.l2Error/iterationIndex}`}`,\r\n                                    `\\nElapsed: ${NetUtil.format(elapsed, \"time\")} Average Duration: ${NetUtil.format(elapsed/epochIndex, \"time\")}`)\r\n\r\n                        if (epochIndex < epochs) {\r\n                            doEpoch()\r\n                        } else {\r\n                            this.Module._free(buf)\r\n                            resolve()\r\n                        }\r\n                    }\r\n                }\r\n                doEpoch()\r\n\r\n            } else {\r\n                for (let e=0; e<epochs; e++) {\r\n\r\n                    if (this.l2) this.l2Error = 0\r\n                    if (this.l1) this.l1Error = 0\r\n\r\n                    this.Module.ccall(\"train\", \"number\", [\"number\", \"number\", \"number\"], [this.netInstance, -1, 0])\r\n                    elapsed = Date.now() - startTime\r\n                    if (log) {\r\n                        console.log(`Epoch ${e+1} Error: ${this.error}${this.l2==undefined ? \"\": ` L2 Error: ${this.l2Error/data.length}`}`,\r\n                                    `\\nElapsed: ${NetUtil.format(elapsed, \"time\")} Average Duration: ${NetUtil.format(elapsed/(e+1), \"time\")}`)\r\n                    }\r\n                }\r\n                this.Module._free(buf)\r\n                if (log) {\r\n                    console.log(`Training finished. Total time: ${NetUtil.format(elapsed, \"time\")}`)\r\n                }\r\n                resolve()\r\n            }\r\n        })\r\n    }\r\n\r\n    test (data, {log=true, callback}={}) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (data === undefined || data === null) {\r\n                reject(\"No data provided\")\r\n            }\r\n\r\n            if (log) {\r\n                console.log(\"Testing started\")\r\n            }\r\n\r\n            const startTime = Date.now()\r\n            const dimension = data[0].input.length\r\n            const itemSize = dimension + (data[0].expected || data[0].output).length\r\n            const itemsCount = itemSize * data.length\r\n            const typedArray = new Float32Array(itemsCount)\r\n\r\n            for (let di=0; di<data.length; di++) {\r\n\r\n                let index = itemSize*di\r\n\r\n                for (let ii=0; ii<data[di].input.length; ii++) {\r\n                    typedArray[index] = data[di].input[ii]\r\n                    index++\r\n                }\r\n\r\n                for (let ei=0; ei<(data[di].expected || data[di].output).length; ei++) {\r\n                    typedArray[index] = (data[di].expected || data[di].output)[ei]\r\n                    index++\r\n                }\r\n            }\r\n\r\n            const buf = this.Module._malloc(typedArray.length*typedArray.BYTES_PER_ELEMENT)\r\n            this.Module.HEAPF32.set(typedArray, buf >> 2)\r\n\r\n            this.Module.ccall(\"loadTestingData\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"],\r\n                                            [this.netInstance, buf, itemsCount, itemSize, dimension])\r\n\r\n            if (callback) {\r\n\r\n                let iterationIndex = 0\r\n                let totalError = 0\r\n\r\n                const doIteration = () => {\r\n\r\n                    totalError += this.Module.ccall(\"test\", \"number\", [\"number\", \"number\", \"number\"], [this.netInstance, 1, iterationIndex])\r\n\r\n                    callback({\r\n                        iterations: (iterationIndex+1),\r\n                        error: totalError/(iterationIndex+1),\r\n                        elapsed: Date.now() - startTime,\r\n                        input: data[iterationIndex].input\r\n                    })\r\n\r\n                    if (++iterationIndex < data.length) {\r\n                        setTimeout(doIteration.bind(this), 0)\r\n                    } else {\r\n                        iterationIndex\r\n\r\n                        const elapsed = Date.now() - startTime\r\n                        log && console.log(`Testing finished. Total time: ${NetUtil.format(elapsed, \"time\")}  Average iteration time: ${NetUtil.format(elapsed/iterationIndex, \"time\")}`)\r\n\r\n                        this.Module._free(buf)\r\n                        resolve(totalError/data.length)\r\n                    }\r\n                }\r\n\r\n                doIteration()\r\n\r\n            } else {\r\n\r\n                const avgError = this.Module.ccall(\"test\", \"number\", [\"number\", \"number\"], [this.netInstance, -1, 0])\r\n                this.Module._free(buf)\r\n\r\n                const elapsed = Date.now() - startTime\r\n\r\n                if (log) {\r\n                    console.log(`Testing finished. Total time: ${NetUtil.format(elapsed, \"time\")}  Average iteration time: ${NetUtil.format(elapsed/data.length, \"time\")}`)\r\n                }\r\n\r\n                resolve(avgError)\r\n            }\r\n        })\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            layers: this.layers.map(layer => layer.toJSON())\r\n        }\r\n    }\r\n\r\n    fromJSON (data) {\r\n\r\n        if (data === undefined || data === null) {\r\n            throw new Error(\"No JSON data given to import.\")\r\n        }\r\n\r\n        if (data.layers.length != this.layers.length) {\r\n            throw new Error(`Mismatched layers (${data.layers.length} layers in import data, but ${this.layers.length} configured)`)\r\n        }\r\n\r\n        this.Module.ccall(\"resetDeltaWeights\", null, [\"number\"], [this.netInstance])\r\n        this.layers.forEach((layer, li) => li && layer.fromJSON(data.layers[li], li))\r\n    }\r\n\r\n    static get version () {\r\n        return \"3.0.0\"\r\n    }\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.Network = Network)\r\n\"use strict\"\r\n\r\nclass Neuron {\r\n\r\n    constructor () {}\r\n\r\n    init (netInstance, layerIndex, neuronIndex, {updateFn}) {\r\n\r\n        const paramTypes = [\"number\", \"number\", \"number\"]\r\n        const params = [netInstance, layerIndex, neuronIndex]\r\n\r\n        NetUtil.defineProperty(this, \"sum\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineProperty(this, \"dropped\", paramTypes, params, {\r\n            pre: \"neuron_\",\r\n            getCallback: v => v==1,\r\n            setCallback: v => v ? 1 : 0\r\n        })\r\n        NetUtil.defineProperty(this, \"activation\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineProperty(this, \"error\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineProperty(this, \"derivative\", paramTypes, params, {pre: \"neuron_\"})\r\n\r\n        NetUtil.defineProperty(this, \"bias\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineArrayProperty(this, \"weights\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n\r\n        NetUtil.defineProperty(this, \"deltaBias\", paramTypes, params, {pre: \"neuron_\"})\r\n        NetUtil.defineArrayProperty(this, \"deltaWeights\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n\r\n        switch (updateFn) {\r\n            case \"gain\":\r\n                NetUtil.defineProperty(this, \"biasGain\", paramTypes, params, {pre: \"neuron_\"})\r\n                NetUtil.defineArrayProperty(this, \"weightGain\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n                break\r\n            case \"adagrad\":\r\n            case \"rmsprop\":\r\n            case \"adadelta\":\r\n                NetUtil.defineProperty(this, \"biasCache\", paramTypes, params, {pre: \"neuron_\"})\r\n                NetUtil.defineArrayProperty(this, \"weightsCache\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n\r\n                if (updateFn==\"adadelta\") {\r\n                    NetUtil.defineProperty(this, \"adadeltaBiasCache\", paramTypes, params, {pre: \"neuron_\"})\r\n                    NetUtil.defineArrayProperty(this, \"adadeltaCache\", paramTypes, params, this.size, {pre: \"neuron_\"})\r\n                }\r\n                break\r\n\r\n            case \"adam\":\r\n                NetUtil.defineProperty(this, \"m\", paramTypes, params, {pre: \"neuron_\"})\r\n                NetUtil.defineProperty(this, \"v\", paramTypes, params, {pre: \"neuron_\"})\r\n                break\r\n        }\r\n    }\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.Neuron = Neuron)\r\n\"use strict\"\r\n\r\nclass PoolLayer {\r\n\r\n    constructor (size, {stride, activation}={}) {\r\n\r\n        if (size)   this.size = size\r\n        if (stride) this.stride = stride\r\n\r\n        this.activation = false\r\n        this.activationName = activation\r\n\r\n        if (activation) {\r\n            if (typeof activation != \"string\") {\r\n                throw new Error(\"Custom activation functions are not available in the WebAssembly version\")\r\n            }\r\n            this.activationName = NetUtil.format(activation)\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n\r\n        this.netInstance = this.net.netInstance\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n\r\n        let channels\r\n        let prevLayerOutWidth = layer.outMapSize\r\n        const size = this.size || this.net.pool.size || 2\r\n        const stride = this.stride || this.net.pool.stride || this.size\r\n\r\n        NetUtil.defineProperty(this, \"channels\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineProperty(this, \"stride\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        this.size = size\r\n        this.stride = stride\r\n\r\n        switch (true) {\r\n\r\n            case layer instanceof FCLayer:\r\n                channels = this.net.channels\r\n                prevLayerOutWidth = Math.max(Math.floor(Math.sqrt(layer.size/channels)), 1)\r\n                break\r\n\r\n            case layer instanceof ConvLayer:\r\n                channels = layer.size\r\n                break\r\n\r\n            case layer instanceof PoolLayer:\r\n                channels = layer.channels\r\n                break\r\n        }\r\n\r\n        this.channels = channels\r\n\r\n        NetUtil.defineProperty(this, \"prevLayerOutWidth\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineProperty(this, \"inMapValuesCount\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineProperty(this, \"outMapSize\", [\"number\", \"number\"], [this.netInstance, layerIndex], {pre: \"pool_\"})\r\n        NetUtil.defineVolumeProperty(this, \"errors\", [\"number\", \"number\"], [this.netInstance, layerIndex], channels, prevLayerOutWidth, prevLayerOutWidth, {pre: \"pool_\"})\r\n\r\n        const outMapSize = (prevLayerOutWidth - size) / stride + 1\r\n        this.outMapSize = outMapSize\r\n        this.inMapValuesCount = prevLayerOutWidth ** 2\r\n\r\n        NetUtil.defineVolumeProperty(this, \"activations\", [\"number\", \"number\"], [this.netInstance, layerIndex], channels, outMapSize, outMapSize, {pre: \"pool_\"})\r\n        NetUtil.defineVolumeProperty(this, \"indeces\", [\"number\", \"number\"], [this.netInstance, layerIndex], channels, outMapSize, outMapSize, {\r\n            pre: \"pool_\",\r\n            getCallback: vol => vol.map(map => map.map(row => row.map(val => [parseInt(val/2), val%2]))),\r\n            setCallback: vol => vol.map(map => map.map(row => row.map(([x,y]) => 2*x+y)))\r\n        })\r\n\r\n        if (outMapSize%1 != 0) {\r\n            throw new Error(`Misconfigured hyperparameters. Activation volume dimensions would be ${outMapSize} in pool layer at index ${layerIndex}`)\r\n        }\r\n\r\n        if (this.activationName) {\r\n            NetUtil.defineProperty(this, \"activation\", [\"number\", \"number\"], [this.netInstance, layerIndex], {\r\n                pre: \"pool_\",\r\n                getCallback: _ => `WASM ${this.activationName}`\r\n            })\r\n            this.activation = NetUtil.activationsIndeces[this.activationName]\r\n        }\r\n    }\r\n\r\n    init () {}\r\n\r\n    toJSON () {\r\n        return {}\r\n    }\r\n\r\n    fromJSON() {}\r\n\r\n}\r\n\r\ntypeof window==\"undefined\" && (exports.PoolLayer = PoolLayer)\r\n\n//# sourceMappingURL=jsNetWebAssembly.concat.js.map"]}