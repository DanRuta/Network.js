{"version":3,"sources":["jsNetJS.concat.js"],"names":["ConvLayer","[object Object]","size","filterSize","zeroPadding","stride","activation","this","activationName","undefined","NetMath","NetUtil","format","bind","state","layer","nextLayer","layerIndex","prevLayer","net","conv","FCLayer","channels","PoolLayer","activations","length","Math","floor","prevLayerOutWidth","max","sqrt","outMapSize","inMapValuesCount","pow","inZPMapValuesCount","Error","filters","Array","map","f","Filter","forEach","filter","weights","channelWeights","weightsRow","weightsInitFn","weightsConfig","activationMap","row","v","errorMap","bias","dropout","dropoutMap","init","updateFn","activationConfig","eluAlpha","getActivations","filterI","sumMap","convolve","input","sumY","sumX","random","emY","emX","weightIndex","neuronI","neurons","neuron","error","buildConvErrorMap","col","errors","buildConvDWeights","deltaBias","channel","deltaWeights","l2Error","l2","l1Error","l1","abs","regularized","miniBatchSize","weightUpdateFn","maxNorm","maxNormTotal","validationBias","validationWeights","wd","wy","slice","data","fi","window","exports","n","Neuron","weightsCount","ni","dropped","sum","ai","derivative","reduce","p","c","wi","dwi","Layer","wRow","w","biasGain","weightGains","getWeightGain","column","setWeightGain","biasCache","weightsCache","getWeightsCache","setWeightsCache","adadeltaBiasCache","adadeltaCache","getAdadeltaCache","setAdadeltaCache","m","rreluSlope","value","prime","val","exp","lreluSlope","sech","tanh","elu","target","output","vi","log","calculated","desired","index","prev","curr","meansquarederror","deltaValue","learningRate","weightI","newVal","min","rmsDecay","mt","iterations","vt","rho","momentum","limit","values","i","push","mean","stdDeviation","x1","x2","r","fanIn","fanOut","gaussian","lecunnormal","uniform","lecununiform","rowStart","colStart","filterRow","filterCol","indeces","maxValue","exponentials","exponentialsSum","e","arr","avg","diffs","multiplier","layers","li","setWeight","getWeight","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getSeconds","getHours","getMinutes","join","j","x","zP","extraRows","splice","vol","mapValues","d","inputVol","arrayToVolume","outputMap","paddedLength","fSSpread","di","addZeroPadding","inputY","inputX","weightsY","weightsX","outY","outX","paddedRow","nlFilterI","errMap","emYI","channelsCount","channelI","inputValues","inputMap","arrayToMap","eY","eX","mapStartI","mapSize","returnArr","arguments","rowI","colI","training","validation","test","split","minVal","Infinity","maxVal","Network","cost","pool","epochs","validations","includes","distribution","every","item","Number","isInteger","initLayers","expected","ceil","joinLayer","Object","assign","assignNext","assignPrev","console","warn","forward","softmax","backward","dataSet","callback","shuffle","Promise","resolve","reject","interval","earlyStopping","threshold","patienceCounter","bestError","patience","percent","elapsed","iterationIndex","epochsCounter","startTime","now","logAndResolve","l","restoreValidation","doEpoch","validationError","doIteration","async","hasOwnProperty","trainingError","validate","checkEarlyStopping","applyDeltaWeights","resetDeltaWeights","setTimeout","text","validationIndex","totalValidationErrors","validateItem","lastValidationError","stop","backUpValidation","testSet","totalError","testInput","iterationError","toJSON","fromJSON","version","constructor","name","maxPool","errs"],"mappings":"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","file":"jsNetJS.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass ConvLayer {\r\n\r\n    constructor (size, {filterSize, zeroPadding, stride, activation}={}) {\r\n\r\n        if (filterSize)     this.filterSize = filterSize\r\n        if (stride)         this.stride = stride\r\n        if (size)           this.size = size\r\n\r\n        this.zeroPadding = zeroPadding\r\n        this.activationName = activation\r\n\r\n        if (activation!=undefined) {\r\n\r\n            if (typeof activation==\"boolean\" && !activation) {\r\n                this.activation = false\r\n            } else {\r\n                this.activation = typeof activation==\"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this)\r\n            }\r\n        }\r\n\r\n        this.state = \"not-initialised\"\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n\r\n        this.prevLayer = layer\r\n\r\n        this.layerIndex = layerIndex\r\n        this.size = this.size || 4\r\n        this.filterSize = this.filterSize || this.net.conv.filterSize || 3\r\n        this.stride = this.stride || this.net.conv.stride || 1\r\n\r\n        switch (true) {\r\n            case layer instanceof FCLayer:\r\n                this.channels = this.net.channels ||1\r\n                break\r\n\r\n            case layer instanceof ConvLayer:\r\n                this.channels = layer.size\r\n                break\r\n\r\n            case layer instanceof PoolLayer:\r\n                this.channels = layer.activations.length\r\n                break\r\n        }\r\n\r\n        if (this.zeroPadding==undefined) {\r\n            this.zeroPadding = this.net.conv.zeroPadding==undefined ? Math.floor(this.filterSize/2) : this.net.conv.zeroPadding\r\n        }\r\n\r\n        // Caching calculations\r\n        const prevLayerOutWidth = layer instanceof FCLayer ? Math.max(Math.floor(Math.sqrt(layer.size/this.channels)), 1)\r\n                                                           : layer.outMapSize\r\n\r\n        this.inMapValuesCount = Math.pow(prevLayerOutWidth, 2)\r\n        this.inZPMapValuesCount = Math.pow(prevLayerOutWidth + this.zeroPadding*2, 2)\r\n        this.outMapSize = (prevLayerOutWidth - this.filterSize + 2*this.zeroPadding) / this.stride + 1\r\n\r\n        if (this.outMapSize%1!=0) {\r\n            throw new Error(`Misconfigured hyperparameters. Activation volume dimensions would be ${this.outMapSize} in conv layer at index ${layerIndex}`)\r\n        }\r\n\r\n        this.filters = [...new Array(this.size)].map(f => new Filter())\r\n    }\r\n\r\n    init () {\r\n        this.filters.forEach(filter => {\r\n\r\n            filter.weights = [...new Array(this.channels)].map(channelWeights => {\r\n                return [...new Array(this.filterSize)].map(weightsRow => this.net.weightsInitFn(this.filterSize, this.weightsConfig))\r\n            })\r\n\r\n            filter.activationMap = [...new Array(this.outMapSize)].map(row => [...new Array(this.outMapSize)].map(v => 0))\r\n            filter.errorMap = [...new Array(this.outMapSize)].map(row => [...new Array(this.outMapSize)].map(v => 0))\r\n            filter.bias = 1\r\n\r\n            if (this.net.dropout != 1) {\r\n                filter.dropoutMap = filter.activationMap.map(row => row.map(v => false))\r\n            }\r\n\r\n            filter.init({\r\n                updateFn: this.net.updateFn,\r\n                activation: this.activationName || this.net.activationConfig,\r\n                eluAlpha: this.net.eluAlpha\r\n            })\r\n        })\r\n    }\r\n\r\n    forward () {\r\n\r\n        const activations = NetUtil.getActivations(this.prevLayer)\r\n\r\n        for (let filterI=0; filterI<this.size; filterI++) {\r\n\r\n            const filter = this.filters[filterI]\r\n\r\n            filter.sumMap = NetUtil.convolve({\r\n                input: activations,\r\n                zeroPadding: this.zeroPadding,\r\n                weights: filter.weights,\r\n                channels: this.channels,\r\n                stride: this.stride,\r\n                bias: filter.bias\r\n            })\r\n\r\n            for (let sumY=0; sumY<filter.sumMap.length; sumY++) {\r\n                for (let sumX=0; sumX<filter.sumMap.length; sumX++) {\r\n                    if (this.state==\"training\" && filter.dropoutMap && (filter.dropoutMap[sumY][sumX] = Math.random() > this.net.dropout)) {\r\n                        filter.activationMap[sumY][sumX] = 0\r\n                    } else if (this.activation) {\r\n                        filter.activationMap[sumY][sumX] = this.activation(filter.sumMap[sumY][sumX], false, filter) / (this.net.dropout||1)\r\n                    } else {\r\n                        filter.activationMap[sumY][sumX] = filter.sumMap[sumY][sumX]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    backward () {\r\n\r\n        // First, get the filters' error maps\r\n        if (this.nextLayer instanceof FCLayer) {\r\n\r\n            // For each filter, build the errorMap from the weighted neuron errors in the next FCLayer corresponding to each value in the activation map\r\n            for (let filterI=0; filterI<this.filters.length; filterI++) {\r\n\r\n                const filter = this.filters[filterI]\r\n\r\n                for (let emY=0; emY<filter.errorMap.length; emY++) {\r\n                    for (let emX=0; emX<filter.errorMap.length; emX++) {\r\n\r\n                        const weightIndex = filterI * this.outMapSize**2 + emY * filter.errorMap.length + emX\r\n\r\n                        for (let neuronI=0; neuronI<this.nextLayer.neurons.length; neuronI++) {\r\n\r\n                            const neuron = this.nextLayer.neurons[neuronI]\r\n                            filter.errorMap[emY][emX] += neuron.error * neuron.weights[weightIndex]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else if (this.nextLayer instanceof ConvLayer) {\r\n\r\n            for (let filterI=0; filterI<this.filters.length; filterI++) {\r\n                NetUtil.buildConvErrorMap(this.nextLayer, this.filters[filterI].errorMap, filterI)\r\n            }\r\n\r\n        } else {\r\n\r\n            for (let filterI=0; filterI<this.filters.length; filterI++) {\r\n\r\n                const filter = this.filters[filterI]\r\n\r\n                for (let row=0; row<filter.errorMap.length; row++) {\r\n                    for (let col=0; col<filter.errorMap.length; col++) {\r\n                        filter.errorMap[row][col] = this.nextLayer.errors[filterI][row][col]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Apply derivative to each error value\r\n        for (let filterI=0; filterI<this.filters.length; filterI++) {\r\n\r\n            const filter = this.filters[filterI]\r\n\r\n            for (let row=0; row<filter.errorMap.length; row++) {\r\n                for (let col=0; col<filter.errorMap[0].length; col++) {\r\n\r\n                    if (filter.dropoutMap && filter.dropoutMap[row][col]) {\r\n                        filter.errorMap[row][col] = 0\r\n                    } else if (this.activation){\r\n                        filter.errorMap[row][col] *= this.activation(filter.sumMap[row][col], true, filter)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Then use the error map values to build the delta weights\r\n        NetUtil.buildConvDWeights(this)\r\n    }\r\n\r\n    resetDeltaWeights () {\r\n        for (let filterI=0; filterI<this.filters.length; filterI++) {\r\n\r\n            const filter = this.filters[filterI]\r\n            filter.deltaBias = 0\r\n\r\n            for (let channel=0; channel<filter.deltaWeights.length; channel++) {\r\n                for (let row=0; row<filter.deltaWeights[0].length; row++) {\r\n                    for (let col=0; col<filter.deltaWeights[0][0].length; col++) {\r\n                        filter.deltaWeights[channel][row][col] = 0\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let row=0; row<filter.errorMap.length; row++) {\r\n                for (let col=0; col<filter.errorMap.length; col++) {\r\n                    filter.errorMap[row][col] = 0\r\n                }\r\n            }\r\n\r\n            if (filter.dropoutMap) {\r\n                for (let row=0; row<filter.dropoutMap.length; row++) {\r\n                    for (let col=0; col<filter.dropoutMap[0].length; col++) {\r\n                        filter.dropoutMap[row][col] = false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    applyDeltaWeights () {\r\n        for (let filterI=0; filterI<this.filters.length; filterI++) {\r\n\r\n            const filter = this.filters[filterI]\r\n\r\n            for (let channel=0; channel<filter.deltaWeights.length; channel++) {\r\n                for (let row=0; row<filter.deltaWeights[0].length; row++) {\r\n                    for (let col=0; col<filter.deltaWeights[0][0].length; col++) {\r\n\r\n                        if (this.net.l2Error!=undefined) this.net.l2Error += 0.5 * this.net.l2 * filter.weights[channel][row][col]**2\r\n                        if (this.net.l1Error!=undefined) this.net.l1Error += this.net.l1 * Math.abs(filter.weights[channel][row][col])\r\n\r\n                        const regularized = (filter.deltaWeights[channel][row][col]\r\n                            + this.net.l2 * filter.weights[channel][row][col]\r\n                            + this.net.l1 * (filter.weights[channel][row][col] > 0 ? 1 : -1)) / this.net.miniBatchSize\r\n\r\n                        filter.weights[channel][row][col] = this.net.weightUpdateFn.bind(this.net, filter.weights[channel][row][col],\r\n                                                                regularized, filter, [channel, row, col])()\r\n\r\n                        if (this.net.maxNorm!=undefined) this.net.maxNormTotal += filter.weights[channel][row][col]**2\r\n                    }\r\n                }\r\n            }\r\n\r\n            filter.bias = this.net.weightUpdateFn.bind(this.net, filter.bias, filter.deltaBias, filter)()\r\n        }\r\n    }\r\n\r\n    backUpValidation () {\r\n        for (let f=0; f<this.filters.length; f++) {\r\n            const filter = this.filters[f]\r\n\r\n            filter.validationBias = filter.bias\r\n            filter.validationWeights = []\r\n\r\n            for (let wd=0; wd<filter.weights.length; wd++) {\r\n                const channel = []\r\n                for (let wy=0; wy<filter.weights[wd].length; wy++) {\r\n                    channel[wy] = filter.weights[wd][wy].slice(0)\r\n                }\r\n                filter.validationWeights[wd] = channel\r\n            }\r\n        }\r\n    }\r\n\r\n    restoreValidation () {\r\n        for (let f=0; f<this.filters.length; f++) {\r\n            const filter = this.filters[f]\r\n\r\n            filter.bias = filter.validationBias\r\n\r\n            for (let wd=0; wd<filter.weights.length; wd++) {\r\n                for (let wy=0; wy<filter.weights[wd].length; wy++) {\r\n                    filter.weights[wd][wy] = filter.validationWeights[wd][wy].slice(0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            weights: this.filters.map(filter => {\r\n                return {\r\n                    bias: filter.bias,\r\n                    weights: filter.weights\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fromJSON (data, layerIndex) {\r\n        this.filters.forEach((filter, fi) => {\r\n\r\n            if (data.weights[fi].weights.length != filter.weights.length) {\r\n                throw new Error(`Mismatched weights depth. Given: ${data.weights[fi].weights.length} Existing: ${filter.weights.length}. At: layers[${layerIndex}], filters[${fi}]`)\r\n            }\r\n\r\n            if (data.weights[fi].weights[0].length != filter.weights[0].length) {\r\n                throw new Error(`Mismatched weights size. Given: ${data.weights[fi].weights[0].length} Existing: ${filter.weights[0].length}. At: layers[${layerIndex}], filters[${fi}]`)\r\n            }\r\n\r\n            filter.bias = data.weights[fi].bias\r\n            filter.weights = data.weights[fi].weights\r\n        })\r\n    }\r\n}\r\n\r\n// https://github.com/DanRuta/jsNet/issues/33\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.ConvLayer = ConvLayer)\r\nexports.ConvLayer = ConvLayer\r\n\"use strict\"\r\n\r\nclass FCLayer {\r\n\r\n    constructor (size, {activation}={}) {\r\n        this.size = size\r\n        this.neurons = [...new Array(size)].map(n => new Neuron())\r\n        this.state = \"not-initialised\"\r\n\r\n        if (activation!=undefined) {\r\n            if (typeof activation==\"boolean\" && !activation) {\r\n                this.activation = false\r\n            } else {\r\n                this.activation = typeof activation==\"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this)\r\n            }\r\n        }\r\n    }\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n        this.prevLayer = layer\r\n        this.layerIndex = layerIndex\r\n    }\r\n\r\n    init () {\r\n        this.neurons.forEach(neuron => {\r\n\r\n            let weightsCount\r\n\r\n            switch (true) {\r\n                case this.prevLayer instanceof FCLayer:\r\n                    weightsCount = this.prevLayer.size\r\n                    break\r\n\r\n                case this.prevLayer instanceof ConvLayer:\r\n                    weightsCount = this.prevLayer.filters.length * this.prevLayer.outMapSize**2\r\n                    break\r\n\r\n                case this.prevLayer instanceof PoolLayer:\r\n                    weightsCount = this.prevLayer.activations.length * this.prevLayer.outMapSize**2\r\n                    break\r\n            }\r\n\r\n            neuron.weights = this.net.weightsInitFn(weightsCount, this.weightsConfig)\r\n            neuron.bias = 1\r\n\r\n            neuron.init({\r\n                updateFn: this.net.updateFn,\r\n                activationConfig: this.net.activationConfig,\r\n                eluAlpha: this.net.eluAlpha\r\n            })\r\n        })\r\n    }\r\n\r\n    forward () {\r\n        this.neurons.forEach((neuron, ni) => {\r\n            if (this.state==\"training\" && (neuron.dropped = Math.random() > this.net.dropout)) {\r\n                neuron.activation = 0\r\n            } else {\r\n                neuron.sum = neuron.bias\r\n\r\n                const activations = NetUtil.getActivations(this.prevLayer)\r\n\r\n                for (let ai=0; ai<activations.length; ai++) {\r\n                    neuron.sum += activations[ai] * neuron.weights[ai]\r\n                }\r\n\r\n                neuron.activation = (this.activation ? this.activation(neuron.sum, false, neuron) : neuron.sum) / (this.net.dropout||1)\r\n            }\r\n        })\r\n    }\r\n\r\n    backward (errors) {\r\n        this.neurons.forEach((neuron, ni) => {\r\n\r\n            if (neuron.dropped) {\r\n                neuron.error = 0\r\n                neuron.deltaBias += 0\r\n            } else {\r\n                if (typeof errors !== \"undefined\") {\r\n                    neuron.error = errors[ni]\r\n                } else {\r\n                    neuron.derivative = this.activation ? this.activation(neuron.sum, true, neuron) : 1\r\n                    neuron.error = neuron.derivative * this.nextLayer.neurons.map(n => n.error * (n.weights[ni]||0))\r\n                                                                             .reduce((p,c) => p+c, 0)\r\n                }\r\n\r\n                const activations = NetUtil.getActivations(this.prevLayer)\r\n\r\n                for (let wi=0; wi<neuron.weights.length; wi++) {\r\n                    neuron.deltaWeights[wi] += (neuron.error * activations[wi])\r\n                }\r\n\r\n                neuron.deltaBias += neuron.error\r\n            }\r\n        })\r\n    }\r\n\r\n    resetDeltaWeights () {\r\n        for (let n=0; n<this.neurons.length; n++) {\r\n\r\n            this.neurons[n].deltaBias = 0\r\n\r\n            for (let dwi=0; dwi<this.neurons[n].deltaWeights.length; dwi++) {\r\n                this.neurons[n].deltaWeights[dwi] = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    applyDeltaWeights () {\r\n        for (let n=0; n<this.neurons.length; n++) {\r\n\r\n            const neuron = this.neurons[n]\r\n\r\n            for (let dwi=0; dwi<this.neurons[n].deltaWeights.length; dwi++) {\r\n\r\n                if (this.net.l2Error!=undefined) this.net.l2Error += 0.5 * this.net.l2 * neuron.weights[dwi]**2\r\n                if (this.net.l1Error!=undefined) this.net.l1Error += this.net.l1 * Math.abs(neuron.weights[dwi])\r\n\r\n                const regularized = (neuron.deltaWeights[dwi]\r\n                    + this.net.l2 * neuron.weights[dwi]\r\n                    + this.net.l1 * (neuron.weights[dwi] > 0 ? 1 : -1)) / this.net.miniBatchSize\r\n\r\n                neuron.weights[dwi] = this.net.weightUpdateFn.bind(this.net, neuron.weights[dwi], regularized, neuron, dwi)()\r\n\r\n                if (this.net.maxNorm!=undefined) this.net.maxNormTotal += neuron.weights[dwi]**2\r\n            }\r\n\r\n            neuron.bias = this.net.weightUpdateFn.bind(this.net, neuron.bias, neuron.deltaBias, neuron)()\r\n        }\r\n    }\r\n\r\n    backUpValidation () {\r\n        for (let n=0; n<this.neurons.length; n++) {\r\n            const neuron = this.neurons[n]\r\n            neuron.validationBias = neuron.bias\r\n            neuron.validationWeights = neuron.weights.slice(0)\r\n        }\r\n    }\r\n\r\n    restoreValidation () {\r\n        for (let n=0; n<this.neurons.length; n++) {\r\n            const neuron = this.neurons[n]\r\n            neuron.bias = neuron.validationBias\r\n            neuron.weights = neuron.validationWeights.slice(0)\r\n        }\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            weights: this.neurons.map(neuron => {\r\n                return {\r\n                    bias: neuron.bias,\r\n                    weights: neuron.weights\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fromJSON (data, layerIndex) {\r\n        this.neurons.forEach((neuron, ni) => {\r\n\r\n            if (data.weights[ni].weights.length!=neuron.weights.length) {\r\n                throw new Error(`Mismatched weights count. Given: ${data.weights[ni].weights.length} Existing: ${neuron.weights.length}. At layers[${layerIndex}], neurons[${ni}]`)\r\n            }\r\n\r\n            neuron.bias = data.weights[ni].bias\r\n            neuron.weights = data.weights[ni].weights\r\n        })\r\n    }\r\n}\r\n\r\nconst Layer = FCLayer\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.FCLayer = window.Layer = FCLayer)\r\nexports.FCLayer = exports.Layer = FCLayer\r\n\"use strict\"\r\n\r\nclass Filter {\r\n\r\n    constructor () {}\r\n\r\n    init ({updateFn, activation, eluAlpha}={}) {\r\n\r\n        this.deltaWeights = this.weights.map(channel => channel.map(wRow => wRow.map(w => 0)))\r\n        this.deltaBias = 0\r\n\r\n        switch (updateFn) {\r\n\r\n            case \"gain\":\r\n                this.biasGain = 1\r\n                this.weightGains = this.weights.map(channel => channel.map(wRow => wRow.map(w => 1)))\r\n                this.getWeightGain = ([channel, row, column]) => this.weightGains[channel][row][column]\r\n                this.setWeightGain = ([channel, row, column], v) => this.weightGains[channel][row][column] = v\r\n                break\r\n\r\n            case \"adagrad\":\r\n            case \"rmsprop\":\r\n            case \"adadelta\":\r\n            case \"momentum\":\r\n                this.biasCache = 0\r\n                this.weightsCache = this.weights.map(channel => channel.map(wRow => wRow.map(w => 0)))\r\n                this.getWeightsCache = ([channel, row, column]) => this.weightsCache[channel][row][column]\r\n                this.setWeightsCache = ([channel, row, column], v) => this.weightsCache[channel][row][column] = v\r\n\r\n                if (updateFn==\"adadelta\") {\r\n                    this.adadeltaBiasCache = 0\r\n                    this.adadeltaCache = this.weights.map(channel => channel.map(wRow => wRow.map(w => 0)))\r\n                    this.getAdadeltaCache = ([channel, row, column]) => this.adadeltaCache[channel][row][column]\r\n                    this.setAdadeltaCache = ([channel, row, column], v) => this.adadeltaCache[channel][row][column] = v\r\n                }\r\n                break\r\n\r\n            case \"adam\":\r\n                this.m = 0\r\n                this.v = 0\r\n                break\r\n        }\r\n\r\n        if (activation==\"rrelu\") {\r\n            this.rreluSlope = Math.random() * 0.001\r\n\r\n        } else if (activation==\"elu\") {\r\n            this.eluAlpha = eluAlpha\r\n        }\r\n    }\r\n\r\n    getWeight ([channel, row, column]) {\r\n        return this.weights[channel][row][column]\r\n    }\r\n\r\n    setWeight ([channel, row, column], v) {\r\n        this.weights[channel][row][column] = v\r\n    }\r\n\r\n    getDeltaWeight ([channel, row, column]) {\r\n        return this.deltaWeights[channel][row][column]\r\n    }\r\n\r\n    setDeltaWeight ([channel, row, column], v) {\r\n        this.deltaWeights[channel][row][column] = v\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.Filter = Filter)\r\nexports.Filter = Filter\r\n\"use strict\"\r\n\r\nclass NetMath {\r\n\r\n    // Activation functions\r\n    static sigmoid (value, prime) {\r\n        const val = 1/(1+Math.exp(-value))\r\n        return prime ? val*(1-val)\r\n                     : val\r\n    }\r\n\r\n    static tanh (value, prime) {\r\n        const exp = Math.exp(2*value)\r\n        return prime ? 4/Math.pow(Math.exp(value)+Math.exp(-value), 2) || 1e-18\r\n                     : (exp-1)/(exp+1) || 1e-18\r\n    }\r\n\r\n    static relu (value, prime) {\r\n        return prime ? value > 0 ? 1 : 0\r\n                     : Math.max(value, 0)\r\n    }\r\n\r\n    static lrelu (value, prime) {\r\n        return prime ? value > 0 ? 1 : (this.lreluSlope || -0.0005)\r\n                     : Math.max((this.lreluSlope || -0.0005)*Math.abs(value), value)\r\n    }\r\n\r\n    static rrelu (value, prime, neuron) {\r\n        return prime ? value > 0 ? 1 : neuron.rreluSlope\r\n                     : Math.max(neuron.rreluSlope, value)\r\n    }\r\n\r\n    static lecuntanh (value, prime) {\r\n        return prime ? 1.15333 * Math.pow(NetMath.sech((2/3) * value), 2)\r\n                     : 1.7159 * NetMath.tanh((2/3) * value)\r\n    }\r\n\r\n    static elu (value, prime, neuron) {\r\n        return prime ? value >=0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha\r\n                     : value >=0 ? value : neuron.eluAlpha * (Math.exp(value) - 1)\r\n    }\r\n\r\n    // Cost functions\r\n    static crossentropy (target, output) {\r\n        return output.map((value, vi) => target[vi] * Math.log(value+1e-15) + ((1-target[vi]) * Math.log((1+1e-15)-value)))\r\n                     .reduce((p,c) => p-c, 0)\r\n    }\r\n\r\n    static meansquarederror (calculated, desired) {\r\n        return calculated.map((output, index) => Math.pow(output - desired[index], 2))\r\n                         .reduce((prev, curr) => prev+curr, 0) / calculated.length\r\n    }\r\n\r\n    static rootmeansquarederror (calculated, desired) {\r\n        return Math.sqrt(NetMath.meansquarederror(calculated, desired))\r\n    }\r\n\r\n    // Weight updating functions\r\n    static vanillasgd (value, deltaValue) {\r\n        return value + this.learningRate * deltaValue\r\n    }\r\n\r\n    static gain (value, deltaValue, neuron, weightI) {\r\n\r\n        const newVal = value + this.learningRate * deltaValue * (weightI==null ? neuron.biasGain : neuron.getWeightGain(weightI))\r\n\r\n        if (newVal<=0 && value>0 || newVal>=0 && value<0){\r\n            if (weightI!=null) {\r\n                neuron.setWeightGain(weightI, Math.max(neuron.getWeightGain(weightI)*0.95, 0.5))\r\n            } else {\r\n                neuron.biasGain = Math.max(neuron.biasGain*0.95, 0.5)\r\n            }\r\n        } else {\r\n            if (weightI!=null) {\r\n                neuron.setWeightGain(weightI, Math.min(neuron.getWeightGain(weightI)+0.05, 5))\r\n            } else {\r\n                neuron.biasGain = Math.min(neuron.biasGain+0.05, 5)\r\n            }\r\n        }\r\n\r\n        return newVal\r\n    }\r\n\r\n    static adagrad (value, deltaValue, neuron, weightI) {\r\n\r\n        if (weightI!=null) {\r\n            neuron.setWeightsCache(weightI, neuron.getWeightsCache(weightI) + Math.pow(deltaValue, 2))\r\n        } else {\r\n            neuron.biasCache += Math.pow(deltaValue, 2)\r\n        }\r\n\r\n        return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI!=null ? neuron.getWeightsCache(weightI)\r\n                                                                                        : neuron.biasCache))\r\n    }\r\n\r\n    static rmsprop (value, deltaValue, neuron, weightI) {\r\n\r\n        if (weightI!=null) {\r\n            neuron.setWeightsCache(weightI, this.rmsDecay * neuron.getWeightsCache(weightI) + (1 - this.rmsDecay) * Math.pow(deltaValue, 2))\r\n        } else {\r\n            neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2)\r\n        }\r\n\r\n        return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI!=null ? neuron.getWeightsCache(weightI)\r\n                                                                                        : neuron.biasCache))\r\n    }\r\n\r\n    static adam (value, deltaValue, neuron) {\r\n\r\n        neuron.m = 0.9*neuron.m + (1-0.9) * deltaValue\r\n        const mt = neuron.m / (1-Math.pow(0.9, this.iterations + 1))\r\n\r\n        neuron.v = 0.999*neuron.v + (1-0.999) * Math.pow(deltaValue, 2)\r\n        const vt = neuron.v / (1-Math.pow(0.999, this.iterations + 1))\r\n\r\n        return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8)\r\n    }\r\n\r\n    static adadelta (value, deltaValue, neuron, weightI) {\r\n\r\n        if (weightI!=null) {\r\n            neuron.setWeightsCache(weightI, this.rho * neuron.getWeightsCache(weightI) + (1-this.rho) * Math.pow(deltaValue, 2))\r\n            const newVal = value + Math.sqrt((neuron.getAdadeltaCache(weightI) + 1e-6)/(neuron.getWeightsCache(weightI) + 1e-6)) * deltaValue\r\n            neuron.setAdadeltaCache(weightI, this.rho * neuron.getAdadeltaCache(weightI) + (1-this.rho) * Math.pow(deltaValue, 2))\r\n            return newVal\r\n\r\n        } else {\r\n            neuron.biasCache = this.rho * neuron.biasCache + (1-this.rho) * Math.pow(deltaValue, 2)\r\n            const newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6)/(neuron.biasCache + 1e-6)) * deltaValue\r\n            neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1-this.rho) * Math.pow(deltaValue, 2)\r\n            return newVal\r\n        }\r\n    }\r\n\r\n    static momentum (value, deltaValue, neuron, weightI) {\r\n\r\n        let v\r\n\r\n        if (weightI!=null) {\r\n            v = this.momentum * (neuron.getWeightsCache(weightI)) - this.learningRate * deltaValue\r\n            neuron.setWeightsCache(weightI, v)\r\n        } else {\r\n            v = this.momentum * (neuron.biasCache) - this.learningRate * deltaValue\r\n            neuron.biasCache = v\r\n        }\r\n\r\n        return value - v\r\n    }\r\n\r\n    // Weights init\r\n    static uniform (size, {limit}) {\r\n        const values = []\r\n\r\n        for (let i=0; i<size; i++) {\r\n            values.push(Math.random()*2*limit-limit)\r\n        }\r\n\r\n        return values\r\n    }\r\n\r\n    static gaussian (size, {mean, stdDeviation}) {\r\n        const values = []\r\n\r\n        // Polar Box Muller\r\n        for (let i=0; i<size; i++) {\r\n            let x1, x2, r\r\n\r\n            do {\r\n                x1 = 2 * Math.random() -1\r\n                x2 = 2 * Math.random() -1\r\n                r = x1**2 + x2**2\r\n            } while (r >= 1 || !r)\r\n\r\n            values.push(mean + (x1 * (Math.sqrt(-2 * Math.log(r) / r))) * stdDeviation)\r\n        }\r\n\r\n        return values\r\n    }\r\n\r\n    static xaviernormal (size, {fanIn, fanOut}) {\r\n        return fanOut || fanOut==0 ? NetMath.gaussian(size, {mean: 0, stdDeviation: Math.sqrt(2/(fanIn+fanOut))})\r\n                                   : NetMath.lecunnormal(size, {fanIn})\r\n    }\r\n\r\n    static xavieruniform (size, {fanIn, fanOut}) {\r\n        return fanOut || fanOut==0 ? NetMath.uniform(size, {limit: Math.sqrt(6/(fanIn+fanOut))})\r\n                                   : NetMath.lecununiform(size, {fanIn})\r\n    }\r\n\r\n    static lecunnormal (size, {fanIn}) {\r\n        return NetMath.gaussian(size, {mean: 0, stdDeviation: Math.sqrt(1/fanIn)})\r\n    }\r\n\r\n    static lecununiform (size, {fanIn}) {\r\n        return NetMath.uniform(size, {limit: Math.sqrt(3/fanIn)})\r\n    }\r\n\r\n    // Pool\r\n    static maxPool (layer, channel) {\r\n\r\n        const activations = NetUtil.getActivations(layer.prevLayer, channel, layer.inMapValuesCount)\r\n\r\n        for (let row=0; row<layer.outMapSize; row++) {\r\n            for (let col=0; col<layer.outMapSize; col++) {\r\n\r\n                const rowStart = row * layer.stride\r\n                const colStart = col * layer.stride\r\n\r\n                // The first value\r\n                let activation = activations[rowStart*layer.prevLayerOutWidth + colStart]\r\n\r\n                for (let filterRow=0; filterRow<layer.size; filterRow++) {\r\n                    for (let filterCol=0; filterCol<layer.size; filterCol++) {\r\n\r\n                        const value = activations[ ((rowStart+filterRow) * layer.prevLayerOutWidth) + (colStart+filterCol) ]\r\n\r\n                        if (value > activation) {\r\n                            activation = value\r\n                            layer.indeces[channel][row][col] = [filterRow, filterCol]\r\n                        }\r\n                    }\r\n                }\r\n\r\n                layer.activations[channel][row][col] = activation\r\n            }\r\n        }\r\n    }\r\n\r\n    // Other\r\n    static softmax (v) {\r\n\r\n        const values = v.slice(0)\r\n        let maxValue = values[0]\r\n\r\n        for (let i=1; i<values.length; i++) {\r\n            if (values[i] > maxValue) {\r\n                maxValue = values[i]\r\n            }\r\n        }\r\n\r\n        // Exponentials\r\n        const exponentials = new Array(values.length)\r\n        let exponentialsSum = 0.0\r\n\r\n        for (let i=0; i<values.length; i++) {\r\n            let e = Math.exp(values[i] - maxValue)\r\n            exponentialsSum += e\r\n            exponentials[i] = e\r\n        }\r\n\r\n        for (let i=0; i<values.length; i++) {\r\n            exponentials[i] /= exponentialsSum\r\n            values[i] = exponentials[i]\r\n        }\r\n\r\n        return values\r\n    }\r\n\r\n    static sech (value) {\r\n        return (2*Math.exp(-value))/(1+Math.exp(-2*value))\r\n    }\r\n\r\n    static standardDeviation (arr) {\r\n        const avg = arr.reduce((p,c) => p+c) / arr.length\r\n        const diffs = arr.map(v => v - avg).map(v => v**2)\r\n        return Math.sqrt(diffs.reduce((p,c) => p+c) / diffs.length)\r\n    }\r\n\r\n    static maxNorm () {\r\n\r\n        if (this.maxNormTotal > this.maxNorm) {\r\n\r\n            const multiplier = this.maxNorm / (1e-18 + this.maxNormTotal)\r\n\r\n            this.layers.forEach((layer, li) => {\r\n                li && layer.neurons.forEach(neuron => {\r\n                    neuron.weights.forEach((w, wi) => neuron.setWeight(wi, neuron.getWeight(wi) * multiplier))\r\n                })\r\n            })\r\n        }\r\n\r\n        this.maxNormTotal = 0\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.NetMath = NetMath)\r\nexports.NetMath = NetMath\r\n\"use strict\"\r\n\r\nclass NetUtil {\r\n\r\n    static format (value, type=\"string\") {\r\n        switch (true) {\r\n\r\n            case type==\"string\" && typeof value==\"string\":\r\n                value = value.replace(/(_|\\s)/g, \"\").toLowerCase()\r\n                break\r\n\r\n            case type==\"time\" && typeof value==\"number\":\r\n                const date = new Date(value)\r\n                const formatted = []\r\n\r\n                if (value < 1000) {\r\n                    formatted.push(`${date.getMilliseconds()}ms`)\r\n\r\n                } else if (value < 60000) {\r\n                    formatted.push(`${date.getSeconds()}.${date.getMilliseconds()}s`)\r\n\r\n                } else {\r\n\r\n                    if (value >= 3600000) formatted.push(`${date.getHours()}h`)\r\n\r\n                    formatted.push(`${date.getMinutes()}m`)\r\n                    formatted.push(`${date.getSeconds()}s`)\r\n                }\r\n\r\n                value = formatted.join(\" \")\r\n                break\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    static shuffle (arr) {\r\n        for (let i=arr.length; i; i--) {\r\n            const j = Math.floor(Math.random() * i)\r\n            const x = arr[i-1]\r\n            arr[i-1] = arr[j]\r\n            arr[j] = x\r\n        }\r\n    }\r\n\r\n    static addZeroPadding (map, zP) {\r\n\r\n        const data = []\r\n\r\n        for (let row=0; row<map.length; row++) {\r\n            data.push(map[row].slice(0))\r\n        }\r\n\r\n        const extraRows = []\r\n\r\n        for (let i=0; i<data.length+2*zP; i++) {\r\n            extraRows.push(0)\r\n        }\r\n\r\n        for (let col=0; col<data.length; col++) {\r\n            for (let i=0; i<zP; i++) {\r\n                data[col].splice(0, 0, 0)\r\n                data[col].splice(data[col].length+1, data[col].length, 0)\r\n            }\r\n        }\r\n\r\n        for (let i=0; i<zP; i++) {\r\n            data.splice(0, 0, extraRows.slice(0))\r\n            data.splice(data.length, data.length-1, extraRows.slice(0))\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    static arrayToMap (arr, size) {\r\n        const map = []\r\n\r\n        for (let i=0; i<size; i++) {\r\n            map[i] = []\r\n\r\n            for (let j=0; j<size; j++) {\r\n                map[i][j] = arr[i*size+j]\r\n            }\r\n        }\r\n\r\n        return map\r\n    }\r\n\r\n    static arrayToVolume (arr, channels) {\r\n\r\n        const vol = []\r\n        const size = Math.sqrt(arr.length/channels)\r\n        const mapValues = size**2\r\n\r\n        for (let d=0; d<Math.floor(arr.length/mapValues); d++) {\r\n\r\n            const map = []\r\n\r\n            for (let i=0; i<size; i++) {\r\n                map[i] = []\r\n\r\n                for (let j=0; j<size; j++) {\r\n                    map[i][j] = arr[d*mapValues  + i*size+j]\r\n                }\r\n            }\r\n\r\n            vol[d] = map\r\n        }\r\n\r\n        return vol\r\n    }\r\n\r\n    static convolve ({input, zeroPadding, weights, channels, stride, bias}) {\r\n\r\n        const inputVol = NetUtil.arrayToVolume(input, channels)\r\n        const outputMap = []\r\n\r\n        const paddedLength = inputVol[0].length + zeroPadding*2\r\n        const fSSpread = Math.floor(weights[0].length / 2)\r\n\r\n        // For each input channel,\r\n        for (let di=0; di<channels; di++) {\r\n            inputVol[di] = NetUtil.addZeroPadding(inputVol[di], zeroPadding)\r\n            // For each inputY without ZP\r\n            for (let inputY=fSSpread; inputY<paddedLength-fSSpread; inputY+=stride) {\r\n                outputMap[(inputY-fSSpread)/stride] = outputMap[(inputY-fSSpread)/stride] || []\r\n                // For each inputX without zP\r\n                for (let inputX=fSSpread; inputX<paddedLength-fSSpread; inputX+=stride) {\r\n                    let sum = 0\r\n                    // For each weightsY on input\r\n                    for (let weightsY=0; weightsY<weights[0].length; weightsY++) {\r\n                        // For each weightsX on input\r\n                        for (let weightsX=0; weightsX<weights[0].length; weightsX++) {\r\n                            sum += inputVol[di][inputY+(weightsY-fSSpread)][inputX+(weightsX-fSSpread)] * weights[di][weightsY][weightsX]\r\n                        }\r\n                    }\r\n\r\n                    outputMap[(inputY-fSSpread)/stride][(inputX-fSSpread)/stride] = (outputMap[(inputY-fSSpread)/stride][(inputX-fSSpread)/stride]||0) + sum\r\n                }\r\n            }\r\n        }\r\n\r\n        // Then add bias\r\n        for (let outY=0; outY<outputMap.length; outY++) {\r\n            for (let outX=0; outX<outputMap.length; outX++) {\r\n                outputMap[outY][outX] += bias\r\n            }\r\n        }\r\n\r\n        return outputMap\r\n    }\r\n\r\n    static buildConvErrorMap (nextLayer, errorMap, filterI) {\r\n\r\n        // Cache / convenience\r\n        const zeroPadding = nextLayer.zeroPadding\r\n        const paddedLength = errorMap.length + zeroPadding*2\r\n        const fSSpread = Math.floor(nextLayer.filterSize / 2)\r\n\r\n        // Zero pad and clear the error map, to allow easy convoling\r\n        const paddedRow = []\r\n\r\n        for (let val=0; val<paddedLength; val++) {\r\n            paddedRow.push(0)\r\n        }\r\n\r\n        for (let row=0; row<paddedLength; row++) {\r\n            errorMap[row] = paddedRow.slice(0)\r\n        }\r\n\r\n        // For each channel in filter in the next layer which corresponds to this filter\r\n        for (let nlFilterI=0; nlFilterI<nextLayer.size; nlFilterI++) {\r\n\r\n            const weights = nextLayer.filters[nlFilterI].weights[filterI]\r\n            const errMap = nextLayer.filters[nlFilterI].errorMap\r\n\r\n            // Unconvolve their error map using the weights\r\n            for (let inputY=fSSpread; inputY<paddedLength - fSSpread; inputY+=nextLayer.stride) {\r\n                for (let inputX=fSSpread; inputX<paddedLength - fSSpread; inputX+=nextLayer.stride) {\r\n\r\n                    for (let weightsY=0; weightsY<nextLayer.filterSize; weightsY++) {\r\n                        for (let weightsX=0; weightsX<nextLayer.filterSize; weightsX++) {\r\n                            errorMap[inputY+(weightsY-fSSpread)][inputX+(weightsX-fSSpread)] += weights[weightsY][weightsX]\r\n                                * errMap[(inputY-fSSpread)/nextLayer.stride][(inputX-fSSpread)/nextLayer.stride]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Take out the zero padding. Rows:\r\n        errorMap.splice(0, zeroPadding)\r\n        errorMap.splice(errorMap.length-zeroPadding, errorMap.length)\r\n\r\n        // Columns:\r\n        for (let emYI=0; emYI<errorMap.length; emYI++) {\r\n            errorMap[emYI] = errorMap[emYI].splice(zeroPadding, errorMap[emYI].length - zeroPadding*2)\r\n        }\r\n    }\r\n\r\n    static buildConvDWeights (layer) {\r\n\r\n        const weightsCount = layer.filters[0].weights[0].length\r\n        const fSSpread = Math.floor(weightsCount / 2)\r\n        const channelsCount = layer.filters[0].weights.length\r\n\r\n        // For each filter\r\n        for (let filterI=0; filterI<layer.filters.length; filterI++) {\r\n\r\n            const filter = layer.filters[filterI]\r\n\r\n            // Each channel will take the error map and the corresponding inputMap from the input...\r\n            for (let channelI=0; channelI<channelsCount; channelI++) {\r\n\r\n                const inputValues = NetUtil.getActivations(layer.prevLayer, channelI, layer.inMapValuesCount)\r\n                const inputMap = NetUtil.addZeroPadding(NetUtil.arrayToMap(inputValues, Math.sqrt(layer.inMapValuesCount)), layer.zeroPadding)\r\n\r\n                // ...slide the filter with correct stride across the zero-padded inputMap...\r\n                for (let inputY=fSSpread; inputY<inputMap.length-fSSpread; inputY+=layer.stride) {\r\n                    for (let inputX=fSSpread; inputX<inputMap.length-fSSpread; inputX+=layer.stride) {\r\n\r\n                        const error = filter.errorMap[(inputY-fSSpread)/layer.stride][(inputX-fSSpread)/layer.stride]\r\n\r\n                        // ...and at each location...\r\n                        for (let weightsY=0; weightsY<weightsCount; weightsY++) {\r\n                            for (let weightsX=0; weightsX<weightsCount; weightsX++) {\r\n                                const activation = inputMap[inputY-fSSpread+weightsY][inputX-fSSpread+weightsX]\r\n                                filter.deltaWeights[channelI][weightsY][weightsX] += activation * error\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Increment the deltaBias by the sum of all errors in the filter\r\n            for (let eY=0; eY<filter.errorMap.length; eY++) {\r\n                for (let eX=0; eX<filter.errorMap.length; eX++) {\r\n                    filter.deltaBias += filter.errorMap[eY][eX]\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static getActivations (layer, mapStartI, mapSize) {\r\n\r\n        const returnArr = []\r\n\r\n        if (arguments.length==1) {\r\n\r\n            if (layer instanceof FCLayer) {\r\n\r\n                for (let ni=0; ni<layer.neurons.length; ni++) {\r\n                    returnArr.push(layer.neurons[ni].activation)\r\n                }\r\n\r\n            } else if (layer instanceof ConvLayer) {\r\n\r\n                for (let fi=0; fi<layer.filters.length; fi++) {\r\n                    for (let rowI=0; rowI<layer.filters[fi].activationMap.length; rowI++) {\r\n                        for (let colI=0; colI<layer.filters[fi].activationMap[rowI].length; colI++) {\r\n                            returnArr.push(layer.filters[fi].activationMap[rowI][colI])\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                for (let channel=0; channel<layer.activations.length; channel++) {\r\n                    for (let row=0; row<layer.activations[0].length; row++) {\r\n                        for (let col=0; col<layer.activations[0].length; col++) {\r\n                            returnArr.push(layer.activations[channel][row][col])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            if (layer instanceof FCLayer) {\r\n\r\n                for (let i=mapStartI*mapSize; i<(mapStartI+1)*mapSize; i++) {\r\n                    returnArr.push(layer.neurons[i].activation)\r\n                }\r\n\r\n            } else if (layer instanceof ConvLayer) {\r\n\r\n                for (let row=0; row<layer.filters[mapStartI].activationMap.length; row++) {\r\n                    for (let col=0; col<layer.filters[mapStartI].activationMap[row].length; col++) {\r\n                        returnArr.push(layer.filters[mapStartI].activationMap[row][col])\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                for (let row=0; row<layer.activations[mapStartI].length; row++) {\r\n                    for (let col=0; col<layer.activations[mapStartI].length; col++) {\r\n                        returnArr.push(layer.activations[mapStartI][row][col])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return returnArr\r\n    }\r\n\r\n    static splitData (data, {training=0.7, validation=0.15, test=0.15}={}) {\r\n\r\n        const split = {\r\n            training: [],\r\n            validation: [],\r\n            test: []\r\n        }\r\n\r\n        // Define here splits, for returning at the end\r\n        for (let i=0; i<data.length; i++) {\r\n            let x = Math.random()\r\n\r\n            if (x > 1-training) {\r\n                split.training.push(data[i])\r\n            } else {\r\n\r\n                if (x<validation) {\r\n                    split.validation.push(data[i])\r\n                } else {\r\n                    split.test.push(data[i])\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return split\r\n    }\r\n\r\n    static normalize (data) {\r\n        let minVal = Infinity\r\n        let maxVal = -Infinity\r\n\r\n        for (let i=0; i<data.length; i++) {\r\n            if (data[i] < minVal) {\r\n                minVal = data[i]\r\n            }\r\n            if (data[i] > maxVal) {\r\n                maxVal = data[i]\r\n            }\r\n        }\r\n\r\n        if ((-1*minVal + maxVal) != 0) {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = (data[i] + -1*minVal) / (-1*minVal + maxVal)\r\n            }\r\n        } else {\r\n            for (let i=0; i<data.length; i++) {\r\n                data[i] = 0.5\r\n            }\r\n        }\r\n\r\n        return {minVal, maxVal}\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.NetUtil = NetUtil)\r\nexports.NetUtil = NetUtil\r\n\"use strict\"\r\n\r\nclass Network {\r\n\r\n    constructor ({learningRate, layers=[], updateFn=\"vanillasgd\", activation=\"sigmoid\", cost=\"meansquarederror\", momentum=0.9,\r\n        rmsDecay, rho, lreluSlope, eluAlpha, dropout=1, l2, l1, maxNorm, weightsConfig, channels, conv, pool}={}) {\r\n\r\n        this.state = \"not-defined\"\r\n        this.layers = []\r\n        this.conv = {}\r\n        this.pool = {}\r\n        this.epochs = 0\r\n        this.iterations = 0\r\n        this.validations = 0\r\n        this.dropout = dropout==false ? 1 : dropout\r\n        this.error = 0\r\n        activation = NetUtil.format(activation)\r\n        updateFn = NetUtil.format(updateFn)\r\n        cost = NetUtil.format(cost)\r\n        this.l1 = 0\r\n        this.l2 = 0\r\n\r\n        if (l1) {\r\n            this.l1 = typeof l1==\"boolean\" ? 0.005 : l1\r\n            this.l1Error = 0\r\n        }\r\n\r\n        if (l2) {\r\n            this.l2 = typeof l2==\"boolean\" ? 0.001 : l2\r\n            this.l2Error = 0\r\n        }\r\n\r\n        if (maxNorm) {\r\n            this.maxNorm = typeof maxNorm==\"boolean\" && maxNorm ? 1000 : maxNorm\r\n            this.maxNormTotal = 0\r\n        }\r\n\r\n        if (learningRate)   this.learningRate = learningRate\r\n        if (channels)       this.channels = channels\r\n\r\n        if (conv) {\r\n            if (conv.filterSize!=undefined)     this.conv.filterSize = conv.filterSize\r\n            if (conv.zeroPadding!=undefined)    this.conv.zeroPadding = conv.zeroPadding\r\n            if (conv.stride!=undefined)         this.conv.stride = conv.stride\r\n        }\r\n\r\n        if (pool) {\r\n            if (pool.size)      this.pool.size = pool.size\r\n            if (pool.stride)    this.pool.stride = pool.stride\r\n        }\r\n\r\n        // Activation function / Learning Rate\r\n        switch (updateFn) {\r\n\r\n            case \"rmsprop\":\r\n                this.learningRate = this.learningRate==undefined ? 0.001 : this.learningRate\r\n                break\r\n\r\n            case \"adam\":\r\n                this.learningRate = this.learningRate==undefined ? 0.01 : this.learningRate\r\n                break\r\n\r\n            case \"momentum\":\r\n                this.learningRate = this.learningRate==undefined ? 0.2 : this.learningRate\r\n                this.momentum = momentum\r\n                break\r\n\r\n            case \"adadelta\":\r\n                this.rho = rho==null ? 0.95 : rho\r\n                break\r\n\r\n            default:\r\n\r\n                if (this.learningRate==undefined) {\r\n\r\n                    switch (activation) {\r\n\r\n                        case \"relu\":\r\n                        case \"lrelu\":\r\n                        case \"rrelu\":\r\n                        case \"elu\":\r\n                            this.learningRate = 0.01\r\n                            break\r\n\r\n                        case \"tanh\":\r\n                        case \"lecuntanh\":\r\n                            this.learningRate = 0.001\r\n                            break\r\n\r\n                        default:\r\n                            this.learningRate = 0.2\r\n                    }\r\n                }\r\n        }\r\n\r\n        this.updateFn = [false, null, undefined].includes(updateFn) ? \"vanillasgd\" : updateFn\r\n        this.weightUpdateFn = NetMath[this.updateFn]\r\n        this.activation = typeof activation==\"function\" ? activation : NetMath[activation].bind(this)\r\n        this.activationConfig = activation\r\n        this.cost = typeof cost==\"function\" ? cost : NetMath[cost]\r\n\r\n        if (this.updateFn==\"rmsprop\") {\r\n            this.rmsDecay = rmsDecay==undefined ? 0.99 : rmsDecay\r\n        }\r\n\r\n        this.lreluSlope = lreluSlope==undefined ? -0.0005 : lreluSlope\r\n        this.rreluSlope = Math.random() * 0.001\r\n        this.eluAlpha = eluAlpha==undefined ? 1 : eluAlpha\r\n\r\n        // Weights distributiom\r\n        this.weightsConfig = {distribution: \"xavieruniform\"}\r\n\r\n        if (weightsConfig != undefined && weightsConfig.distribution) {\r\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution)\r\n        }\r\n\r\n        if (this.weightsConfig.distribution == \"uniform\") {\r\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit!=undefined ? weightsConfig.limit : 0.1\r\n\r\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\r\n            this.weightsConfig.mean = weightsConfig.mean || 0\r\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05\r\n        }\r\n\r\n        if (typeof this.weightsConfig.distribution==\"function\") {\r\n            this.weightsInitFn = this.weightsConfig.distribution\r\n        } else {\r\n            this.weightsInitFn = NetMath[this.weightsConfig.distribution]\r\n        }\r\n\r\n        if (layers.length) {\r\n\r\n            switch (true) {\r\n\r\n                case layers.every(item => Number.isInteger(item)):\r\n                    this.layers = layers.map(size => new FCLayer(size))\r\n                    this.state = \"constructed\"\r\n                    this.initLayers()\r\n                    break\r\n\r\n                case layers.every(layer => layer instanceof FCLayer || layer instanceof ConvLayer || layer instanceof PoolLayer):\r\n                    this.state = \"constructed\"\r\n                    this.layers = layers\r\n                    this.initLayers()\r\n                    break\r\n\r\n                default:\r\n                    throw new Error(\"There was an error constructing from the layers given.\")\r\n            }\r\n        }\r\n    }\r\n\r\n    initLayers (input, expected) {\r\n\r\n        switch (this.state) {\r\n\r\n            case \"initialised\":\r\n                return\r\n\r\n            case \"not-defined\":\r\n                this.layers[0] = new FCLayer(input)\r\n                this.layers[1] = new FCLayer(Math.ceil(input/expected > 5 ? expected + (Math.abs(input-expected))/4\r\n                                                                          : input + expected))\r\n                this.layers[2] = new FCLayer(Math.ceil(expected))\r\n                break\r\n        }\r\n\r\n        this.layers.forEach(this.joinLayer.bind(this))\r\n        this.state = \"initialised\"\r\n    }\r\n\r\n    joinLayer (layer, layerIndex) {\r\n\r\n        layer.net = this\r\n        layer.activation = layer.activation==undefined ? this.activation : layer.activation\r\n\r\n        layer.weightsConfig = {}\r\n        Object.assign(layer.weightsConfig, this.weightsConfig)\r\n\r\n        if (layerIndex) {\r\n            this.layers[layerIndex-1].assignNext(layer)\r\n            layer.assignPrev(this.layers[layerIndex-1], layerIndex)\r\n\r\n            layer.weightsConfig.fanIn = layer.prevLayer.size\r\n\r\n            if (layerIndex<this.layers.length-1) {\r\n                layer.weightsConfig.fanOut = this.layers[layerIndex+1].size\r\n            }\r\n\r\n            layer.init()\r\n\r\n        } else if (this.layers.length > 1) {\r\n            layer.weightsConfig.fanOut = this.layers[1].size\r\n        }\r\n\r\n        layer.state = \"initialised\"\r\n    }\r\n\r\n    forward (data) {\r\n\r\n        if (this.state!=\"initialised\") {\r\n            throw new Error(\"The network layers have not been initialised.\")\r\n        }\r\n\r\n        if (data === undefined || data === null) {\r\n            throw new Error(\"No data passed to Network.forward()\")\r\n        }\r\n\r\n        if (data.length != this.layers[0].neurons.length) {\r\n            console.warn(\"Input data length did not match input layer neurons count.\")\r\n        }\r\n\r\n        this.layers[0].neurons.forEach((neuron, ni) => neuron.activation = data[ni])\r\n        this.layers.forEach((layer, li) => li && layer.forward())\r\n        const output = this.layers[this.layers.length-1].neurons.map(n => n.sum)\r\n        return output.length > 1 ? NetMath.softmax(output) : output\r\n    }\r\n\r\n    backward (errors) {\r\n\r\n        if (errors === undefined) {\r\n            throw new Error(\"No data passed to Network.backward()\")\r\n        }\r\n\r\n        if (errors.length != this.layers[this.layers.length-1].neurons.length) {\r\n            console.warn(\"Expected data length did not match output layer neurons count.\", errors)\r\n        }\r\n\r\n        this.layers[this.layers.length-1].backward(errors)\r\n\r\n        for (let layerIndex=this.layers.length-2; layerIndex>0; layerIndex--) {\r\n            this.layers[layerIndex].backward()\r\n        }\r\n    }\r\n\r\n    train (dataSet, {epochs=1, callback, log=true, miniBatchSize=1, shuffle=false, validation}={}) {\r\n\r\n        this.miniBatchSize = typeof miniBatchSize==\"boolean\" && miniBatchSize ? dataSet[0].expected.length : miniBatchSize\r\n        this.validation = validation\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (shuffle) {\r\n                NetUtil.shuffle(dataSet)\r\n            }\r\n\r\n            if (log) {\r\n                console.log(`Training started. Epochs: ${epochs} Batch Size: ${this.miniBatchSize}`)\r\n            }\r\n\r\n            if (dataSet === undefined || dataSet === null) {\r\n                return void reject(\"No data provided\")\r\n            }\r\n\r\n            if (this.state != \"initialised\") {\r\n                this.initLayers.bind(this, dataSet[0].input.length, dataSet[0].expected.length)()\r\n            }\r\n\r\n            this.layers.forEach(layer => layer.state = \"training\")\r\n\r\n            if (this.validation) {\r\n                this.validation.interval = this.validation.interval || dataSet.length // Default to 1 epoch\r\n\r\n                if (this.validation.earlyStopping) {\r\n                    switch (this.validation.earlyStopping.type) {\r\n                        case \"threshold\":\r\n                            this.validation.earlyStopping.threshold = this.validation.earlyStopping.threshold || 0.01\r\n                            break\r\n                        case \"patience\":\r\n                            this.validation.earlyStopping.patienceCounter = 0\r\n                            this.validation.earlyStopping.bestError = Infinity\r\n                            this.validation.earlyStopping.patience = this.validation.earlyStopping.patience || 20\r\n                            break\r\n                        case \"divergence\":\r\n                            this.validation.earlyStopping.percent = this.validation.earlyStopping.percent || 30\r\n                            this.validation.earlyStopping.bestError = Infinity\r\n                            break\r\n                    }\r\n                }\r\n            }\r\n\r\n            let iterationIndex = 0\r\n            let epochsCounter = 0\r\n            let elapsed\r\n            const startTime = Date.now()\r\n\r\n            const logAndResolve = () => {\r\n                this.layers.forEach(layer => layer.state = \"initialised\")\r\n\r\n                if (this.validation && this.validation.earlyStopping && (this.validation.earlyStopping.type == \"patience\" || this.validation.earlyStopping.type == \"divergence\")) {\r\n                    for (let l=1; l<this.layers.length; l++) {\r\n                        this.layers[l].restoreValidation()\r\n                    }\r\n                }\r\n\r\n                if (log) {\r\n                    console.log(`Training finished. Total time: ${NetUtil.format(elapsed, \"time\")}  Average iteration time: ${NetUtil.format(elapsed/iterationIndex, \"time\")}`)\r\n                }\r\n                resolve()\r\n            }\r\n\r\n            const doEpoch = () => {\r\n                this.epochs++\r\n                this.error = 0\r\n                this.validationError = 0\r\n                iterationIndex = 0\r\n\r\n                if (this.l2Error!=undefined) this.l2Error = 0\r\n                if (this.l1Error!=undefined) this.l1Error = 0\r\n\r\n                doIteration()\r\n            }\r\n\r\n            const doIteration = async () => {\r\n\r\n                if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\")) {\r\n                    return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected'\")\r\n                }\r\n\r\n                let trainingError\r\n                let validationError\r\n\r\n                const input = dataSet[iterationIndex].input\r\n                const output = this.forward(input)\r\n                const target = dataSet[iterationIndex].expected\r\n\r\n                const errors = []\r\n                for (let n=0; n<output.length; n++) {\r\n                    errors[n] = (target[n]==1 ? 1 : 0) - output[n]\r\n                }\r\n\r\n                // Do validation\r\n                if (this.validation && iterationIndex && iterationIndex%this.validation.interval==0) {\r\n\r\n                    validationError = await this.validate(this.validation.data)\r\n\r\n                    if (this.validation.earlyStopping && this.checkEarlyStopping(errors)) {\r\n                        log && console.log(\"Stopping early\")\r\n                        return logAndResolve()\r\n                    }\r\n                }\r\n\r\n                this.backward(errors)\r\n\r\n                if (++iterationIndex%this.miniBatchSize==0) {\r\n                    this.applyDeltaWeights()\r\n                    this.resetDeltaWeights()\r\n                } else if (iterationIndex >= dataSet.length) {\r\n                    this.applyDeltaWeights()\r\n                }\r\n\r\n                trainingError = this.cost(target, output)\r\n                this.error += trainingError\r\n                this.iterations++\r\n\r\n                elapsed = Date.now() - startTime\r\n\r\n                if (typeof callback==\"function\") {\r\n                    callback({\r\n                        iterations: this.iterations,\r\n                        validations: this.validations,\r\n                        validationError, trainingError,\r\n                        elapsed, input\r\n                    })\r\n                }\r\n\r\n                if (iterationIndex < dataSet.length) {\r\n                    setTimeout(doIteration.bind(this), 0)\r\n\r\n                } else {\r\n                    epochsCounter++\r\n\r\n                    if (log) {\r\n                        let text = `Epoch: ${this.epochs}\\nTraining Error: ${this.error/iterationIndex}`\r\n\r\n                        if (validation) {\r\n                            text += `\\nValidation Error: ${this.validationError}`\r\n                        }\r\n\r\n                        if (this.l2Error!=undefined) {\r\n                            text += `\\nL2 Error: ${this.l2Error/iterationIndex}`\r\n                        }\r\n\r\n                        text += `\\nElapsed: ${NetUtil.format(elapsed, \"time\")} Average Duration: ${NetUtil.format(elapsed/epochsCounter, \"time\")}`\r\n                        console.log(text)\r\n                    }\r\n\r\n                    if (epochsCounter < epochs) {\r\n                        doEpoch()\r\n                    } else {\r\n                        logAndResolve()\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.resetDeltaWeights()\r\n            doEpoch()\r\n        })\r\n    }\r\n\r\n    validate (data) {\r\n        return new Promise((resolve, reject) => {\r\n            let validationIndex = 0\r\n            let totalValidationErrors = 0\r\n\r\n            const validateItem = (item) => {\r\n\r\n                const output = this.forward(data[validationIndex].input)\r\n                const target = data[validationIndex].expected\r\n\r\n                this.validations++\r\n                totalValidationErrors += this.cost(target, output)\r\n                // maybe do this only once, as there's no callback anyway\r\n                this.validationError = totalValidationErrors / (validationIndex+1)\r\n\r\n                if (++validationIndex<data.length) {\r\n                    setTimeout(() => validateItem(validationIndex), 0)\r\n                } else {\r\n                    this.lastValidationError = totalValidationErrors / data.length\r\n                    resolve(totalValidationErrors / data.length)\r\n                }\r\n            }\r\n            validateItem(validationIndex)\r\n        })\r\n    }\r\n\r\n    checkEarlyStopping (errors) {\r\n\r\n        let stop = false\r\n\r\n        switch (this.validation.earlyStopping.type) {\r\n            case \"threshold\":\r\n                stop = this.lastValidationError <= this.validation.earlyStopping.threshold\r\n\r\n                // Do the last backward pass\r\n                if (stop) {\r\n                    this.backward(errors)\r\n                    this.applyDeltaWeights()\r\n                }\r\n\r\n                return stop\r\n\r\n            case \"patience\":\r\n                if (this.lastValidationError < this.validation.earlyStopping.bestError) {\r\n                    this.validation.earlyStopping.patienceCounter = 0\r\n                    this.validation.earlyStopping.bestError = this.lastValidationError\r\n\r\n                    for (let l=1; l<this.layers.length; l++) {\r\n                        this.layers[l].backUpValidation()\r\n                    }\r\n\r\n                } else {\r\n                    this.validation.earlyStopping.patienceCounter++\r\n                    stop = this.validation.earlyStopping.patienceCounter>=this.validation.earlyStopping.patience\r\n                }\r\n                return stop\r\n\r\n            case \"divergence\":\r\n                if (this.lastValidationError < this.validation.earlyStopping.bestError) {\r\n                    this.validation.earlyStopping.bestError = this.lastValidationError\r\n\r\n                    for (let l=1; l<this.layers.length; l++) {\r\n                        this.layers[l].backUpValidation()\r\n                    }\r\n                } else {\r\n                    stop = this.lastValidationError / this.validation.earlyStopping.bestError >= (1+this.validation.earlyStopping.percent/100)\r\n                }\r\n\r\n                return stop\r\n        }\r\n    }\r\n\r\n    test (testSet, {log=true, callback}={}) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (testSet === undefined || testSet === null) {\r\n                reject(\"No data provided\")\r\n            }\r\n\r\n            if (log) {\r\n                console.log(\"Testing started\")\r\n            }\r\n\r\n            let totalError = 0\r\n            let iterationIndex = 0\r\n            const startTime = Date.now()\r\n\r\n            const testInput = () => {\r\n\r\n                const input = testSet[iterationIndex].input\r\n                const output = this.forward(input)\r\n                const target = testSet[iterationIndex].expected\r\n                const elapsed = Date.now() - startTime\r\n\r\n                const iterationError = this.cost(target, output)\r\n                totalError += iterationError\r\n                iterationIndex++\r\n\r\n                if (typeof callback==\"function\") {\r\n                    callback({\r\n                        iterations: iterationIndex,\r\n                        error: iterationError,\r\n                        elapsed, input\r\n                    })\r\n                }\r\n\r\n                if (iterationIndex < testSet.length) {\r\n                    setTimeout(testInput.bind(this), 0)\r\n\r\n                } else {\r\n\r\n                    if (log) {\r\n                        console.log(`Testing finished. Total time: ${NetUtil.format(elapsed, \"time\")}  Average iteration time: ${NetUtil.format(elapsed/iterationIndex, \"time\")}`)\r\n                    }\r\n\r\n                    resolve(totalError/testSet.length)\r\n                }\r\n            }\r\n            testInput()\r\n        })\r\n    }\r\n\r\n    resetDeltaWeights () {\r\n        this.layers.forEach((layer, li) => li && layer.resetDeltaWeights())\r\n    }\r\n\r\n    applyDeltaWeights () {\r\n\r\n        this.layers.forEach((layer, li) => li && layer.applyDeltaWeights())\r\n\r\n        if (this.maxNorm!=undefined) {\r\n            this.maxNormTotal = Math.sqrt(this.maxNormTotal)\r\n            NetMath.maxNorm.bind(this)()\r\n        }\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            layers: this.layers.map(layer => layer.toJSON())\r\n        }\r\n    }\r\n\r\n    fromJSON (data) {\r\n\r\n        if (data === undefined || data === null) {\r\n            throw new Error(\"No JSON data given to import.\")\r\n        }\r\n\r\n        if (data.layers.length != this.layers.length) {\r\n            throw new Error(`Mismatched layers (${data.layers.length} layers in import data, but ${this.layers.length} configured)`)\r\n        }\r\n\r\n        this.resetDeltaWeights()\r\n        this.layers.forEach((layer, li) => li && layer.fromJSON(data.layers[li], li))\r\n    }\r\n\r\n    static get version () {\r\n        return \"3.2.0\"\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.Network = Network)\r\nexports.Network = Network\r\n\"use strict\"\r\n\r\nclass Neuron {\r\n\r\n    constructor () {}\r\n\r\n    init ({updateFn, activation, eluAlpha}={}) {\r\n\r\n        const size = this.weights.length\r\n        this.deltaWeights = this.weights.map(v => 0)\r\n\r\n        switch (updateFn) {\r\n\r\n            case \"gain\":\r\n                this.biasGain = 1\r\n                this.weightGains = [...new Array(size)].map(v => 1)\r\n                this.getWeightGain = i => this.weightGains[i]\r\n                this.setWeightGain = (i,v) => this.weightGains[i] = v\r\n                break\r\n\r\n            case \"adagrad\":\r\n            case \"rmsprop\":\r\n            case \"adadelta\":\r\n            case \"momentum\":\r\n                this.biasCache = 0\r\n                this.weightsCache = [...new Array(size)].map(v => 0)\r\n                this.getWeightsCache = i => this.weightsCache[i]\r\n                this.setWeightsCache = (i,v) => this.weightsCache[i] = v\r\n\r\n                if (updateFn==\"adadelta\") {\r\n                    this.adadeltaBiasCache = 0\r\n                    this.adadeltaCache = [...new Array(size)].map(v => 0)\r\n                    this.getAdadeltaCache = i => this.adadeltaCache[i]\r\n                    this.setAdadeltaCache = (i,v) => this.adadeltaCache[i] = v\r\n                }\r\n                break\r\n\r\n            case \"adam\":\r\n                this.m = 0\r\n                this.v = 0\r\n                break\r\n        }\r\n\r\n        if (activation==\"rrelu\") {\r\n            this.rreluSlope = Math.random() * 0.001\r\n\r\n        } else if (activation==\"elu\") {\r\n            this.eluAlpha = eluAlpha\r\n        }\r\n    }\r\n\r\n    getWeight (i) {\r\n        return this.weights[i]\r\n    }\r\n\r\n    setWeight (i, v) {\r\n        this.weights[i] = v\r\n    }\r\n\r\n    getDeltaWeight (i) {\r\n        return this.deltaWeights[i]\r\n    }\r\n\r\n    setDeltaWeight (i, v) {\r\n        this.deltaWeights[i] = v\r\n    }\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.Neuron = Neuron)\r\nexports.Neuron = Neuron\r\n\"use strict\"\r\n\r\nclass PoolLayer {\r\n\r\n    constructor (size, {stride, activation}={}) {\r\n\r\n        if (size)   this.size = size\r\n        if (stride) this.stride = stride\r\n\r\n        if (activation!=undefined && activation!=false) {\r\n            this.activation = typeof activation==\"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this)\r\n        } else {\r\n            this.activation = false\r\n        }\r\n    }\r\n\r\n    init () {}\r\n\r\n    assignNext (layer) {\r\n        this.nextLayer = layer\r\n    }\r\n\r\n    assignPrev (layer, layerIndex) {\r\n\r\n        this.prevLayer = layer\r\n        this.size = this.size || this.net.pool.size || 2\r\n        this.stride = this.stride || this.net.pool.stride || this.size\r\n        this.layerIndex = layerIndex\r\n\r\n        let prevLayerOutWidth = layer.outMapSize\r\n\r\n        switch (layer.constructor.name) {\r\n\r\n            case \"FCLayer\":\r\n                this.channels = this.net.channels\r\n                prevLayerOutWidth = Math.max(Math.floor(Math.sqrt(layer.size/this.channels)), 1)\r\n                break\r\n\r\n            case \"ConvLayer\":\r\n                this.channels = layer.size\r\n                break\r\n\r\n            case \"PoolLayer\":\r\n                this.channels = layer.channels\r\n                break\r\n        }\r\n\r\n        this.prevLayerOutWidth = prevLayerOutWidth\r\n        this.outMapSize = (prevLayerOutWidth - this.size) / this.stride + 1\r\n        this.inMapValuesCount = prevLayerOutWidth ** 2\r\n\r\n        if (this.outMapSize%1 != 0) {\r\n            throw new Error(`Misconfigured hyperparameters. Activation volume dimensions would be ${this.outMapSize} in pool layer at index ${layerIndex}`)\r\n        }\r\n\r\n        this.activations = [...new Array(this.channels)].map(channel => {\r\n            return [...new Array(this.outMapSize)].map(row => [...new Array(this.outMapSize)].map(v => 0))\r\n        })\r\n        this.errors = [...new Array(this.channels)].map(channel => {\r\n            return [...new Array(prevLayerOutWidth)].map(row => [...new Array(prevLayerOutWidth)].map(v => 0))\r\n        })\r\n        this.indeces = this.activations.map(channel => channel.map(row => row.map(v => [0,0])))\r\n    }\r\n\r\n    forward () {\r\n        for (let channel=0; channel<this.channels; channel++) {\r\n\r\n            NetMath.maxPool(this, channel)\r\n\r\n            // Apply activations\r\n            if (this.activation) {\r\n                for (let row=0; row<this.outMapSize; row++) {\r\n                    for (let col=0; col<this.outMapSize; col++) {\r\n                        this.activations[channel][row][col] = this.activation(this.activations[channel][row][col], false, this.net)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    backward () {\r\n\r\n        // Clear the existing error values, first\r\n        for (let channel=0; channel<this.channels; channel++) {\r\n            for (let row=0; row<this.errors[0].length; row++) {\r\n                for (let col=0; col<this.errors[0].length; col++) {\r\n                    this.errors[channel][row][col] = 0\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.nextLayer instanceof FCLayer) {\r\n\r\n            for (let channel=0; channel<this.channels; channel++) {\r\n                for (let row=0; row<this.outMapSize; row++) {\r\n                    for (let col=0; col<this.outMapSize; col++) {\r\n\r\n                        const rowI = this.indeces[channel][row][col][0] + row * this.stride\r\n                        const colI = this.indeces[channel][row][col][1] + col * this.stride\r\n                        const weightIndex = channel * this.outMapSize**2 + row * this.outMapSize + col\r\n\r\n                        for (let neuron=0; neuron<this.nextLayer.neurons.length; neuron++) {\r\n                            this.errors[channel][rowI][colI] += this.nextLayer.neurons[neuron].error\r\n                                                                * this.nextLayer.neurons[neuron].weights[weightIndex]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else if (this.nextLayer instanceof ConvLayer) {\r\n\r\n            for (let channel=0; channel<this.channels; channel++) {\r\n\r\n                const errs = []\r\n\r\n                for (let col=0; col<this.outMapSize; col++) {\r\n                    errs[col] = 0\r\n                }\r\n\r\n                // Convolve on the error map\r\n                NetUtil.buildConvErrorMap(this.nextLayer, errs, channel)\r\n\r\n                for (let row=0; row<this.outMapSize; row++) {\r\n                    for (let col=0; col<this.outMapSize; col++) {\r\n\r\n                        const rowI = this.indeces[channel][row][col][0] + row * this.stride\r\n                        const colI = this.indeces[channel][row][col][1] + col * this.stride\r\n\r\n                        this.errors[channel][rowI][colI] += errs[row][col]\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            for (let channel=0; channel<this.channels; channel++) {\r\n                for (let row=0; row<this.outMapSize; row++) {\r\n                    for (let col=0; col<this.outMapSize; col++) {\r\n\r\n                        const rowI = this.indeces[channel][row][col][0] + row * this.stride\r\n                        const colI = this.indeces[channel][row][col][1] + col * this.stride\r\n\r\n                        this.errors[channel][rowI][colI] += this.nextLayer.errors[channel][row][col]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Apply derivatives\r\n        if (this.activation) {\r\n            for (let channel=0; channel<this.channels; channel++) {\r\n\r\n                for (let row=0; row<this.indeces[channel].length; row++) {\r\n                    for (let col=0; col<this.indeces[channel].length; col++) {\r\n\r\n                        const rowI = this.indeces[channel][row][col][0] + row * this.stride\r\n                        const colI = this.indeces[channel][row][col][1] + col * this.stride\r\n\r\n                        this.errors[channel][rowI][colI] *= this.activation(this.errors[channel][rowI][colI], true, this.net)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetDeltaWeights () {}\r\n\r\n    applyDeltaWeights () {}\r\n\r\n    backUpValidation () {}\r\n\r\n    restoreValidation () {}\r\n\r\n    toJSON () {return {}}\r\n\r\n    fromJSON () {}\r\n}\r\n\r\n/* istanbul ignore next */\r\ntypeof window!=\"undefined\" && (window.PoolLayer = PoolLayer)\r\nexports.PoolLayer = PoolLayer\n//# sourceMappingURL=jsNetJS.concat.js.map"]}