{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Layer","size","importedData","this","neurons","concat","map","n","ni","Neuron","undefined","value","layer","nextLayer","_this","prevLayer","forEach","neuron","init","adaptiveLR","data","_this2","sum","bias","pNeuron","pni","activation","weights","expected","_this3","error","derivative","reduce","p","c","weight","wi","deltaWeights","deltaBias","window","global","NetMath","prime","sigmoid","Math","exp","output","vi","log","calculated","desired","index","pow","prev","curr","deltaValue","learningRate","weightI","newVal","biasGain","weightGains","max","min","weightsCache","biasCache","sqrt","values","total","Network","_ref","arguments","_ref$learningRate","_ref$layers","layers","_ref$adaptiveLR","_ref$activation","_ref$cost","cost","state","epochs","iterations","includes","weightUpdateFn","every","item","Number","isInteger","initLayers","definedLayers","Error","input","_this4","li","hidden","abs","round","ceil","joinLayer","bind","layerIndex","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this5","_ref2","_ref2$epochs","callback","Promise","resolve","reject","iterationIndex","epochsCounter","doEpoch","doIteration","hasOwnProperty","resetDeltaWeights","applyDeltaWeights","iterationError","setTimeout","testSet","_this6","totalError","testIteration","testInput","dw","_this7","dwi","imported","v","random"],"mappings":"AAAA,aAIA,SAASA,mBAAmBC,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,IAAIG,EAAI,EAAGC,EAAOH,MAAMD,EAAIK,QAASF,EAAIH,EAAIK,OAAQF,IAAOC,EAAKD,GAAKH,EAAIG,GAAM,OAAOC,EAAe,OAAOH,MAAMK,KAAKN,GAE1L,SAASO,gBAAgBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIC,UAAU,qCAJhH,IAAIC,aAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIX,EAAI,EAAGA,EAAIW,EAAMT,OAAQF,IAAK,CAAE,IAAIY,EAAaD,EAAMX,GAAIY,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeP,EAAQE,EAAWM,IAAKN,IAAiB,OAAO,SAAUN,EAAaa,EAAYC,GAAiJ,OAA9HD,GAAYV,EAAiBH,EAAYe,UAAWF,GAAiBC,GAAaX,EAAiBH,EAAac,GAAqBd,MAM5hBgB,MAAQ,WACR,SAASA,EAAMC,EAAMC,GACjBpB,gBAAgBqB,KAAMH,GAEtBG,KAAKF,KAAOA,EACZE,KAAKC,WAAaC,OAAO/B,mBAAmB,IAAIE,MAAMyB,KAAQK,IAAI,SAAUC,EAAGC,GAC3E,OAAO,IAAIC,OAAOP,EAAeA,EAAaM,QAAME,KA4D5D,OAxDAxB,aAAac,IACTJ,IAAK,aACLe,MAAO,SAAoBC,GACvBT,KAAKU,UAAYD,KAGrBhB,IAAK,aACLe,MAAO,SAAoBC,GACvB,IAAIE,EAAQX,KAEZA,KAAKY,UAAYH,EACjBT,KAAKC,QAAQY,QAAQ,SAAUC,GAC3B,OAAOA,EAAOC,KAAKN,EAAMX,KAAMa,EAAMK,iBAI7CvB,IAAK,UACLe,MAAO,SAAiBS,GACpB,IAAIC,EAASlB,KAEbA,KAAKC,QAAQY,QAAQ,SAAUC,EAAQT,GAEnCS,EAAOK,IAAML,EAAOM,KACpBF,EAAON,UAAUX,QAAQY,QAAQ,SAAUQ,EAASC,GAChD,OAAOR,EAAOK,KAAOE,EAAQE,WAAaT,EAAOU,QAAQF,KAE7DR,EAAOS,WAAaL,EAAOK,WAAWT,EAAOK,UAIrD1B,IAAK,WACLe,MAAO,SAAkBiB,GACrB,IAAIC,EAAS1B,KAEbA,KAAKC,QAAQY,QAAQ,SAAUC,EAAQT,QAEX,IAAboB,EACPX,EAAOa,MAAQF,EAASpB,GAAMS,EAAOS,YAErCT,EAAOc,WAAaF,EAAOH,WAAWT,EAAOK,KAAK,GAClDL,EAAOa,MAAQb,EAAOc,WAAaF,EAAOhB,UAAUT,QAAQE,IAAI,SAAUC,GACtE,OAAOA,EAAEuB,MAAQvB,EAAEoB,QAAQnB,KAC5BwB,OAAO,SAAUC,EAAGC,GACnB,OAAOD,EAAIC,GACZ,IAGPjB,EAAOU,QAAQX,QAAQ,SAAUmB,EAAQC,GACrCnB,EAAOoB,aAAaD,IAAOnB,EAAOa,MAAQD,EAAOd,UAAUX,QAAQgC,GAAIV,aAG3ET,EAAOqB,UAAYrB,EAAOa,YAK/B9B,KAGM,oBAAVuC,SAA0BC,OAAOxC,MAAQA,OAGhD,IAAIyC,QAAU,WACV,SAASA,IACL3D,gBAAgBqB,KAAMsC,GA6E1B,OA1EAvD,aAAauD,EAAS,OAClB7C,IAAK,UAILe,MAAO,SAAiBA,EAAO+B,GAC3B,OAAOA,EAAQD,EAAQE,QAAQhC,IAAU,EAAI8B,EAAQE,QAAQhC,IAAU,GAAK,EAAIiC,KAAKC,KAAKlC,OAM9Ff,IAAK,eACLe,MAAO,SAAsBvB,EAAQ0D,GACjC,OAAOA,EAAOxC,IAAI,SAAUK,EAAOoC,GAC/B,OAAO3D,EAAO2D,GAAMH,KAAKI,IAAIrC,EAAQ,QAAU,EAAIvB,EAAO2D,IAAOH,KAAKI,IAAI,EAAI,MAAQrC,KACvFqB,OAAO,SAAUC,EAAGC,GACnB,OAAOD,EAAIC,GACZ,MAGPtC,IAAK,mBACLe,MAAO,SAA0BsC,EAAYC,GACzC,OAAOD,EAAW3C,IAAI,SAAUwC,EAAQK,GACpC,OAAOP,KAAKQ,IAAIN,EAASI,EAAQC,GAAQ,KAC1CnB,OAAO,SAAUqB,EAAMC,GACtB,OAAOD,EAAOC,GACf,GAAKL,EAAWrE,UAMvBgB,IAAK,eACLe,MAAO,SAAsBA,EAAO4C,GAChC,OAAO5C,EAAQR,KAAKqD,aAAeD,KAGvC3D,IAAK,OACLe,MAAO,SAAcA,EAAO4C,EAAYtC,EAAQwC,GAE5C,IAAIC,EAAS/C,EAAQR,KAAKqD,aAAeD,GAAyB,MAAXE,EAAkBxC,EAAO0C,SAAW1C,EAAO2C,YAAYH,IAQ9G,OANIC,GAAU,GAAK/C,EAAQ,GAAK+C,GAAU,GAAK/C,EAAQ,EACpC,MAAX8C,EAAiBxC,EAAO2C,YAAYH,GAAWb,KAAKiB,IAAkC,IAA9B5C,EAAO2C,YAAYH,GAAiB,IAAUxC,EAAO0C,SAAWf,KAAKiB,IAAsB,IAAlB5C,EAAO0C,SAAiB,IAE9I,MAAXF,EAAiBxC,EAAO2C,YAAYH,GAAWb,KAAKkB,IAAI7C,EAAO2C,YAAYH,GAAW,IAAM,GAAQxC,EAAO0C,SAAWf,KAAKkB,IAAI7C,EAAO0C,SAAW,IAAM,GAGxJD,KAGX9D,IAAK,UACLe,MAAO,SAAiBA,EAAO4C,EAAYtC,EAAQwC,GAI/C,OAFe,MAAXA,EAAiBxC,EAAO8C,aAAaN,IAAYb,KAAKQ,IAAIG,EAAY,GAAQtC,EAAO+C,WAAapB,KAAKQ,IAAIG,EAAY,GAEpH5C,EAAQR,KAAKqD,aAAeD,GAAc,KAAOX,KAAKqB,KAAgB,MAAXR,EAAkBxC,EAAO8C,aAAaN,GAAWxC,EAAO+C,eAM9HpE,IAAK,UACLe,MAAO,SAAiBuD,GACpB,IAAIC,EAAQD,EAAOlC,OAAO,SAAUqB,EAAMC,GACtC,OAAOD,EAAOC,GACf,GACH,OAAOY,EAAO5D,IAAI,SAAUK,GACxB,OAAOA,EAAQwD,QAKpB1B,KAGM,oBAAVF,SAA0BC,OAAOC,QAAUA,SAGlD,IAAI2B,QAAU,WACV,SAASA,IACL,IAAIC,EAAOC,UAAU1F,OAAS,QAAsB8B,IAAjB4D,UAAU,GAAmBA,UAAU,MACtEC,EAAoBF,EAAKb,aACzBA,OAAqC9C,IAAtB6D,EAAkC,GAAMA,EACvDC,EAAcH,EAAKI,OACnBA,OAAyB/D,IAAhB8D,KAAiCA,EAC1CE,EAAkBL,EAAKlD,WACvBA,OAAiCT,IAApBgE,EAAgC,eAAiBA,EAC9DC,EAAkBN,EAAK3C,WACvBA,OAAiChB,IAApBiE,EAAgC,UAAYA,EACzDC,EAAYP,EAAKQ,KACjBA,OAAqBnE,IAAdkE,EAA0B,eAAiBA,EAetD,GAbA9F,gBAAgBqB,KAAMiE,GAEtBjE,KAAK2E,MAAQ,cACb3E,KAAKsE,UACLtE,KAAK4E,OAAS,EACd5E,KAAK6E,WAAa,EAElB7E,KAAKqD,aAAeA,EACpBrD,KAAKgB,aAAc,EAAO,UAAMT,GAAWuE,SAAS9D,GAAc,eAAiBA,EACnFhB,KAAK+E,eAAiBzC,QAAQtC,KAAKgB,YACnChB,KAAKuB,WAAae,QAAQf,GAC1BvB,KAAK0E,KAAOpC,QAAQoC,GAEhBJ,EAAO7F,OAEP,QAAQ,GAEJ,KAAK6F,EAAOU,MAAM,SAAUC,GACxB,OAAOC,OAAOC,UAAUF,KAExBjF,KAAKsE,OAASA,EAAOnE,IAAI,SAAUL,GAC/B,OAAO,IAAID,MAAMC,KAErBE,KAAK2E,MAAQ,cACb3E,KAAKoF,aACL,MAEJ,KAAKd,EAAOU,MAAM,SAAUC,GACxB,OAAOA,aAAgBpF,QAEvBG,KAAK2E,MAAQ,cACb3E,KAAKsE,OAASA,EACdtE,KAAKoF,aACL,MAEJ,KAAKd,EAAOU,MAAM,SAAUC,GACxB,OAAOA,IAASpF,QAEhBG,KAAK2E,MAAQ,UACb3E,KAAKqF,cAAgBf,EACrB,MAEJ,QACI,MAAM,IAAIgB,MAAM,2DAgQhC,OA3PAvG,aAAakF,IACTxE,IAAK,aACLe,MAAO,SAAoB+E,EAAO9D,GAC9B,IAAI+D,EAASxF,KAEb,OAAQA,KAAK2E,OAET,IAAK,cACD,OAEJ,IAAK,UACD3E,KAAKsE,OAAStE,KAAKqF,cAAclF,IAAI,SAAUM,EAAOgF,GAClD,IAAKA,EAAI,OAAO,IAAIhF,EAAM8E,GAE1B,GAAIE,GAAMD,EAAOH,cAAc5G,OAAS,EAAG,OAAO,IAAIgC,EAAMgB,GAE5D,IAAIiE,EAASF,EAAOH,cAAc5G,OAAS,EACvCqB,EAAOyF,EAAQ9D,EAAW,EAAIA,GAAYA,EAAWgB,KAAKkD,IAAIJ,EAAQ9D,GAAY,IAAMiE,EAASD,EAAK,IAAMC,EAAS,GAAKH,GAAS9D,EAAW8D,EAAQ9D,GAAYiE,EAASD,IAAOC,EAAS,GAAKjE,EAAW8D,GAASG,EAASD,IAAOC,EAAS,GAEjP,OAAO,IAAIjF,EAAMgC,KAAKiB,IAAIjB,KAAKmD,MAAM9F,GAAO,MAEhD,MAEJ,IAAK,cACDE,KAAKsE,OAAO,GAAK,IAAIzE,MAAM0F,GAC3BvF,KAAKsE,OAAO,GAAK,IAAIzE,MAAM4C,KAAKoD,KAAKN,EAAQ9D,EAAW,EAAIA,EAAWgB,KAAKkD,IAAIJ,EAAQ9D,GAAY,EAAI8D,EAAQ9D,IAChHzB,KAAKsE,OAAO,GAAK,IAAIzE,MAAM4C,KAAKoD,KAAKpE,IAI7CzB,KAAKsE,OAAOzD,QAAQb,KAAK8F,UAAUC,KAAK/F,OACxCA,KAAK2E,MAAQ,iBAGjBlF,IAAK,YACLe,MAAO,SAAmBC,EAAOuF,GAE7BvF,EAAMc,WAAavB,KAAKuB,WACxBd,EAAMO,WAAahB,KAAKgB,WAEpBgF,IACAhG,KAAKsE,OAAO0B,EAAa,GAAGC,WAAWxF,GACvCA,EAAMyF,WAAWlG,KAAKsE,OAAO0B,EAAa,QAIlDvG,IAAK,UACLe,MAAO,SAAiBS,GAEpB,GAAkB,eAAdjB,KAAK2E,MACL,MAAM,IAAIW,MAAM,iDAGpB,QAAa/E,IAATU,EACA,MAAM,IAAIqE,MAAM,uCAapB,OAVIrE,EAAKxC,QAAUuB,KAAKsE,OAAO,GAAGrE,QAAQxB,QACtC0H,QAAQC,KAAK,8DAGjBpG,KAAKsE,OAAO,GAAGrE,QAAQY,QAAQ,SAAUC,EAAQT,GAC7C,OAAOS,EAAOS,WAAaN,EAAKZ,KAEpCL,KAAKsE,OAAOzD,QAAQ,SAAUJ,EAAOgF,GACjC,OAAOA,GAAMhF,EAAM4F,QAAQpF,KAExBjB,KAAKsE,OAAOtE,KAAKsE,OAAO7F,OAAS,GAAGwB,QAAQE,IAAI,SAAUC,GAC7D,OAAOA,EAAEmB,gBAIjB9B,IAAK,WACLe,MAAO,SAAkBiB,GACrB,QAAiBlB,IAAbkB,EACA,MAAM,IAAI6D,MAAM,wCAGhB7D,EAAShD,QAAUuB,KAAKsE,OAAOtE,KAAKsE,OAAO7F,OAAS,GAAGwB,QAAQxB,QAC/D0H,QAAQC,KAAK,kEAGjBpG,KAAKsE,OAAOtE,KAAKsE,OAAO7F,OAAS,GAAG6H,SAAS7E,GAE7C,IAAK,IAAIuE,EAAahG,KAAKsE,OAAO7F,OAAS,EAAGuH,EAAa,EAAGA,IAC1DhG,KAAKsE,OAAO0B,GAAYM,cAIhC7G,IAAK,QACLe,MAAO,SAAe+F,GAClB,IAAIC,EAASxG,KAETyG,EAAQtC,UAAU1F,OAAS,QAAsB8B,IAAjB4D,UAAU,GAAmBA,UAAU,MACvEuC,EAAeD,EAAM7B,OACrBA,OAA0BrE,IAAjBmG,EAA6B,EAAIA,EAC1CC,EAAWF,EAAME,SAErB,OAAO,IAAIC,QAAQ,SAAUC,EAASC,QAElBvG,IAAZgG,GAAqC,OAAZA,GACzBO,EAAO,oBAGS,eAAhBN,EAAO7B,OACP6B,EAAOpB,WAAWmB,EAAQ,GAAGhB,MAAM9G,QAAS8H,EAAQ,GAAG9E,UAAY8E,EAAQ,GAAG5D,QAAQlE,QAG1F,IAAIsI,EAAiB,EACjBC,EAAgB,EAChBrF,EAAQ,EAERsF,EAAU,WACVT,EAAO5B,SACPmC,EAAiB,EAEjBG,KAGAA,EAAc,SAASA,IAEvB,IAAKX,EAAQQ,GAAgBI,eAAe,WAAaZ,EAAQQ,GAAgBI,eAAe,cAAgBZ,EAAQQ,GAAgBI,eAAe,UACnJ,OAAOL,EAAO,sFAGlBN,EAAOY,oBAEP,IAAI7B,EAAQgB,EAAQQ,GAAgBxB,MAChC5C,EAAS6D,EAAOH,QAAQd,GACxBtG,EAASsH,EAAQQ,GAAgBtF,UAAY8E,EAAQQ,GAAgBpE,OAEzE6D,EAAOF,SAASrH,GAChBuH,EAAOa,oBAEP,IAAIC,EAAiBd,EAAO9B,KAAKzF,EAAQ0D,GACzChB,GAAS2F,EAEc,mBAAZX,GACPA,GACI9B,WAAY2B,EAAO3B,WACnBlD,MAAO2F,EACP/B,MAAOA,IAIfiB,EAAO3B,eACPkC,EAEqBR,EAAQ9H,OACzB8I,WAAWL,EAAYnB,KAAKS,GAAS,IAGrCQ,IACAb,QAAQtD,IAAI,UAAYmE,EAAgB,WAAarF,EAAQ,KAEzDqF,EAAgBpC,EAChBqC,IACGJ,MAIfI,SAIRxH,IAAK,OACLe,MAAO,SAAcgH,GACjB,IAAIC,EAASzH,KAEb,OAAO,IAAI4G,QAAQ,SAAUC,EAASC,QAElBvG,IAAZiH,GAAqC,OAAZA,GACzBV,EAAO,oBAGX,IAAIY,EAAa,EACbC,EAAgB,GAEJ,SAASC,IAErBzB,QAAQtD,IAAI,oBAAqB8E,EAAgB,EAAGD,GAAcC,EAAgB,GAAK,KAEvF,IAAIhF,EAAS8E,EAAOpB,QAAQmB,EAAQG,GAAepC,OAC/CtG,EAASuI,EAAQG,GAAelG,UAAY+F,EAAQG,GAAehF,OAEvE+E,GAAcD,EAAO/C,KAAKzF,EAAQ0D,KAElCgF,EAEoBH,EAAQ/I,OAAQ8I,WAAWK,EAAU7B,KAAK0B,GAAS,GAAQZ,EAAQa,EAAaF,EAAQ/I,OAAS,aAMjIgB,IAAK,oBACLe,MAAO,WACHR,KAAKsE,OAAOzD,QAAQ,SAAUJ,EAAOgF,GACjCA,GAAMhF,EAAMR,QAAQY,QAAQ,SAAUC,GAClCA,EAAOoB,aAAepB,EAAOU,QAAQrB,IAAI,SAAU0H,GAC/C,OAAO,WAMvBpI,IAAK,oBACLe,MAAO,WACH,IAAIsH,EAAS9H,KAEbA,KAAKsE,OAAOzD,QAAQ,SAAUJ,EAAOgF,GACjCA,GAAMhF,EAAMR,QAAQY,QAAQ,SAAUC,GAClCA,EAAOoB,aAAarB,QAAQ,SAAUgH,EAAIE,GACtCjH,EAAOU,QAAQuG,GAAOD,EAAO/C,eAAegB,KAAK+B,EAAQhH,EAAOU,QAAQuG,GAAMF,EAAI/G,EAAQiH,OAE9FjH,EAAOM,KAAO0G,EAAO/C,eAAegB,KAAK+B,EAAQhH,EAAOM,KAAMN,EAAOqB,UAAWrB,YAK5FrB,IAAK,SACLe,MAAO,WACH,OACI8D,OAAQtE,KAAKsE,OAAOnE,IAAI,SAAUM,GAC9B,OACIR,QAASQ,EAAMR,QAAQE,IAAI,SAAUW,GACjC,OACIM,KAAMN,EAAOM,KACbI,QAASV,EAAOU,kBAQxC/B,IAAK,WACLe,MAAO,SAAkBS,GAErB,QAAaV,IAATU,GAA+B,OAATA,EACtB,MAAM,IAAIqE,MAAM,iCAGpBtF,KAAKsE,OAASrD,EAAKqD,OAAOnE,IAAI,SAAUM,GACpC,OAAO,IAAIZ,MAAMY,EAAMR,QAAQxB,OAAQgC,EAAMR,WAEjDD,KAAK2E,MAAQ,cACb3E,KAAKoF,iBAINnB,KAGM,oBAAV7B,SAA0BC,OAAO4B,QAAUA,SAGlD,IAAI3D,OAAS,WACT,SAASA,EAAOP,GACZpB,gBAAgBqB,KAAMM,GAElBP,IACAC,KAAKgI,UAAW,EAChBhI,KAAKwB,QAAUzB,EAAayB,YAC5BxB,KAAKoB,KAAOrB,EAAaqB,MAgCjC,OA5BArC,aAAauB,IACTb,IAAK,OACLe,MAAO,SAAcV,EAAMkB,GAClBhB,KAAKgI,WACNhI,KAAKwB,WAAatB,OAAO/B,mBAAmB,IAAIE,MAAMyB,KAAQK,IAAI,SAAU8H,GACxE,MAAuB,GAAhBxF,KAAKyF,SAAiB,KAEjClI,KAAKoB,KAAuB,GAAhBqB,KAAKyF,SAAiB,IAGtClI,KAAKkC,aAAelC,KAAKwB,QAAQrB,IAAI,SAAU8H,GAC3C,OAAO,IAGO,QAAdjH,GACAhB,KAAKyD,eAAiBvD,OAAO/B,mBAAmB,IAAIE,MAAMyB,KAAQK,IAAI,SAAU8H,GAC5E,OAAO,IAEXjI,KAAKwD,SAAW,GACK,WAAdxC,IACPhB,KAAK4D,gBAAkB1D,OAAO/B,mBAAmB,IAAIE,MAAMyB,KAAQK,IAAI,SAAU8H,GAC7E,OAAO,IAEXjI,KAAK6D,UAAY,OAKtBvD,KAGM,oBAAV8B,SAA0BC,OAAO/B,OAASA","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Layer = function () {\n    function Layer(size, importedData) {\n        _classCallCheck(this, Layer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n, ni) {\n            return new Neuron(importedData ? importedData[ni] : undefined);\n        });\n    }\n\n    _createClass(Layer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            var _this = this;\n\n            this.prevLayer = layer;\n            this.neurons.forEach(function (neuron) {\n                return neuron.init(layer.size, _this.adaptiveLR);\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                neuron.sum = neuron.bias;\n                _this2.prevLayer.neurons.forEach(function (pNeuron, pni) {\n                    return neuron.sum += pNeuron.activation * neuron.weights[pni];\n                });\n                neuron.activation = _this2.activation(neuron.sum);\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (typeof expected !== \"undefined\") {\n                    neuron.error = expected[ni] - neuron.activation;\n                } else {\n                    neuron.derivative = _this3.activation(neuron.sum, true);\n                    neuron.error = neuron.derivative * _this3.nextLayer.neurons.map(function (n) {\n                        return n.error * n.weights[ni];\n                    }).reduce(function (p, c) {\n                        return p + c;\n                    }, 0);\n                }\n\n                neuron.weights.forEach(function (weight, wi) {\n                    neuron.deltaWeights[wi] += neuron.error * _this3.prevLayer.neurons[wi].activation;\n                });\n\n                neuron.deltaBias = neuron.error;\n            });\n        }\n    }]);\n\n    return Layer;\n}();\n\ntypeof window == \"undefined\" && (global.Layer = Layer);\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            return prime ? NetMath.sigmoid(value) * (1 - NetMath.sigmoid(value)) : 1 / (1 + Math.exp(-value));\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossEntropy\",\n        value: function crossEntropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meanSquaredError\",\n        value: function meanSquaredError(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"noAdaptiveLR\",\n        value: function noAdaptiveLR(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.weightGains[weightI]);\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) neuron.weightGains[weightI] = Math.max(neuron.weightGains[weightI] * 0.95, 0.5);else neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n            } else {\n                if (weightI != null) neuron.weightGains[weightI] = Math.min(neuron.weightGains[weightI] + 0.05, 5);else neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] += Math.pow(deltaValue, 2);else neuron.biasCache += Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (global.NetMath = NetMath);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref$learningRate = _ref.learningRate,\n            learningRate = _ref$learningRate === undefined ? 0.2 : _ref$learningRate,\n            _ref$layers = _ref.layers,\n            layers = _ref$layers === undefined ? [] : _ref$layers,\n            _ref$adaptiveLR = _ref.adaptiveLR,\n            adaptiveLR = _ref$adaptiveLR === undefined ? \"noAdaptiveLR\" : _ref$adaptiveLR,\n            _ref$activation = _ref.activation,\n            activation = _ref$activation === undefined ? \"sigmoid\" : _ref$activation,\n            _ref$cost = _ref.cost,\n            cost = _ref$cost === undefined ? \"crossEntropy\" : _ref$cost;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n\n        this.learningRate = learningRate;\n        this.adaptiveLR = [false, null, undefined].includes(adaptiveLR) ? \"noAdaptiveLR\" : adaptiveLR;\n        this.weightUpdateFn = NetMath[this.adaptiveLR];\n        this.activation = NetMath[activation];\n        this.cost = NetMath[cost];\n\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new Layer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof Layer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item === Layer;\n                }):\n                    this.state = \"defined\";\n                    this.definedLayers = layers;\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n            var _this4 = this;\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"defined\":\n                    this.layers = this.definedLayers.map(function (layer, li) {\n                        if (!li) return new layer(input);\n\n                        if (li == _this4.definedLayers.length - 1) return new layer(expected);\n\n                        var hidden = _this4.definedLayers.length - 2;\n                        var size = input / expected > 5 ? expected + (expected + Math.abs(input - expected) / 4) * (hidden - li + 1) / (hidden / 2) : input >= expected ? input + expected * (hidden - li) / (hidden / 2) : expected + input * (hidden - li) / (hidden / 2);\n\n                        return new layer(Math.max(Math.round(size), 0));\n                    });\n                    break;\n\n                case \"not-defined\":\n                    this.layers[0] = new Layer(input);\n                    this.layers[1] = new Layer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new Layer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.activation = this.activation;\n            layer.adaptiveLR = this.adaptiveLR;\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1]);\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\");\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this5 = this;\n\n            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref2$epochs = _ref2.epochs,\n                epochs = _ref2$epochs === undefined ? 1 : _ref2$epochs,\n                callback = _ref2.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (_this5.state != \"initialised\") {\n                    _this5.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var error = 0;\n\n                var doEpoch = function doEpoch() {\n                    _this5.epochs++;\n                    iterationIndex = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    _this5.resetDeltaWeights();\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this5.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this5.backward(target);\n                    _this5.applyDeltaWeights();\n\n                    var iterationError = _this5.cost(target, output);\n                    error += iterationError;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this5.iterations,\n                            error: iterationError,\n                            input: input\n                        });\n                    }\n\n                    _this5.iterations++;\n                    iterationIndex++;\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this5), 0);\n                    } else {\n\n                        epochsCounter++;\n                        console.log(\"Epoch: \" + epochsCounter + \" Error: \" + error / 100);\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else resolve();\n                    }\n                };\n\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this6 = this;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                var totalError = 0;\n                var testIteration = 0;\n\n                var testInput = function testInput() {\n\n                    console.log(\"Testing iteration\", testIteration + 1, totalError / (testIteration + 1) / 100);\n\n                    var output = _this6.forward(testSet[testIteration].input);\n                    var target = testSet[testIteration].expected || testSet[testIteration].output;\n\n                    totalError += _this6.cost(target, output);\n\n                    testIteration++;\n\n                    if (testIteration < testSet.length) setTimeout(testInput.bind(_this6), 0);else resolve(totalError / testSet.length / 100);\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights = neuron.weights.map(function (dw) {\n                        return 0;\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this7 = this;\n\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights.forEach(function (dw, dwi) {\n                        neuron.weights[dwi] = _this7.weightUpdateFn.bind(_this7, neuron.weights[dwi], dw, neuron, dwi)();\n                    });\n                    neuron.bias = _this7.weightUpdateFn.bind(_this7, neuron.bias, neuron.deltaBias, neuron)();\n                });\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return {\n                        neurons: layer.neurons.map(function (neuron) {\n                            return {\n                                bias: neuron.bias,\n                                weights: neuron.weights\n                            };\n                        })\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            this.layers = data.layers.map(function (layer) {\n                return new Layer(layer.neurons.length, layer.neurons);\n            });\n            this.state = \"constructed\";\n            this.initLayers();\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (global.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron(importedData) {\n        _classCallCheck(this, Neuron);\n\n        if (importedData) {\n            this.imported = true;\n            this.weights = importedData.weights || [];\n            this.bias = importedData.bias;\n        }\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init(size, adaptiveLR) {\n            if (!this.imported) {\n                this.weights = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                    return Math.random() * 0.2 - 0.1;\n                });\n                this.bias = Math.random() * 0.2 - 0.1;\n            }\n\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            if (adaptiveLR == \"gain\") {\n                this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                    return 1;\n                });\n                this.biasGain = 1;\n            } else if (adaptiveLR == \"adagrad\") {\n                this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                    return 0;\n                });\n                this.biasCache = 0;\n            }\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (global.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}