{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ConvLayer","size","_ref","arguments","filterSize","zeroPadding","stride","activation","this","NetMath","NetUtil","format","bind","noactivation","state","layer","nextLayer","layerIndex","prevLayer","net","channels","Math","floor","prevLayerMapWidth","outMapSize","max","sqrt","inMapValuesCount","pow","inZPMapValuesCount","Error","filters","concat","map","f","Filter","_this","forEach","filter","weights","channelWeights","weightsRow","weightsInitFn","weightsConfig","activationMap","row","v","errorMap","dropoutMap","bias","random","init","updateFn","activationConfig","eluAlpha","activations","getActivations","filterI","sumMap","convolve","input","sumY","sumX","dropout","FCLayer","emY","emX","weightIndex","neuronI","neurons","neuron","error","_filterI","buildConvErrorMap","_filterI2","_filter","col","buildConvDWeights","channel","deltaWeights","_row","_col","l2","l2Error","l1","l1Error","abs","weightUpdateFn","maxNorm","maxNormTotal","deltaBias","data","fi","window","exports","n","Neuron","_this2","weightsCount","_this3","ni","dropped","sum","ai","expected","_this4","derivative","reduce","p","c","wi","miniBatchSize","dw","_this5","dwi","Layer","_this6","_ref2","wRow","w","biasGain","weightGains","getWeightGain","_ref3","_ref4","column","setWeightGain","_ref5","_ref6","biasCache","weightsCache","getWeightsCache","_ref7","_ref8","setWeightsCache","_ref9","_ref10","adadeltaBiasCache","adadeltaCache","getAdadeltaCache","_ref11","_ref12","setAdadeltaCache","_ref13","_ref14","m","rreluSlope","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","prime","val","exp","lreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","min","rmsDecay","mt","iterations","vt","rho","_newVal","_ref23","limit","_ref24","mean","stdDeviation","x1","x2","r","_ref25","fanIn","fanOut","gaussian","lecunnormal","_ref26","uniform","lecununiform","_ref27","_ref28","values","total","avg","diffs","multiplier","layers","li","setWeight","getWeight","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getHours","getMinutes","getSeconds","join","j","x","zP","extraColumns","extraRows","slice","vol","mapValues","d","_ref29","inputVol","arrayToVolume","outputMap","paddedLength","fSSpread","di","addZeroPadding","inputY","inputX","weightsY","weightsX","outY","outX","nlFilterI","splice","emXI","channelsCount","deltaDeltaWeights","channelI","inputValues","inputMap","arrayToMap","_weightsY","_weightsX","_weightsY2","_weightsX2","eY","eX","mapStartI","mapSize","returnArr","rowI","colI","_returnArr","Network","_ref30","_ref30$layers","_ref30$updateFn","_ref30$activation","_ref30$cost","cost","_ref30$dropout","_ref30$l","_ref30$l2","conv","epochs","includes","distribution","every","item","Number","isInteger","initLayers","ceil","joinLayer","assign","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this7","_ref31","_ref31$epochs","callback","_ref31$log","_ref31$miniBatchSize","_ref31$shuffle","shuffle","Promise","resolve","reject","iterationIndex","epochsCounter","startTime","now","doEpoch","doIteration","hasOwnProperty","applyDeltaWeights","resetDeltaWeights","iterationError","elapsed","setTimeout","testSet","_this8","_ref32","_ref32$log","totalError","testInput","toJSON","fromJSON","get","_this9","_ref33"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ConvLayer = function () {\n    function ConvLayer(size) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            filterSize = _ref.filterSize,\n            zeroPadding = _ref.zeroPadding,\n            stride = _ref.stride,\n            activation = _ref.activation;\n\n        _classCallCheck(this, ConvLayer);\n\n        if (filterSize) this.filterSize = filterSize;\n        if (stride) this.stride = stride;\n        if (size) this.size = size;\n\n        this.zeroPadding = zeroPadding;\n\n        if (activation != undefined) {\n\n            if (typeof activation == \"boolean\" && !activation) {\n                this.activation = NetMath.noactivation;\n            } else {\n                this.activation = typeof activation == \"function\" ? activation : NetMath[NetUtil.format(activation)].bind(this);\n            }\n        }\n\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(ConvLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer, layerIndex) {\n\n            this.prevLayer = layer;\n\n            this.size = this.size || 4;\n            this.filterSize = this.filterSize || this.net.filterSize || 3;\n            this.stride = this.stride || this.net.stride || 1;\n            this.channels = layer instanceof ConvLayer ? layer.size : this.net.channels || 1;\n\n            if (this.zeroPadding == undefined) {\n                this.zeroPadding = this.net.zeroPadding == undefined ? Math.floor(this.filterSize / 2) : this.net.zeroPadding;\n            }\n\n            // Caching calculations\n            var prevLayerMapWidth = layer instanceof ConvLayer ? layer.outMapSize : Math.max(Math.floor(Math.sqrt(layer.size / this.channels)), 1);\n\n            this.inMapValuesCount = Math.pow(prevLayerMapWidth, 2);\n            this.inZPMapValuesCount = Math.pow(prevLayerMapWidth + this.zeroPadding * 2, 2);\n            this.outMapSize = (prevLayerMapWidth - this.filterSize + 2 * this.zeroPadding) / this.stride + 1;\n\n            if (this.outMapSize % 1 != 0) {\n                throw new Error(\"Misconfigured hyperparameters. Activation volume dimensions would be \" + this.outMapSize + \" in conv layer[\" + layerIndex + \"]\");\n            }\n\n            this.filters = [].concat(_toConsumableArray(new Array(this.size))).map(function (f) {\n                return new Filter();\n            });\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this = this;\n\n            this.filters.forEach(function (filter) {\n\n                filter.weights = [].concat(_toConsumableArray(new Array(_this.channels))).map(function (channelWeights) {\n                    return [].concat(_toConsumableArray(new Array(_this.filterSize))).map(function (weightsRow) {\n                        return _this.net.weightsInitFn(_this.filterSize * (_this.prevLayer.channels || 1), _this.weightsConfig);\n                    });\n                });\n\n                filter.activationMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.errorMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.dropoutMap = filter.activationMap.map(function (row) {\n                    return row.map(function (v) {\n                        return false;\n                    });\n                });\n                filter.bias = Math.random() * 0.2 - 0.1;\n\n                filter.init({\n                    updateFn: _this.net.updateFn,\n                    activation: _this.net.activationConfig,\n                    eluAlpha: _this.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n\n            var activations = NetUtil.getActivations(this.prevLayer);\n\n            for (var filterI = 0; filterI < this.size; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                filter.sumMap = NetUtil.convolve({\n                    input: activations,\n                    zeroPadding: this.zeroPadding,\n                    weights: filter.weights,\n                    channels: this.channels,\n                    stride: this.stride,\n                    bias: filter.bias\n                });\n\n                for (var sumY = 0; sumY < filter.sumMap.length; sumY++) {\n                    for (var sumX = 0; sumX < filter.sumMap.length; sumX++) {\n                        if (this.state == \"training\" && (filter.dropoutMap[sumY][sumX] = Math.random() > this.net.dropout)) {\n                            filter.activationMap[sumY][sumX] = 0;\n                        } else {\n                            filter.activationMap[sumY][sumX] = this.activation(filter.sumMap[sumY][sumX], false, filter) / (this.net.dropout || 1);\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"backward\",\n        value: function backward() {\n\n            // First, get the filters' error maps\n            if (this.nextLayer instanceof FCLayer) {\n\n                // For each filter, build the errorMap from the weighted neuron errors in the next FCLayer corresponding to each value in the activation map\n                for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                    var filter = this.filters[filterI];\n\n                    for (var emY = 0; emY < filter.errorMap.length; emY++) {\n                        for (var emX = 0; emX < filter.errorMap.length; emX++) {\n\n                            var weightIndex = filterI * Math.pow(this.outMapSize, 2) + emY * filter.errorMap.length + emX;\n\n                            for (var neuronI = 0; neuronI < this.nextLayer.neurons.length; neuronI++) {\n\n                                var neuron = this.nextLayer.neurons[neuronI];\n                                filter.errorMap[emY][emX] += neuron.error * neuron.weights[weightIndex];\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (var _filterI = 0; _filterI < this.filters.length; _filterI++) {\n                    NetUtil.buildConvErrorMap(this, this.filters[_filterI], _filterI);\n                }\n            }\n\n            // Apply derivative to each error value\n            for (var _filterI2 = 0; _filterI2 < this.filters.length; _filterI2++) {\n\n                var _filter = this.filters[_filterI2];\n\n                for (var row = 0; row < _filter.errorMap.length; row++) {\n                    for (var col = 0; col < _filter.errorMap[0].length; col++) {\n\n                        if (_filter.dropoutMap[row][col]) {\n                            _filter.errorMap[row][col] = 0;\n                        } else {\n                            _filter.errorMap[row][col] *= this.activation(_filter.sumMap[row][col], true, _filter);\n                        }\n                    }\n                }\n            }\n\n            // Then use the error map values to build the delta weights\n            NetUtil.buildConvDWeights(this);\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n                            filter.deltaWeights[channel][row][col] = 0;\n                        }\n                    }\n                }\n\n                for (var _row = 0; _row < filter.dropoutMap.length; _row++) {\n                    for (var _col = 0; _col < filter.dropoutMap[0].length; _col++) {\n                        filter.dropoutMap[_row][_col] = false;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n\n                            if (this.net.l2 != undefined) this.net.l2Error += 0.5 * this.net.l2 * Math.pow(filter.weights[channel][row][col], 2);\n                            if (this.net.l1 != undefined) this.net.l1Error += this.net.l1 * Math.abs(filter.weights[channel][row][col]);\n\n                            filter.weights[channel][row][col] = this.net.weightUpdateFn.bind(this.net, filter.weights[channel][row][col], filter.deltaWeights[channel][row][col], filter, [channel, row, col])();\n\n                            if (this.net.maxNorm != undefined) this.net.maxNormTotal += Math.pow(filter.weights[channel][row][col], 2);\n                        }\n                    }\n                }\n\n                filter.bias = this.net.weightUpdateFn.bind(this.net, filter.bias, filter.deltaBias, filter)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.filters.map(function (filter) {\n                    return {\n                        bias: filter.bias,\n                        weights: filter.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.filters.forEach(function (filter, fi) {\n\n                if (data.weights[fi].weights.length != filter.weights.length) {\n                    throw new Error(\"Mismatched weights depth. Given: \" + data.weights[fi].weights.length + \" Existing: \" + filter.weights.length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                if (data.weights[fi].weights[0].length != filter.weights[0].length) {\n                    throw new Error(\"Mismatched weights size. Given: \" + data.weights[fi].weights[0].length + \" Existing: \" + filter.weights[0].length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                filter.bias = data.weights[fi].bias;\n                filter.weights = data.weights[fi].weights;\n            });\n        }\n    }]);\n\n    return ConvLayer;\n}();\n\ntypeof window == \"undefined\" && (exports.ConvLayer = ConvLayer);\n\"use strict\";\n\nvar FCLayer = function () {\n    function FCLayer(size) {\n        _classCallCheck(this, FCLayer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n) {\n            return new Neuron();\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(FCLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            this.prevLayer = layer;\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron) {\n\n                var weightsCount = _this2.prevLayer instanceof FCLayer ? _this2.prevLayer.size : _this2.prevLayer.filters.length * Math.pow(_this2.prevLayer.outMapSize, 2);\n\n                neuron.weights = _this2.net.weightsInitFn(weightsCount, _this2.weightsConfig);\n                neuron.bias = Math.random() * 0.2 - 0.1;\n\n                neuron.init({\n                    updateFn: _this2.net.updateFn,\n                    activationConfig: _this2.net.activationConfig,\n                    eluAlpha: _this2.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n                if (_this3.state == \"training\" && (neuron.dropped = Math.random() > _this3.net.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n\n                    var activations = NetUtil.getActivations(_this3.prevLayer);\n\n                    for (var ai = 0; ai < activations.length; ai++) {\n                        neuron.sum += activations[ai] * neuron.weights[ai];\n                    }\n\n                    neuron.activation = _this3.activation(neuron.sum, false, neuron) / (_this3.net.dropout || 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this4 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this4.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this4.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    var activations = NetUtil.getActivations(_this4.prevLayer);\n\n                    for (var wi = 0; wi < neuron.weights.length; wi++) {\n                        neuron.deltaWeights[wi] += neuron.error * activations[wi] * (1 + ((_this4.net.l2 || 0) + (_this4.net.l1 || 0)) / _this4.net.miniBatchSize * neuron.deltaWeights[wi]);\n                    }\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.neurons.forEach(function (neuron) {\n                return neuron.deltaWeights = neuron.weights.map(function (dw) {\n                    return 0;\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this5 = this;\n\n            this.neurons.forEach(function (neuron) {\n                neuron.deltaWeights.forEach(function (dw, dwi) {\n\n                    if (_this5.net.l2 != undefined) _this5.net.l2Error += 0.5 * _this5.net.l2 * Math.pow(neuron.weights[dwi], 2);\n                    if (_this5.net.l1 != undefined) _this5.net.l1Error += _this5.net.l1 * Math.abs(neuron.weights[dwi]);\n\n                    neuron.weights[dwi] = _this5.net.weightUpdateFn.bind(_this5.net, neuron.weights[dwi], dw, neuron, dwi)();\n\n                    if (_this5.net.maxNorm != undefined) _this5.net.maxNormTotal += Math.pow(neuron.weights[dwi], 2);\n                });\n\n                neuron.bias = _this5.net.weightUpdateFn.bind(_this5.net, neuron.bias, neuron.deltaBias, neuron)();\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.neurons.map(function (neuron) {\n                    return {\n                        bias: neuron.bias,\n                        weights: neuron.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (data.weights[ni].weights.length != neuron.weights.length) {\n                    throw new Error(\"Mismatched weights count. Given: \" + data.weights[ni].weights.length + \" Existing: \" + neuron.weights.length + \". At layers[\" + layerIndex + \"], neurons[\" + ni + \"]\");\n                }\n\n                neuron.bias = data.weights[ni].bias;\n                neuron.weights = data.weights[ni].weights;\n            });\n        }\n    }]);\n\n    return FCLayer;\n}();\n\nvar Layer = FCLayer;\n\ntypeof window == \"undefined\" && (exports.FCLayer = exports.Layer = FCLayer);\n\"use strict\";\n\nvar Filter = function () {\n    function Filter() {\n        _classCallCheck(this, Filter);\n    }\n\n    _createClass(Filter, [{\n        key: \"init\",\n        value: function init() {\n            var _this6 = this;\n\n            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                updateFn = _ref2.updateFn,\n                activation = _ref2.activation,\n                eluAlpha = _ref2.eluAlpha;\n\n            var size = this.weights.length;\n\n            this.deltaWeights = this.weights.map(function (channel) {\n                return channel.map(function (wRow) {\n                    return wRow.map(function (w) {\n                        return 0;\n                    });\n                });\n            });\n            this.deltaBias = 0;\n\n            switch (updateFn) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 1;\n                            });\n                        });\n                    });\n                    this.getWeightGain = function (_ref3) {\n                        var _ref4 = _slicedToArray(_ref3, 3),\n                            channel = _ref4[0],\n                            row = _ref4[1],\n                            column = _ref4[2];\n\n                        return _this6.weightGains[channel][row][column];\n                    };\n                    this.setWeightGain = function (_ref5, v) {\n                        var _ref6 = _slicedToArray(_ref5, 3),\n                            channel = _ref6[0],\n                            row = _ref6[1],\n                            column = _ref6[2];\n\n                        return _this6.weightGains[channel][row][column] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 0;\n                            });\n                        });\n                    });\n                    this.getWeightsCache = function (_ref7) {\n                        var _ref8 = _slicedToArray(_ref7, 3),\n                            channel = _ref8[0],\n                            row = _ref8[1],\n                            column = _ref8[2];\n\n                        return _this6.weightsCache[channel][row][column];\n                    };\n                    this.setWeightsCache = function (_ref9, v) {\n                        var _ref10 = _slicedToArray(_ref9, 3),\n                            channel = _ref10[0],\n                            row = _ref10[1],\n                            column = _ref10[2];\n\n                        return _this6.weightsCache[channel][row][column] = v;\n                    };\n\n                    if (updateFn == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = this.weights.map(function (channel) {\n                            return channel.map(function (wRow) {\n                                return wRow.map(function (w) {\n                                    return 0;\n                                });\n                            });\n                        });\n                        this.getAdadeltaCache = function (_ref11) {\n                            var _ref12 = _slicedToArray(_ref11, 3),\n                                channel = _ref12[0],\n                                row = _ref12[1],\n                                column = _ref12[2];\n\n                            return _this6.adadeltaCache[channel][row][column];\n                        };\n                        this.setAdadeltaCache = function (_ref13, v) {\n                            var _ref14 = _slicedToArray(_ref13, 3),\n                                channel = _ref14[0],\n                                row = _ref14[1],\n                                column = _ref14[2];\n\n                            return _this6.adadeltaCache[channel][row][column] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n            }\n\n            if (activation == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activation == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(_ref15) {\n            var _ref16 = _slicedToArray(_ref15, 3),\n                channel = _ref16[0],\n                row = _ref16[1],\n                column = _ref16[2];\n\n            return this.weights[channel][row][column];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(_ref17, v) {\n            var _ref18 = _slicedToArray(_ref17, 3),\n                channel = _ref18[0],\n                row = _ref18[1],\n                column = _ref18[2];\n\n            this.weights[channel][row][column] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(_ref19) {\n            var _ref20 = _slicedToArray(_ref19, 3),\n                channel = _ref20[0],\n                row = _ref20[1],\n                column = _ref20[2];\n\n            return this.deltaWeights[channel][row][column];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(_ref21, v) {\n            var _ref22 = _slicedToArray(_ref21, 3),\n                channel = _ref22[0],\n                row = _ref22[1],\n                column = _ref22[2];\n\n            this.deltaWeights[channel][row][column] = v;\n        }\n    }]);\n\n    return Filter;\n}();\n\ntypeof window == \"undefined\" && (exports.Filter = Filter);\n\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"noactivation\",\n\n\n        // Activation functions\n        value: function noactivation(value, prime) {\n            return prime ? 1 : value;\n        }\n    }, {\n        key: \"sigmoid\",\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope : Math.max(this.lreluSlope * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossentropy\",\n        value: function crossentropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meansquarederror\",\n        value: function meansquarederror(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"vanillaupdatefn\",\n        value: function vanillaupdatefn(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.getWeightGain(weightI));\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.max(neuron.getWeightGain(weightI) * 0.95, 0.5));\n                } else {\n                    neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n                }\n            } else {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.min(neuron.getWeightGain(weightI) + 0.05, 5));\n                } else {\n                    neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n                }\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, neuron.getWeightsCache(weightI) + Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache += Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"rmsprop\",\n        value: function rmsprop(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rmsDecay * neuron.getWeightsCache(weightI) + (1 - this.rmsDecay) * Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rho * neuron.getWeightsCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                var newVal = value + Math.sqrt((neuron.getAdadeltaCache(weightI) + 1e-6) / (neuron.getWeightsCache(weightI) + 1e-6)) * deltaValue;\n                neuron.setAdadeltaCache(weightI, this.rho * neuron.getAdadeltaCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Weights init\n\n    }, {\n        key: \"uniform\",\n        value: function uniform(size, _ref23) {\n            var limit = _ref23.limit;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                return Math.random() * 2 * limit - limit;\n            });\n        }\n    }, {\n        key: \"gaussian\",\n        value: function gaussian(size, _ref24) {\n            var mean = _ref24.mean,\n                stdDeviation = _ref24.stdDeviation;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function () {\n                // Polar Box Muller\n                var x1 = void 0,\n                    x2 = void 0,\n                    r = void 0,\n                    y = void 0;\n\n                do {\n                    x1 = 2 * Math.random() - 1;\n                    x2 = 2 * Math.random() - 1;\n                    r = Math.pow(x1, 2) + Math.pow(x2, 2);\n                } while (r >= 1 || !r);\n\n                return mean + x1 * Math.sqrt(-2 * Math.log(r) / r) * stdDeviation;\n            });\n        }\n    }, {\n        key: \"xaviernormal\",\n        value: function xaviernormal(size, _ref25) {\n            var fanIn = _ref25.fanIn,\n                fanOut = _ref25.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(2 / (fanIn + fanOut)) }) : NetMath.lecunnormal(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"xavieruniform\",\n        value: function xavieruniform(size, _ref26) {\n            var fanIn = _ref26.fanIn,\n                fanOut = _ref26.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.uniform(size, { limit: Math.sqrt(6 / (fanIn + fanOut)) }) : NetMath.lecununiform(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"lecunnormal\",\n        value: function lecunnormal(size, _ref27) {\n            var fanIn = _ref27.fanIn;\n\n            return NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(1 / fanIn) });\n        }\n    }, {\n        key: \"lecununiform\",\n        value: function lecununiform(size, _ref28) {\n            var fanIn = _ref28.fanIn;\n\n            return NetMath.uniform(size, { limit: Math.sqrt(3 / fanIn) });\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }, {\n        key: \"standardDeviation\",\n        value: function standardDeviation(arr) {\n            var avg = arr.reduce(function (p, c) {\n                return p + c;\n            }) / arr.length;\n            var diffs = arr.map(function (v) {\n                return v - avg;\n            }).map(function (v) {\n                return Math.pow(v, 2);\n            });\n            return Math.sqrt(diffs.reduce(function (p, c) {\n                return p + c;\n            }) / diffs.length);\n        }\n    }, {\n        key: \"maxNorm\",\n        value: function maxNorm() {\n\n            if (this.maxNormTotal > this.maxNorm) {\n\n                var multiplier = this.maxNorm / (1e-18 + this.maxNormTotal);\n\n                this.layers.forEach(function (layer, li) {\n                    li && layer.neurons.forEach(function (neuron) {\n                        neuron.weights.forEach(function (w, wi) {\n                            return neuron.setWeight(wi, neuron.getWeight(wi) * multiplier);\n                        });\n                    });\n                });\n            }\n\n            this.maxNormTotal = 0;\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (exports.NetMath = NetMath);\n\"use strict\";\n\nvar NetUtil = function () {\n    function NetUtil() {\n        _classCallCheck(this, NetUtil);\n    }\n\n    _createClass(NetUtil, null, [{\n        key: \"format\",\n        value: function format(value) {\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"string\";\n\n            switch (true) {\n\n                case type == \"string\" && typeof value == \"string\":\n                    value = value.replace(/(_|\\s)/g, \"\").toLowerCase();\n                    break;\n\n                case type == \"time\" && typeof value == \"number\":\n                    var date = new Date(value);\n                    var formatted = [];\n\n                    if (value < 1000) {\n                        formatted.push(date.getMilliseconds() + \"ms\");\n                    } else {\n\n                        if (value >= 3600000) formatted.push(date.getHours() + \"h\");\n                        if (value >= 60000) formatted.push(date.getMinutes() + \"m\");\n\n                        formatted.push(date.getSeconds() + \"s\");\n                    }\n\n                    value = formatted.join(\" \");\n                    break;\n            }\n\n            return value;\n        }\n    }, {\n        key: \"shuffle\",\n        value: function shuffle(arr) {\n            for (var i = arr.length; i; i--) {\n                var j = Math.floor(Math.random() * i);\n                var x = arr[i - 1];\n                arr[i - 1] = arr[j];\n                arr[j] = x;\n            }\n        }\n    }, {\n        key: \"addZeroPadding\",\n        value: function addZeroPadding(map, zP) {\n            var extraColumns = [].concat(_toConsumableArray(new Array(zP))).map(function (v) {\n                return 0;\n            });\n            map = map.map(function (row) {\n                return [].concat(_toConsumableArray(extraColumns), _toConsumableArray(row), _toConsumableArray(extraColumns));\n            });\n\n            var extraRows = [].concat(_toConsumableArray(new Array(zP))).map(function (r) {\n                return [].concat(_toConsumableArray(new Array(map.length + zP * 2))).map(function (x) {\n                    return 0;\n                });\n            });\n            return [].concat(_toConsumableArray(extraRows.slice(0)), _toConsumableArray(map), _toConsumableArray(extraRows.slice(0)));\n        }\n    }, {\n        key: \"arrayToMap\",\n        value: function arrayToMap(arr, size) {\n            var map = [];\n\n            for (var i = 0; i < size; i++) {\n                map[i] = [];\n\n                for (var j = 0; j < size; j++) {\n                    map[i][j] = arr[i * size + j];\n                }\n            }\n\n            return map;\n        }\n    }, {\n        key: \"arrayToVolume\",\n        value: function arrayToVolume(arr, channels) {\n\n            var vol = [];\n            var size = Math.sqrt(arr.length / channels);\n            var mapValues = Math.pow(size, 2);\n\n            for (var d = 0; d < Math.floor(arr.length / mapValues); d++) {\n\n                var map = [];\n\n                for (var i = 0; i < size; i++) {\n                    map[i] = [];\n\n                    for (var j = 0; j < size; j++) {\n                        map[i][j] = arr[d * mapValues + i * size + j];\n                    }\n                }\n\n                vol[d] = map;\n            }\n\n            return vol;\n        }\n    }, {\n        key: \"convolve\",\n        value: function convolve(_ref29) {\n            var input = _ref29.input,\n                zeroPadding = _ref29.zeroPadding,\n                weights = _ref29.weights,\n                channels = _ref29.channels,\n                stride = _ref29.stride,\n                bias = _ref29.bias;\n\n\n            var inputVol = NetUtil.arrayToVolume(input, channels);\n            var outputMap = [];\n\n            var paddedLength = inputVol[0].length + zeroPadding * 2;\n            var fSSpread = Math.floor(weights[0].length / 2\n\n            // For each input channels,\n            );for (var di = 0; di < channels; di++) {\n                inputVol[di] = NetUtil.addZeroPadding(inputVol[di], zeroPadding\n                // For each inputY without ZP\n                );for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += stride) {\n                    outputMap[(inputY - fSSpread) / stride] = outputMap[(inputY - fSSpread) / stride] || [];\n                    // For each inputX without zP\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += stride) {\n                        var sum = 0;\n                        // For each weightsY on input\n                        for (var weightsY = 0; weightsY < weights[0].length; weightsY++) {\n                            // For each weightsX on input\n                            for (var weightsX = 0; weightsX < weights[0].length; weightsX++) {\n                                sum += inputVol[di][inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] * weights[di][weightsY][weightsX];\n                            }\n                        }\n\n                        outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] = (outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] || 0) + sum;\n                    }\n                }\n            }\n\n            // Then add bias\n            for (var outY = 0; outY < outputMap.length; outY++) {\n                for (var outX = 0; outX < outputMap.length; outX++) {\n                    outputMap[outY][outX] += bias;\n                }\n            }\n\n            return outputMap;\n        }\n    }, {\n        key: \"buildConvErrorMap\",\n        value: function buildConvErrorMap(layer, filter, filterI) {\n\n            // Clear the existing error values, first\n            for (var row = 0; row < filter.errorMap.length; row++) {\n                for (var col = 0; col < filter.errorMap[0].length; col++) {\n                    filter.errorMap[row][col] = 0;\n                }\n            }\n\n            // Cache / convenience\n            var zeroPadding = layer.nextLayer.zeroPadding;\n\n            var fSSpread = Math.floor(layer.nextLayer.filterSize / 2);\n            var paddedLength = filter.errorMap.length + zeroPadding * 2;\n\n            // Zero pad the error map, to allow easy convoling\n            // TODO, may be more performant to just use if statements when updating, instead\n            filter.errorMap = NetUtil.addZeroPadding(filter.errorMap, zeroPadding\n\n            // For each channel in filter in the next layer which corresponds to this filter\n            );for (var nlFilterI = 0; nlFilterI < layer.nextLayer.size; nlFilterI++) {\n\n                var weights = layer.nextLayer.filters[nlFilterI].weights[filterI];\n                var errorMap = layer.nextLayer.filters[nlFilterI].errorMap;\n\n                // Unconvolve their error map using the weights\n                for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += layer.nextLayer.stride) {\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += layer.nextLayer.stride) {\n\n                        for (var weightsY = 0; weightsY < layer.nextLayer.filterSize; weightsY++) {\n                            for (var weightsX = 0; weightsX < layer.nextLayer.filterSize; weightsX++) {\n\n                                filter.errorMap[inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] += weights[weightsY][weightsX] * errorMap[(inputY - fSSpread) / layer.nextLayer.stride][(inputX - fSSpread) / layer.nextLayer.stride];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Take out the zero padding. Rows:\n            filter.errorMap = filter.errorMap.splice(zeroPadding, filter.errorMap.length - zeroPadding * 2\n\n            // Columns:\n            );for (var emXI = 0; emXI < filter.errorMap.length; emXI++) {\n                filter.errorMap[emXI] = filter.errorMap[emXI].splice(zeroPadding, filter.errorMap[emXI].length - zeroPadding * 2);\n            }\n        }\n    }, {\n        key: \"buildConvDWeights\",\n        value: function buildConvDWeights(layer) {\n\n            var weightsCount = layer.filters[0].weights[0].length;\n            var fSSpread = Math.floor(weightsCount / 2);\n            var channelsCount = layer.filters[0].weights.length;\n\n            // Adding an intermediary step to allow regularization to work\n            var deltaDeltaWeights = [];\n\n            // Filling the deltaDeltaWeights with 0 values\n            for (var weightsY = 0; weightsY < weightsCount; weightsY++) {\n                deltaDeltaWeights[weightsY] = [];\n                for (var weightsX = 0; weightsX < weightsCount; weightsX++) {\n                    deltaDeltaWeights[weightsY][weightsX] = 0;\n                }\n            }\n\n            // For each filter\n            for (var filterI = 0; filterI < layer.filters.length; filterI++) {\n\n                var filter = layer.filters[filterI];\n\n                // Each channel will take the error map and the corresponding inputMap from the input...\n                for (var channelI = 0; channelI < channelsCount; channelI++) {\n\n                    var inputValues = NetUtil.getActivations(layer.prevLayer, channelI, layer.inMapValuesCount);\n                    var inputMap = NetUtil.addZeroPadding(NetUtil.arrayToMap(inputValues, Math.sqrt(layer.inMapValuesCount)), layer.zeroPadding\n\n                    // ...slide the filter with correct stride across the zero-padded inputMap...\n                    );for (var inputY = fSSpread; inputY < inputMap.length - fSSpread; inputY += layer.stride) {\n                        for (var inputX = fSSpread; inputX < inputMap.length - fSSpread; inputX += layer.stride) {\n\n                            // ...and at each location...\n                            for (var _weightsY = 0; _weightsY < weightsCount; _weightsY++) {\n                                for (var _weightsX = 0; _weightsX < weightsCount; _weightsX++) {\n\n                                    var activation = inputMap[inputY - fSSpread + _weightsY][inputX - fSSpread + _weightsX];\n\n                                    // Increment and regularize the delta delta weights by the input activation (later multiplied by the error)\n                                    deltaDeltaWeights[_weightsY][_weightsX] += activation * (1 + ((layer.net.l2 || 0) + (layer.net.l1 || 0)) / layer.net.miniBatchSize * filter.weights[channelI][_weightsY][_weightsX]);\n                                }\n                            }\n\n                            var error = filter.errorMap[(inputY - fSSpread) / layer.stride][(inputX - fSSpread) / layer.stride];\n\n                            // Applying and resetting the deltaDeltaWeights\n                            for (var _weightsY2 = 0; _weightsY2 < weightsCount; _weightsY2++) {\n                                for (var _weightsX2 = 0; _weightsX2 < weightsCount; _weightsX2++) {\n                                    filter.deltaWeights[channelI][_weightsY2][_weightsX2] += deltaDeltaWeights[_weightsY2][_weightsX2] * error;\n                                    deltaDeltaWeights[_weightsY2][_weightsX2] = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Increment the deltaBias by the sum of all errors in the filter\n                for (var eY = 0; eY < filter.errorMap.length; eY++) {\n                    for (var eX = 0; eX < filter.errorMap.length; eX++) {\n                        filter.deltaBias += filter.errorMap[eY][eX];\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getActivations\",\n        value: function getActivations(layer, mapStartI, mapSize) {\n\n            if (arguments.length == 1) {\n\n                var returnArr = [];\n\n                if (layer instanceof FCLayer) {\n\n                    for (var ni = 0; ni < layer.neurons.length; ni++) {\n                        returnArr.push(layer.neurons[ni].activation);\n                    }\n                } else {\n\n                    for (var fi = 0; fi < layer.filters.length; fi++) {\n                        for (var rowI = 0; rowI < layer.filters[fi].activationMap.length; rowI++) {\n                            for (var colI = 0; colI < layer.filters[fi].activationMap[rowI].length; colI++) {\n                                returnArr.push(layer.filters[fi].activationMap[rowI][colI]);\n                            }\n                        }\n                    }\n                }\n\n                return returnArr;\n            } else {\n\n                var _returnArr = [];\n\n                if (layer instanceof FCLayer) {\n\n                    for (var i = mapStartI * mapSize; i < (mapStartI + 1) * mapSize; i++) {\n                        _returnArr.push(layer.neurons[i].activation);\n                    }\n                } else {\n\n                    for (var row = 0; row < layer.filters[mapStartI].activationMap.length; row++) {\n                        for (var col = 0; col < layer.filters[mapStartI].activationMap[row].length; col++) {\n                            _returnArr.push(layer.filters[mapStartI].activationMap[row][col]);\n                        }\n                    }\n                }\n                return _returnArr;\n            }\n        }\n    }]);\n\n    return NetUtil;\n}();\n\ntypeof window == \"undefined\" && (exports.NetUtil = NetUtil);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref30.learningRate,\n            _ref30$layers = _ref30.layers,\n            layers = _ref30$layers === undefined ? [] : _ref30$layers,\n            _ref30$updateFn = _ref30.updateFn,\n            updateFn = _ref30$updateFn === undefined ? \"vanillaupdatefn\" : _ref30$updateFn,\n            _ref30$activation = _ref30.activation,\n            activation = _ref30$activation === undefined ? \"sigmoid\" : _ref30$activation,\n            _ref30$cost = _ref30.cost,\n            cost = _ref30$cost === undefined ? \"meansquarederror\" : _ref30$cost,\n            rmsDecay = _ref30.rmsDecay,\n            rho = _ref30.rho,\n            lreluSlope = _ref30.lreluSlope,\n            eluAlpha = _ref30.eluAlpha,\n            _ref30$dropout = _ref30.dropout,\n            dropout = _ref30$dropout === undefined ? 1 : _ref30$dropout,\n            _ref30$l = _ref30.l2,\n            l2 = _ref30$l === undefined ? true : _ref30$l,\n            _ref30$l2 = _ref30.l1,\n            l1 = _ref30$l2 === undefined ? true : _ref30$l2,\n            maxNorm = _ref30.maxNorm,\n            weightsConfig = _ref30.weightsConfig,\n            channels = _ref30.channels,\n            conv = _ref30.conv;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n        this.error = 0;\n        activation = NetUtil.format(activation);\n        updateFn = NetUtil.format(updateFn);\n        cost = NetUtil.format(cost);\n\n        if (l2) {\n            this.l2 = typeof l2 == \"boolean\" ? 0.001 : l2;\n            this.l2Error = 0;\n        }\n\n        if (l1) {\n            this.l1 = typeof l1 == \"boolean\" ? 0.005 : l1;\n            this.l1Error = 0;\n        }\n\n        if (maxNorm) {\n            this.maxNorm = typeof maxNorm == \"boolean\" && maxNorm ? 1000 : maxNorm;\n            this.maxNormTotal = 0;\n        }\n\n        if (learningRate) this.learningRate = learningRate;\n        if (channels) this.channels = channels;\n\n        if (conv) {\n            if (conv.filterSize != undefined) this.filterSize = conv.filterSize;\n            if (conv.zeroPadding != undefined) this.zeroPadding = conv.zeroPadding;\n            if (conv.stride != undefined) this.stride = conv.stride;\n        }\n\n        // Activation function / Learning Rate\n        switch (updateFn) {\n\n            case \"rmsprop\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n\n                    switch (activation) {\n\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.updateFn = [false, null, undefined].includes(updateFn) ? \"vanillaupdatefn\" : updateFn;\n        this.weightUpdateFn = NetMath[this.updateFn];\n        this.activation = typeof activation == \"function\" ? activation : NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = typeof cost == \"function\" ? cost : NetMath[cost];\n\n        if (this.updateFn == \"rmsprop\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n\n        // Weights distributiom\n        this.weightsConfig = { distribution: \"xavieruniform\" };\n\n        if (weightsConfig != undefined && weightsConfig.distribution) {\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution);\n        }\n\n        if (this.weightsConfig.distribution == \"uniform\") {\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit != undefined ? weightsConfig.limit : 0.1;\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\n            this.weightsConfig.mean = weightsConfig.mean || 0;\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05;\n        }\n\n        if (typeof this.weightsConfig.distribution == \"function\") {\n            this.weightsInitFn = this.weightsConfig.distribution;\n        } else {\n            this.weightsInitFn = NetMath[this.weightsConfig.distribution];\n        }\n\n        // Status\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new FCLayer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof FCLayer || item instanceof ConvLayer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"not-defined\":\n                    this.layers[0] = new FCLayer(input);\n                    this.layers[1] = new FCLayer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new FCLayer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.net = this;\n            layer.activation = layer.activation || this.activation;\n\n            layer.weightsConfig = {};\n            Object.assign(layer.weightsConfig, this.weightsConfig);\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1], layerIndex);\n\n                layer.weightsConfig.fanIn = layer.prevLayer.size;\n                layer.prevLayer.weightsConfig.fanOut = layer.size;\n\n                layer.init();\n                layer.state = \"initialised\";\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\", expected);\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this7 = this;\n\n            var _ref31 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref31$epochs = _ref31.epochs,\n                epochs = _ref31$epochs === undefined ? 1 : _ref31$epochs,\n                callback = _ref31.callback,\n                _ref31$log = _ref31.log,\n                log = _ref31$log === undefined ? true : _ref31$log,\n                _ref31$miniBatchSize = _ref31.miniBatchSize,\n                miniBatchSize = _ref31$miniBatchSize === undefined ? 1 : _ref31$miniBatchSize,\n                _ref31$shuffle = _ref31.shuffle,\n                shuffle = _ref31$shuffle === undefined ? false : _ref31$shuffle;\n\n            this.miniBatchSize = typeof miniBatchSize == \"boolean\" && miniBatchSize ? dataSet[0].expected.length : miniBatchSize;\n\n            if (shuffle) {\n                NetUtil.shuffle(dataSet);\n            }\n\n            if (log) {\n                console.log(\"Training started. Epochs: \" + epochs + \" Batch Size: \" + this.miniBatchSize);\n            }\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    return void reject(\"No data provided\");\n                }\n\n                if (_this7.state != \"initialised\") {\n                    _this7.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this7.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var startTime = Date.now();\n\n                var doEpoch = function doEpoch() {\n                    _this7.epochs++;\n                    _this7.error = 0;\n                    iterationIndex = 0;\n\n                    if (_this7.l2Error != undefined) _this7.l2Error = 0;\n                    if (_this7.l1Error != undefined) _this7.l1Error = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this7.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this7.backward(target);\n\n                    if (++iterationIndex % _this7.miniBatchSize == 0) {\n                        _this7.applyDeltaWeights();\n                        _this7.resetDeltaWeights();\n                    } else if (iterationIndex >= dataSet.length) {\n                        _this7.applyDeltaWeights();\n                    }\n\n                    var iterationError = _this7.cost(target, output);\n                    var elapsed = Date.now() - startTime;\n                    _this7.error += iterationError;\n                    _this7.iterations++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this7.iterations,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this7), 0);\n                    } else {\n                        epochsCounter++;\n\n                        if (log) {\n                            console.log(\"Epoch: \" + _this7.epochs + \" Error: \" + _this7.error / iterationIndex + (_this7.l2 == undefined ? \"\" : \" L2 Error: \" + _this7.l2Error / iterationIndex), \"\\nElapsed: \" + NetUtil.format(elapsed, \"time\") + \" Average Duration: \" + NetUtil.format(elapsed / epochsCounter, \"time\"));\n                        }\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this7.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n\n                            if (log) {\n                                console.log(\"Training finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                            }\n                            resolve();\n                        }\n                    }\n                };\n\n                _this7.resetDeltaWeights();\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this8 = this;\n\n            var _ref32 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref32$log = _ref32.log,\n                log = _ref32$log === undefined ? true : _ref32$log,\n                callback = _ref32.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (log) {\n                    console.log(\"Testing started\");\n                }\n\n                var totalError = 0;\n                var iterationIndex = 0;\n                var startTime = Date.now();\n\n                var testInput = function testInput() {\n\n                    var input = testSet[iterationIndex].input;\n                    var output = _this8.forward(input);\n                    var target = testSet[iterationIndex].expected || testSet[iterationIndex].output;\n                    var elapsed = Date.now() - startTime;\n\n                    var iterationError = _this8.cost(target, output);\n                    totalError += iterationError;\n                    iterationIndex++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: iterationIndex,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < testSet.length) {\n                        setTimeout(testInput.bind(_this8), 0);\n                    } else {\n\n                        if (log) {\n                            console.log(\"Testing finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                        }\n\n                        resolve(totalError / testSet.length);\n                    }\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                return li && layer.resetDeltaWeights();\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n\n            this.layers.forEach(function (layer, li) {\n                return li && layer.applyDeltaWeights();\n            });\n\n            if (this.maxNorm != undefined) {\n                this.maxNormTotal = Math.sqrt(this.maxNormTotal);\n                NetMath.maxNorm.bind(this)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return layer.toJSON();\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            if (data.layers.length != this.layers.length) {\n                throw new Error(\"Mismatched layers (\" + data.layers.length + \" layers in import data, but \" + this.layers.length + \" configured)\");\n            }\n\n            this.resetDeltaWeights();\n            this.layers.forEach(function (layer, li) {\n                return li && layer.fromJSON(data.layers[li], li);\n            });\n        }\n    }], [{\n        key: \"version\",\n        get: function get() {\n            return \"2.0.0\";\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (exports.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron() {\n        _classCallCheck(this, Neuron);\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init() {\n            var _this9 = this;\n\n            var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                updateFn = _ref33.updateFn,\n                activation = _ref33.activation,\n                eluAlpha = _ref33.eluAlpha;\n\n            var size = this.weights.length;\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (updateFn) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.getWeightGain = function (i) {\n                        return _this9.weightGains[i];\n                    };\n                    this.setWeightGain = function (i, v) {\n                        return _this9.weightGains[i] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n                    this.getWeightsCache = function (i) {\n                        return _this9.weightsCache[i];\n                    };\n                    this.setWeightsCache = function (i, v) {\n                        return _this9.weightsCache[i] = v;\n                    };\n\n                    if (updateFn == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.getAdadeltaCache = function (i) {\n                            return _this9.adadeltaCache[i];\n                        };\n                        this.setAdadeltaCache = function (i, v) {\n                            return _this9.adadeltaCache[i] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activation == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activation == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(i) {\n            return this.weights[i];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(i, v) {\n            this.weights[i] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(i) {\n            return this.deltaWeights[i];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(i, v) {\n            this.deltaWeights[i] = v;\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (exports.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}