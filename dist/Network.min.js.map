{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ConvLayer","size","_ref","arguments","filterSize","zeroPadding","stride","this","state","layer","nextLayer","prevLayer","net","filterCount","channels","Math","floor","prevLayerMapWidth","outMapSize","max","sqrt","inMapValuesCount","pow","inZPMapValuesCount","filters","concat","map","f","Filter","_this","forEach","filter","weights","channelWeights","weightsRow","weightsInitFn","weightsConfig","activationMap","row","v","errorMap","dropoutMap","bias","random","init","adaptiveLR","activationConfig","eluAlpha","activations","NetUtil","getActivations","filterI","sumMap","convolve","input","sumY","sumX","dropout","activation","FCLayer","emY","emX","weightIndex","neuronI","neurons","neuron","error","_filterI","buildConvErrorMap","_filterI2","_filter","col","buildConvDWeights","channel","deltaWeights","_row","_col","l2","l2Error","l1","l1Error","abs","weightUpdateFn","bind","maxNorm","maxNormTotal","deltaBias","data","layerIndex","fi","Error","window","exports","n","Neuron","_this2","weightsCount","_this3","ni","dropped","sum","ai","expected","_this4","derivative","reduce","p","c","wi","miniBatchSize","dw","_this5","dwi","Layer","_this6","_ref2","wRow","w","biasGain","weightGains","getWeightGain","_ref3","_ref4","column","setWeightGain","_ref5","_ref6","biasCache","weightsCache","getWeightsCache","_ref7","_ref8","setWeightsCache","_ref9","_ref10","adadeltaBiasCache","adadeltaCache","getAdadeltaCache","_ref11","_ref12","setAdadeltaCache","_ref13","_ref14","m","rreluSlope","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","NetMath","prime","val","exp","lreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","min","rmsDecay","mt","iterations","vt","rho","_newVal","_ref23","limit","_ref24","mean","stdDeviation","x1","x2","r","_ref25","fanIn","fanOut","gaussian","lecunnormal","_ref26","uniform","lecununiform","_ref27","_ref28","values","total","avg","diffs","multiplier","layers","li","setWeight","getWeight","type","replace","toLowerCase","date","Date","formatted","getMilliseconds","getHours","getMinutes","getSeconds","join","j","x","zP","extraColumns","extraRows","slice","vol","mapValues","d","_ref29","inputVol","arrayToVolume","outputMap","paddedLength","fSSpread","di","addZeroPadding","inputY","inputX","weightsY","weightsX","outY","outX","nlFilterI","splice","emXI","channelsCount","deltaDeltaWeights","channelI","inputValues","inputMap","arrayToMap","_weightsY","_weightsX","_weightsY2","_weightsX2","eY","eX","mapStartI","mapSize","returnArr","rowI","colI","_returnArr","Network","_ref30","_ref30$layers","_ref30$adaptiveLR","_ref30$activation","_ref30$cost","cost","_ref30$dropout","_ref30$l","_ref30$l2","epochs","format","includes","distribution","every","item","Number","isInteger","initLayers","ceil","joinLayer","assign","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this7","_ref31","_ref31$epochs","callback","_ref31$log","_ref31$miniBatchSize","_ref31$shuffle","shuffle","Promise","resolve","reject","iterationIndex","epochsCounter","startTime","now","doEpoch","doIteration","hasOwnProperty","applyDeltaWeights","resetDeltaWeights","iterationError","elapsed","setTimeout","testSet","_this8","_ref32","_ref32$log","totalError","testInput","toJSON","fromJSON","get","_this9","_ref33"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ConvLayer = function () {\n    function ConvLayer(size) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            filterSize = _ref.filterSize,\n            zeroPadding = _ref.zeroPadding,\n            stride = _ref.stride;\n\n        _classCallCheck(this, ConvLayer);\n\n        if (filterSize) this.filterSize = filterSize;\n        if (stride) this.stride = stride;\n        if (size) this.size = size;\n\n        this.zeroPadding = zeroPadding;\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(ConvLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n\n            this.prevLayer = layer;\n\n            this.filterSize = this.filterSize || this.net.filterSize || 3;\n            this.stride = this.stride || this.net.stride || 1;\n            this.size = this.size || this.net.filterCount || 4;\n            this.channels = layer instanceof ConvLayer ? layer.size : this.net.channels || 1;\n\n            if (this.zeroPadding == undefined) {\n                this.zeroPadding = this.net.zeroPadding == undefined ? Math.floor(this.filterSize / 2) : this.net.zeroPadding;\n            }\n\n            // Caching calculations\n            var prevLayerMapWidth = layer instanceof ConvLayer ? layer.outMapSize : Math.max(Math.floor(Math.sqrt(layer.size / this.channels)), 1);\n\n            this.inMapValuesCount = Math.pow(prevLayerMapWidth, 2);\n            this.inZPMapValuesCount = Math.pow(prevLayerMapWidth + this.zeroPadding * 2, 2);\n            this.outMapSize = (prevLayerMapWidth - this.filterSize + 2 * this.zeroPadding) / this.stride + 1;\n\n            this.filters = [].concat(_toConsumableArray(new Array(this.size))).map(function (f) {\n                return new Filter();\n            });\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this = this;\n\n            this.filters.forEach(function (filter) {\n\n                filter.weights = [].concat(_toConsumableArray(new Array(_this.channels))).map(function (channelWeights) {\n                    return [].concat(_toConsumableArray(new Array(_this.filterSize))).map(function (weightsRow) {\n                        return _this.net.weightsInitFn(_this.filterSize * (_this.prevLayer.channels || 1), _this.weightsConfig);\n                    });\n                });\n\n                filter.activationMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.errorMap = [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (row) {\n                    return [].concat(_toConsumableArray(new Array(_this.outMapSize))).map(function (v) {\n                        return 0;\n                    });\n                });\n                filter.dropoutMap = filter.activationMap.map(function (row) {\n                    return row.map(function (v) {\n                        return false;\n                    });\n                });\n                filter.bias = Math.random() * 0.2 - 0.1;\n\n                filter.init({\n                    adaptiveLR: _this.net.adaptiveLR,\n                    activationConfig: _this.net.activationConfig,\n                    eluAlpha: _this.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n\n            var activations = NetUtil.getActivations(this.prevLayer);\n\n            for (var filterI = 0; filterI < this.size; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                filter.sumMap = NetUtil.convolve({\n                    input: activations,\n                    zeroPadding: this.zeroPadding,\n                    weights: filter.weights,\n                    channels: this.channels,\n                    stride: this.stride,\n                    bias: filter.bias\n                });\n\n                for (var sumY = 0; sumY < filter.sumMap.length; sumY++) {\n                    for (var sumX = 0; sumX < filter.sumMap.length; sumX++) {\n                        if (this.state == \"training\" && (filter.dropoutMap[sumY][sumX] = Math.random() > this.net.dropout)) {\n                            filter.activationMap[sumY][sumX] = 0;\n                        } else {\n                            filter.activationMap[sumY][sumX] = this.activation(filter.sumMap[sumY][sumX], false, filter) / (this.net.dropout || 1);\n                        }\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"backward\",\n        value: function backward() {\n\n            // First, get the filters' error maps\n            if (this.nextLayer instanceof FCLayer) {\n\n                // For each filter, build the errorMap from the weighted neuron errors in the next FCLayer corresponding to each value in the activation map\n                for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                    var filter = this.filters[filterI];\n\n                    for (var emY = 0; emY < filter.errorMap.length; emY++) {\n                        for (var emX = 0; emX < filter.errorMap.length; emX++) {\n\n                            var weightIndex = filterI * Math.pow(this.outMapSize, 2) + emY * filter.errorMap.length + emX;\n\n                            for (var neuronI = 0; neuronI < this.nextLayer.neurons.length; neuronI++) {\n\n                                var neuron = this.nextLayer.neurons[neuronI];\n                                filter.errorMap[emY][emX] += neuron.error * neuron.weights[weightIndex];\n                            }\n                        }\n                    }\n                }\n            } else {\n                for (var _filterI = 0; _filterI < this.filters.length; _filterI++) {\n                    NetUtil.buildConvErrorMap(this, this.filters[_filterI], _filterI);\n                }\n            }\n\n            // Apply derivative to each error value\n            for (var _filterI2 = 0; _filterI2 < this.filters.length; _filterI2++) {\n\n                var _filter = this.filters[_filterI2];\n\n                for (var row = 0; row < _filter.errorMap.length; row++) {\n                    for (var col = 0; col < _filter.errorMap[0].length; col++) {\n\n                        if (_filter.dropoutMap[row][col]) {\n                            _filter.errorMap[row][col] = 0;\n                        } else {\n                            _filter.errorMap[row][col] *= this.activation(_filter.sumMap[row][col], true, _filter);\n                        }\n                    }\n                }\n            }\n\n            // Then use the error map values to build the delta weights\n            NetUtil.buildConvDWeights(this);\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n                            filter.deltaWeights[channel][row][col] = 0;\n                        }\n                    }\n                }\n\n                for (var _row = 0; _row < filter.dropoutMap.length; _row++) {\n                    for (var _col = 0; _col < filter.dropoutMap[0].length; _col++) {\n                        filter.dropoutMap[_row][_col] = false;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            for (var filterI = 0; filterI < this.filters.length; filterI++) {\n\n                var filter = this.filters[filterI];\n\n                for (var channel = 0; channel < filter.deltaWeights.length; channel++) {\n                    for (var row = 0; row < filter.deltaWeights[0].length; row++) {\n                        for (var col = 0; col < filter.deltaWeights[0][0].length; col++) {\n\n                            if (this.net.l2 != undefined) this.net.l2Error += 0.5 * this.net.l2 * Math.pow(filter.weights[channel][row][col], 2);\n                            if (this.net.l1 != undefined) this.net.l1Error += this.net.l1 * Math.abs(filter.weights[channel][row][col]);\n\n                            filter.weights[channel][row][col] = this.net.weightUpdateFn.bind(this.net, filter.weights[channel][row][col], filter.deltaWeights[channel][row][col], filter, [channel, row, col])();\n\n                            if (this.net.maxNorm != undefined) this.net.maxNormTotal += Math.pow(filter.weights[channel][row][col], 2);\n                        }\n                    }\n                }\n\n                filter.bias = this.net.weightUpdateFn.bind(this.net, filter.bias, filter.deltaBias, filter)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.filters.map(function (filter) {\n                    return {\n                        bias: filter.bias,\n                        weights: filter.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.filters.forEach(function (filter, fi) {\n\n                if (data.weights[fi].weights.length != filter.weights.length) {\n                    throw new Error(\"Mismatched weights depth. Given: \" + data.weights[fi].weights.length + \" Existing: \" + filter.weights.length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                if (data.weights[fi].weights[0].length != filter.weights[0].length) {\n                    throw new Error(\"Mismatched weights size. Given: \" + data.weights[fi].weights[0].length + \" Existing: \" + filter.weights[0].length + \". At: layers[\" + layerIndex + \"], filters[\" + fi + \"]\");\n                }\n\n                filter.bias = data.weights[fi].bias;\n                filter.weights = data.weights[fi].weights;\n            });\n        }\n    }]);\n\n    return ConvLayer;\n}();\n\ntypeof window == \"undefined\" && (exports.ConvLayer = ConvLayer);\n\"use strict\";\n\nvar FCLayer = function () {\n    function FCLayer(size) {\n        _classCallCheck(this, FCLayer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n) {\n            return new Neuron();\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(FCLayer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            this.prevLayer = layer;\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron) {\n\n                var weightsCount = _this2.prevLayer instanceof FCLayer ? _this2.prevLayer.size : _this2.prevLayer.filters.length * Math.pow(_this2.prevLayer.outMapSize, 2);\n\n                neuron.weights = _this2.net.weightsInitFn(weightsCount, _this2.weightsConfig);\n                neuron.bias = Math.random() * 0.2 - 0.1;\n\n                neuron.init({\n                    adaptiveLR: _this2.net.adaptiveLR,\n                    activationConfig: _this2.net.activationConfig,\n                    eluAlpha: _this2.net.eluAlpha\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward() {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n                if (_this3.state == \"training\" && (neuron.dropped = Math.random() > _this3.net.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n\n                    var activations = NetUtil.getActivations(_this3.prevLayer);\n\n                    for (var ai = 0; ai < activations.length; ai++) {\n                        neuron.sum += activations[ai] * neuron.weights[ai];\n                    }\n\n                    neuron.activation = _this3.activation(neuron.sum, false, neuron) / (_this3.net.dropout || 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this4 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this4.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this4.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    var activations = NetUtil.getActivations(_this4.prevLayer);\n\n                    for (var wi = 0; wi < neuron.weights.length; wi++) {\n                        neuron.deltaWeights[wi] += neuron.error * activations[wi] * (1 + ((_this4.net.l2 || 0) + (_this4.net.l1 || 0)) / _this4.net.miniBatchSize * neuron.deltaWeights[wi]);\n                    }\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.neurons.forEach(function (neuron) {\n                return neuron.deltaWeights = neuron.weights.map(function (dw) {\n                    return 0;\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this5 = this;\n\n            this.neurons.forEach(function (neuron) {\n                neuron.deltaWeights.forEach(function (dw, dwi) {\n\n                    if (_this5.net.l2 != undefined) _this5.net.l2Error += 0.5 * _this5.net.l2 * Math.pow(neuron.weights[dwi], 2);\n                    if (_this5.net.l1 != undefined) _this5.net.l1Error += _this5.net.l1 * Math.abs(neuron.weights[dwi]);\n\n                    neuron.weights[dwi] = _this5.net.weightUpdateFn.bind(_this5.net, neuron.weights[dwi], dw, neuron, dwi)();\n\n                    if (_this5.net.maxNorm != undefined) _this5.net.maxNormTotal += Math.pow(neuron.weights[dwi], 2);\n                });\n\n                neuron.bias = _this5.net.weightUpdateFn.bind(_this5.net, neuron.bias, neuron.deltaBias, neuron)();\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                weights: this.neurons.map(function (neuron) {\n                    return {\n                        bias: neuron.bias,\n                        weights: neuron.weights\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data, layerIndex) {\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (data.weights[ni].weights.length != neuron.weights.length) {\n                    throw new Error(\"Mismatched weights count. Given: \" + data.weights[ni].weights.length + \" Existing: \" + neuron.weights.length + \". At layers[\" + layerIndex + \"], neurons[\" + ni + \"]\");\n                }\n\n                neuron.bias = data.weights[ni].bias;\n                neuron.weights = data.weights[ni].weights;\n            });\n        }\n    }]);\n\n    return FCLayer;\n}();\n\nvar Layer = FCLayer;\n\ntypeof window == \"undefined\" && (exports.FCLayer = exports.Layer = FCLayer);\n\"use strict\";\n\nvar Filter = function () {\n    function Filter() {\n        _classCallCheck(this, Filter);\n    }\n\n    _createClass(Filter, [{\n        key: \"init\",\n        value: function init() {\n            var _this6 = this;\n\n            var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                adaptiveLR = _ref2.adaptiveLR,\n                activationConfig = _ref2.activationConfig,\n                eluAlpha = _ref2.eluAlpha;\n\n            var size = this.weights.length;\n\n            this.deltaWeights = this.weights.map(function (channel) {\n                return channel.map(function (wRow) {\n                    return wRow.map(function (w) {\n                        return 0;\n                    });\n                });\n            });\n            this.deltaBias = 0;\n\n            switch (adaptiveLR) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 1;\n                            });\n                        });\n                    });\n                    this.getWeightGain = function (_ref3) {\n                        var _ref4 = _slicedToArray(_ref3, 3),\n                            channel = _ref4[0],\n                            row = _ref4[1],\n                            column = _ref4[2];\n\n                        return _this6.weightGains[channel][row][column];\n                    };\n                    this.setWeightGain = function (_ref5, v) {\n                        var _ref6 = _slicedToArray(_ref5, 3),\n                            channel = _ref6[0],\n                            row = _ref6[1],\n                            column = _ref6[2];\n\n                        return _this6.weightGains[channel][row][column] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = this.weights.map(function (channel) {\n                        return channel.map(function (wRow) {\n                            return wRow.map(function (w) {\n                                return 0;\n                            });\n                        });\n                    });\n                    this.getWeightsCache = function (_ref7) {\n                        var _ref8 = _slicedToArray(_ref7, 3),\n                            channel = _ref8[0],\n                            row = _ref8[1],\n                            column = _ref8[2];\n\n                        return _this6.weightsCache[channel][row][column];\n                    };\n                    this.setWeightsCache = function (_ref9, v) {\n                        var _ref10 = _slicedToArray(_ref9, 3),\n                            channel = _ref10[0],\n                            row = _ref10[1],\n                            column = _ref10[2];\n\n                        return _this6.weightsCache[channel][row][column] = v;\n                    };\n\n                    if (adaptiveLR == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = this.weights.map(function (channel) {\n                            return channel.map(function (wRow) {\n                                return wRow.map(function (w) {\n                                    return 0;\n                                });\n                            });\n                        });\n                        this.getAdadeltaCache = function (_ref11) {\n                            var _ref12 = _slicedToArray(_ref11, 3),\n                                channel = _ref12[0],\n                                row = _ref12[1],\n                                column = _ref12[2];\n\n                            return _this6.adadeltaCache[channel][row][column];\n                        };\n                        this.setAdadeltaCache = function (_ref13, v) {\n                            var _ref14 = _slicedToArray(_ref13, 3),\n                                channel = _ref14[0],\n                                row = _ref14[1],\n                                column = _ref14[2];\n\n                            return _this6.adadeltaCache[channel][row][column] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n            }\n\n            if (activationConfig == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activationConfig == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(_ref15) {\n            var _ref16 = _slicedToArray(_ref15, 3),\n                channel = _ref16[0],\n                row = _ref16[1],\n                column = _ref16[2];\n\n            return this.weights[channel][row][column];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(_ref17, v) {\n            var _ref18 = _slicedToArray(_ref17, 3),\n                channel = _ref18[0],\n                row = _ref18[1],\n                column = _ref18[2];\n\n            this.weights[channel][row][column] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(_ref19) {\n            var _ref20 = _slicedToArray(_ref19, 3),\n                channel = _ref20[0],\n                row = _ref20[1],\n                column = _ref20[2];\n\n            return this.deltaWeights[channel][row][column];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(_ref21, v) {\n            var _ref22 = _slicedToArray(_ref21, 3),\n                channel = _ref22[0],\n                row = _ref22[1],\n                column = _ref22[2];\n\n            this.deltaWeights[channel][row][column] = v;\n        }\n    }]);\n\n    return Filter;\n}();\n\ntypeof window == \"undefined\" && (exports.Filter = Filter);\n\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope : Math.max(this.lreluSlope * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossentropy\",\n        value: function crossentropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meansquarederror\",\n        value: function meansquarederror(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"noadaptivelr\",\n        value: function noadaptivelr(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.getWeightGain(weightI));\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.max(neuron.getWeightGain(weightI) * 0.95, 0.5));\n                } else {\n                    neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n                }\n            } else {\n                if (weightI != null) {\n                    neuron.setWeightGain(weightI, Math.min(neuron.getWeightGain(weightI) + 0.05, 5));\n                } else {\n                    neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n                }\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, neuron.getWeightsCache(weightI) + Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache += Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"rmsprop\",\n        value: function rmsprop(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rmsDecay * neuron.getWeightsCache(weightI) + (1 - this.rmsDecay) * Math.pow(deltaValue, 2));\n            } else {\n                neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.getWeightsCache(weightI) : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.setWeightsCache(weightI, this.rho * neuron.getWeightsCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                var newVal = value + Math.sqrt((neuron.getAdadeltaCache(weightI) + 1e-6) / (neuron.getWeightsCache(weightI) + 1e-6)) * deltaValue;\n                neuron.setAdadeltaCache(weightI, this.rho * neuron.getAdadeltaCache(weightI) + (1 - this.rho) * Math.pow(deltaValue, 2));\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Weights init\n\n    }, {\n        key: \"uniform\",\n        value: function uniform(size, _ref23) {\n            var limit = _ref23.limit;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                return Math.random() * 2 * limit - limit;\n            });\n        }\n    }, {\n        key: \"gaussian\",\n        value: function gaussian(size, _ref24) {\n            var mean = _ref24.mean,\n                stdDeviation = _ref24.stdDeviation;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function () {\n                // Polar Box Muller\n                var x1 = void 0,\n                    x2 = void 0,\n                    r = void 0,\n                    y = void 0;\n\n                do {\n                    x1 = 2 * Math.random() - 1;\n                    x2 = 2 * Math.random() - 1;\n                    r = Math.pow(x1, 2) + Math.pow(x2, 2);\n                } while (r >= 1 || !r);\n\n                return mean + x1 * Math.sqrt(-2 * Math.log(r) / r) * stdDeviation;\n            });\n        }\n    }, {\n        key: \"xaviernormal\",\n        value: function xaviernormal(size, _ref25) {\n            var fanIn = _ref25.fanIn,\n                fanOut = _ref25.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(2 / (fanIn + fanOut)) }) : NetMath.lecunnormal(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"xavieruniform\",\n        value: function xavieruniform(size, _ref26) {\n            var fanIn = _ref26.fanIn,\n                fanOut = _ref26.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.uniform(size, { limit: Math.sqrt(6 / (fanIn + fanOut)) }) : NetMath.lecununiform(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"lecunnormal\",\n        value: function lecunnormal(size, _ref27) {\n            var fanIn = _ref27.fanIn;\n\n            return NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(1 / fanIn) });\n        }\n    }, {\n        key: \"lecununiform\",\n        value: function lecununiform(size, _ref28) {\n            var fanIn = _ref28.fanIn;\n\n            return NetMath.uniform(size, { limit: Math.sqrt(3 / fanIn) });\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }, {\n        key: \"standardDeviation\",\n        value: function standardDeviation(arr) {\n            var avg = arr.reduce(function (p, c) {\n                return p + c;\n            }) / arr.length;\n            var diffs = arr.map(function (v) {\n                return v - avg;\n            }).map(function (v) {\n                return Math.pow(v, 2);\n            });\n            return Math.sqrt(diffs.reduce(function (p, c) {\n                return p + c;\n            }) / diffs.length);\n        }\n    }, {\n        key: \"maxNorm\",\n        value: function maxNorm() {\n\n            if (this.maxNormTotal > this.maxNorm) {\n\n                var multiplier = this.maxNorm / (1e-18 + this.maxNormTotal);\n\n                this.layers.forEach(function (layer, li) {\n                    li && layer.neurons.forEach(function (neuron) {\n                        neuron.weights.forEach(function (w, wi) {\n                            return neuron.setWeight(wi, neuron.getWeight(wi) * multiplier);\n                        });\n                    });\n                });\n            }\n\n            this.maxNormTotal = 0;\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (exports.NetMath = NetMath);\n\"use strict\";\n\nvar NetUtil = function () {\n    function NetUtil() {\n        _classCallCheck(this, NetUtil);\n    }\n\n    _createClass(NetUtil, null, [{\n        key: \"format\",\n        value: function format(value) {\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"string\";\n\n            switch (true) {\n\n                case type == \"string\" && typeof value == \"string\":\n                    value = value.replace(/(_|\\s)/g, \"\").toLowerCase();\n                    break;\n\n                case type == \"time\" && typeof value == \"number\":\n                    var date = new Date(value);\n                    var formatted = [];\n\n                    if (value < 1000) {\n                        formatted.push(date.getMilliseconds() + \"ms\");\n                    } else {\n\n                        if (value >= 3600000) formatted.push(date.getHours() + \"h\");\n                        if (value >= 60000) formatted.push(date.getMinutes() + \"m\");\n\n                        formatted.push(date.getSeconds() + \"s\");\n                    }\n\n                    value = formatted.join(\" \");\n                    break;\n            }\n\n            return value;\n        }\n    }, {\n        key: \"shuffle\",\n        value: function shuffle(arr) {\n            for (var i = arr.length; i; i--) {\n                var j = Math.floor(Math.random() * i);\n                var x = arr[i - 1];\n                arr[i - 1] = arr[j];\n                arr[j] = x;\n            }\n        }\n    }, {\n        key: \"addZeroPadding\",\n        value: function addZeroPadding(map, zP) {\n            var extraColumns = [].concat(_toConsumableArray(new Array(zP))).map(function (v) {\n                return 0;\n            });\n            map = map.map(function (row) {\n                return [].concat(_toConsumableArray(extraColumns), _toConsumableArray(row), _toConsumableArray(extraColumns));\n            });\n\n            var extraRows = [].concat(_toConsumableArray(new Array(zP))).map(function (r) {\n                return [].concat(_toConsumableArray(new Array(map.length + zP * 2))).map(function (x) {\n                    return 0;\n                });\n            });\n            return [].concat(_toConsumableArray(extraRows.slice(0)), _toConsumableArray(map), _toConsumableArray(extraRows.slice(0)));\n        }\n    }, {\n        key: \"arrayToMap\",\n        value: function arrayToMap(arr, size) {\n            var map = [];\n\n            for (var i = 0; i < size; i++) {\n                map[i] = [];\n\n                for (var j = 0; j < size; j++) {\n                    map[i][j] = arr[i * size + j];\n                }\n            }\n\n            return map;\n        }\n    }, {\n        key: \"arrayToVolume\",\n        value: function arrayToVolume(arr, channels) {\n\n            var vol = [];\n            var size = Math.sqrt(arr.length / channels);\n            var mapValues = Math.pow(size, 2);\n\n            for (var d = 0; d < Math.floor(arr.length / mapValues); d++) {\n\n                var map = [];\n\n                for (var i = 0; i < size; i++) {\n                    map[i] = [];\n\n                    for (var j = 0; j < size; j++) {\n                        map[i][j] = arr[d * mapValues + i * size + j];\n                    }\n                }\n\n                vol[d] = map;\n            }\n\n            return vol;\n        }\n    }, {\n        key: \"convolve\",\n        value: function convolve(_ref29) {\n            var input = _ref29.input,\n                zeroPadding = _ref29.zeroPadding,\n                weights = _ref29.weights,\n                channels = _ref29.channels,\n                stride = _ref29.stride,\n                bias = _ref29.bias;\n\n\n            var inputVol = NetUtil.arrayToVolume(input, channels);\n            var outputMap = [];\n\n            var paddedLength = inputVol[0].length + zeroPadding * 2;\n            var fSSpread = Math.floor(weights[0].length / 2\n\n            // For each input channels,\n            );for (var di = 0; di < channels; di++) {\n                inputVol[di] = NetUtil.addZeroPadding(inputVol[di], zeroPadding\n                // For each inputY without ZP\n                );for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += stride) {\n                    outputMap[(inputY - fSSpread) / stride] = outputMap[(inputY - fSSpread) / stride] || [];\n                    // For each inputX without zP\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += stride) {\n                        var sum = 0;\n                        // For each weightsY on input\n                        for (var weightsY = 0; weightsY < weights[0].length; weightsY++) {\n                            // For each weightsX on input\n                            for (var weightsX = 0; weightsX < weights[0].length; weightsX++) {\n                                sum += inputVol[di][inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] * weights[di][weightsY][weightsX];\n                            }\n                        }\n\n                        outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] = (outputMap[(inputY - fSSpread) / stride][(inputX - fSSpread) / stride] || 0) + sum;\n                    }\n                }\n            }\n\n            // Then add bias\n            for (var outY = 0; outY < outputMap.length; outY++) {\n                for (var outX = 0; outX < outputMap.length; outX++) {\n                    outputMap[outY][outX] += bias;\n                }\n            }\n\n            return outputMap;\n        }\n    }, {\n        key: \"buildConvErrorMap\",\n        value: function buildConvErrorMap(layer, filter, filterI) {\n\n            // Clear the existing error values, first\n            for (var row = 0; row < filter.errorMap.length; row++) {\n                for (var col = 0; col < filter.errorMap[0].length; col++) {\n                    filter.errorMap[row][col] = 0;\n                }\n            }\n\n            // Cache / convenience\n            var zeroPadding = layer.nextLayer.zeroPadding;\n\n            var fSSpread = Math.floor(layer.nextLayer.filterSize / 2);\n            var paddedLength = filter.errorMap.length + zeroPadding * 2;\n\n            // Zero pad the error map, to allow easy convoling\n            // TODO, may be more performant to just use if statements when updating, instead\n            filter.errorMap = NetUtil.addZeroPadding(filter.errorMap, zeroPadding\n\n            // For each channel in filter in the next layer which corresponds to this filter\n            );for (var nlFilterI = 0; nlFilterI < layer.nextLayer.size; nlFilterI++) {\n\n                var weights = layer.nextLayer.filters[nlFilterI].weights[filterI];\n                var errorMap = layer.nextLayer.filters[nlFilterI].errorMap;\n\n                // Unconvolve their error map using the weights\n                for (var inputY = fSSpread; inputY < paddedLength - fSSpread; inputY += layer.nextLayer.stride) {\n                    for (var inputX = fSSpread; inputX < paddedLength - fSSpread; inputX += layer.nextLayer.stride) {\n\n                        for (var weightsY = 0; weightsY < layer.nextLayer.filterSize; weightsY++) {\n                            for (var weightsX = 0; weightsX < layer.nextLayer.filterSize; weightsX++) {\n\n                                filter.errorMap[inputY + (weightsY - fSSpread)][inputX + (weightsX - fSSpread)] += weights[weightsY][weightsX] * errorMap[(inputY - fSSpread) / layer.nextLayer.stride][(inputX - fSSpread) / layer.nextLayer.stride];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Take out the zero padding. Rows:\n            filter.errorMap = filter.errorMap.splice(zeroPadding, filter.errorMap.length - zeroPadding * 2\n\n            // Columns:\n            );for (var emXI = 0; emXI < filter.errorMap.length; emXI++) {\n                filter.errorMap[emXI] = filter.errorMap[emXI].splice(zeroPadding, filter.errorMap[emXI].length - zeroPadding * 2);\n            }\n        }\n    }, {\n        key: \"buildConvDWeights\",\n        value: function buildConvDWeights(layer) {\n\n            var weightsCount = layer.filters[0].weights[0].length;\n            var fSSpread = Math.floor(weightsCount / 2);\n            var channelsCount = layer.filters[0].weights.length;\n\n            // Adding an intermediary step to allow regularization to work\n            var deltaDeltaWeights = [];\n\n            // Filling the deltaDeltaWeights with 0 values\n            for (var weightsY = 0; weightsY < weightsCount; weightsY++) {\n                deltaDeltaWeights[weightsY] = [];\n                for (var weightsX = 0; weightsX < weightsCount; weightsX++) {\n                    deltaDeltaWeights[weightsY][weightsX] = 0;\n                }\n            }\n\n            // For each filter\n            for (var filterI = 0; filterI < layer.filters.length; filterI++) {\n\n                var filter = layer.filters[filterI];\n\n                // Each channel will take the error map and the corresponding inputMap from the input...\n                for (var channelI = 0; channelI < channelsCount; channelI++) {\n\n                    var inputValues = NetUtil.getActivations(layer.prevLayer, channelI, layer.inMapValuesCount);\n                    var inputMap = NetUtil.addZeroPadding(NetUtil.arrayToMap(inputValues, Math.sqrt(layer.inMapValuesCount)), layer.zeroPadding\n\n                    // ...slide the filter with correct stride across the zero-padded inputMap...\n                    );for (var inputY = fSSpread; inputY < inputMap.length - fSSpread; inputY += layer.stride) {\n                        for (var inputX = fSSpread; inputX < inputMap.length - fSSpread; inputX += layer.stride) {\n\n                            // ...and at each location...\n                            for (var _weightsY = 0; _weightsY < weightsCount; _weightsY++) {\n                                for (var _weightsX = 0; _weightsX < weightsCount; _weightsX++) {\n\n                                    var activation = inputMap[inputY - fSSpread + _weightsY][inputX - fSSpread + _weightsX];\n\n                                    // Increment and regularize the delta delta weights by the input activation (later multiplied by the error)\n                                    deltaDeltaWeights[_weightsY][_weightsX] += activation * (1 + ((layer.net.l2 || 0) + (layer.net.l1 || 0)) / layer.net.miniBatchSize * filter.weights[channelI][_weightsY][_weightsX]);\n                                }\n                            }\n\n                            var error = filter.errorMap[(inputY - fSSpread) / layer.stride][(inputX - fSSpread) / layer.stride];\n\n                            // Applying and resetting the deltaDeltaWeights\n                            for (var _weightsY2 = 0; _weightsY2 < weightsCount; _weightsY2++) {\n                                for (var _weightsX2 = 0; _weightsX2 < weightsCount; _weightsX2++) {\n                                    filter.deltaWeights[channelI][_weightsY2][_weightsX2] += deltaDeltaWeights[_weightsY2][_weightsX2] * error;\n                                    deltaDeltaWeights[_weightsY2][_weightsX2] = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Increment the deltaBias by the sum of all errors in the filter\n                for (var eY = 0; eY < filter.errorMap.length; eY++) {\n                    for (var eX = 0; eX < filter.errorMap.length; eX++) {\n                        filter.deltaBias += filter.errorMap[eY][eX];\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getActivations\",\n        value: function getActivations(layer, mapStartI, mapSize) {\n\n            if (arguments.length == 1) {\n\n                var returnArr = [];\n\n                if (layer instanceof FCLayer) {\n\n                    for (var ni = 0; ni < layer.neurons.length; ni++) {\n                        returnArr.push(layer.neurons[ni].activation);\n                    }\n                } else {\n\n                    for (var fi = 0; fi < layer.filters.length; fi++) {\n                        for (var rowI = 0; rowI < layer.filters[fi].activationMap.length; rowI++) {\n                            for (var colI = 0; colI < layer.filters[fi].activationMap[rowI].length; colI++) {\n                                returnArr.push(layer.filters[fi].activationMap[rowI][colI]);\n                            }\n                        }\n                    }\n                }\n\n                return returnArr;\n            } else {\n\n                var _returnArr = [];\n\n                if (layer instanceof FCLayer) {\n\n                    for (var i = mapStartI * mapSize; i < (mapStartI + 1) * mapSize; i++) {\n                        _returnArr.push(layer.neurons[i].activation);\n                    }\n                } else {\n\n                    for (var row = 0; row < layer.filters[mapStartI].activationMap.length; row++) {\n                        for (var col = 0; col < layer.filters[mapStartI].activationMap[row].length; col++) {\n                            _returnArr.push(layer.filters[mapStartI].activationMap[row][col]);\n                        }\n                    }\n                }\n                return _returnArr;\n            }\n        }\n    }]);\n\n    return NetUtil;\n}();\n\ntypeof window == \"undefined\" && (exports.NetUtil = NetUtil);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref30.learningRate,\n            _ref30$layers = _ref30.layers,\n            layers = _ref30$layers === undefined ? [] : _ref30$layers,\n            _ref30$adaptiveLR = _ref30.adaptiveLR,\n            adaptiveLR = _ref30$adaptiveLR === undefined ? \"noadaptivelr\" : _ref30$adaptiveLR,\n            _ref30$activation = _ref30.activation,\n            activation = _ref30$activation === undefined ? \"sigmoid\" : _ref30$activation,\n            _ref30$cost = _ref30.cost,\n            cost = _ref30$cost === undefined ? \"meansquarederror\" : _ref30$cost,\n            rmsDecay = _ref30.rmsDecay,\n            rho = _ref30.rho,\n            lreluSlope = _ref30.lreluSlope,\n            eluAlpha = _ref30.eluAlpha,\n            _ref30$dropout = _ref30.dropout,\n            dropout = _ref30$dropout === undefined ? 1 : _ref30$dropout,\n            _ref30$l = _ref30.l2,\n            l2 = _ref30$l === undefined ? true : _ref30$l,\n            _ref30$l2 = _ref30.l1,\n            l1 = _ref30$l2 === undefined ? true : _ref30$l2,\n            maxNorm = _ref30.maxNorm,\n            weightsConfig = _ref30.weightsConfig,\n            filterSize = _ref30.filterSize,\n            zeroPadding = _ref30.zeroPadding,\n            stride = _ref30.stride,\n            channels = _ref30.channels,\n            filterCount = _ref30.filterCount;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n        this.error = 0;\n        activation = NetUtil.format(activation);\n        adaptiveLR = NetUtil.format(adaptiveLR);\n        cost = NetUtil.format(cost);\n\n        if (l2) {\n            this.l2 = typeof l2 == \"boolean\" ? 0.001 : l2;\n            this.l2Error = 0;\n        }\n\n        if (l1) {\n            this.l1 = typeof l1 == \"boolean\" ? 0.005 : l1;\n            this.l1Error = 0;\n        }\n\n        if (maxNorm) {\n            this.maxNorm = typeof maxNorm == \"boolean\" && maxNorm ? 1000 : maxNorm;\n            this.maxNormTotal = 0;\n        }\n\n        if (learningRate) this.learningRate = learningRate;\n        if (filterSize) this.filterSize = filterSize;\n        if (zeroPadding) this.zeroPadding = zeroPadding;\n        if (stride) this.stride = stride;\n        if (channels) this.channels = channels;\n        if (filterCount) this.filterCount = filterCount;\n\n        // Activation function / Learning Rate\n        switch (adaptiveLR) {\n\n            case \"rmsprop\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n\n                    switch (activation) {\n\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.adaptiveLR = [false, null, undefined].includes(adaptiveLR) ? \"noadaptivelr\" : adaptiveLR;\n        this.weightUpdateFn = NetMath[this.adaptiveLR];\n        this.activation = typeof activation == \"function\" ? activation : NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = typeof cost == \"function\" ? cost : NetMath[cost];\n\n        if (this.adaptiveLR == \"rmsprop\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        if (activation == \"lrelu\") {\n            this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        } else if (activation == \"elu\") {\n            this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n        }\n\n        // Weights distributiom\n        this.weightsConfig = { distribution: \"xavieruniform\" };\n\n        if (weightsConfig != undefined && weightsConfig.distribution) {\n            this.weightsConfig.distribution = NetUtil.format(weightsConfig.distribution);\n        }\n\n        if (this.weightsConfig.distribution == \"uniform\") {\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit != undefined ? weightsConfig.limit : 0.1;\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\n            this.weightsConfig.mean = weightsConfig.mean || 0;\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05;\n        }\n\n        if (typeof this.weightsConfig.distribution == \"function\") {\n            this.weightsInitFn = this.weightsConfig.distribution;\n        } else {\n            this.weightsInitFn = NetMath[this.weightsConfig.distribution];\n        }\n\n        // Status\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new FCLayer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof FCLayer || item instanceof ConvLayer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"not-defined\":\n                    this.layers[0] = new FCLayer(input);\n                    this.layers[1] = new FCLayer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new FCLayer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.net = this;\n            layer.activation = this.activation;\n\n            layer.weightsConfig = {};\n            Object.assign(layer.weightsConfig, this.weightsConfig);\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1]);\n\n                layer.weightsConfig.fanIn = layer.prevLayer.size;\n                layer.prevLayer.weightsConfig.fanOut = layer.size;\n\n                layer.init();\n                layer.state = \"initialised\";\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\", expected);\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this7 = this;\n\n            var _ref31 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref31$epochs = _ref31.epochs,\n                epochs = _ref31$epochs === undefined ? 1 : _ref31$epochs,\n                callback = _ref31.callback,\n                _ref31$log = _ref31.log,\n                log = _ref31$log === undefined ? true : _ref31$log,\n                _ref31$miniBatchSize = _ref31.miniBatchSize,\n                miniBatchSize = _ref31$miniBatchSize === undefined ? 1 : _ref31$miniBatchSize,\n                _ref31$shuffle = _ref31.shuffle,\n                shuffle = _ref31$shuffle === undefined ? false : _ref31$shuffle;\n\n            this.miniBatchSize = typeof miniBatchSize == \"boolean\" && miniBatchSize ? dataSet[0].expected.length : miniBatchSize;\n\n            if (shuffle) {\n                NetUtil.shuffle(dataSet);\n            }\n\n            if (log) {\n                console.log(\"Training started. Epochs: \" + epochs + \" Batch Size: \" + this.miniBatchSize);\n            }\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    return void reject(\"No data provided\");\n                }\n\n                if (_this7.state != \"initialised\") {\n                    _this7.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this7.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var startTime = Date.now();\n\n                var doEpoch = function doEpoch() {\n                    _this7.epochs++;\n                    _this7.error = 0;\n                    iterationIndex = 0;\n\n                    if (_this7.l2Error != undefined) _this7.l2Error = 0;\n                    if (_this7.l1Error != undefined) _this7.l1Error = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this7.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this7.backward(target);\n\n                    if (++iterationIndex % _this7.miniBatchSize == 0) {\n                        _this7.applyDeltaWeights();\n                        _this7.resetDeltaWeights();\n                    } else if (iterationIndex >= dataSet.length) {\n                        _this7.applyDeltaWeights();\n                    }\n\n                    var iterationError = _this7.cost(target, output);\n                    var elapsed = Date.now() - startTime;\n                    _this7.error += iterationError;\n                    _this7.iterations++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this7.iterations,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this7), 0);\n                    } else {\n                        epochsCounter++;\n\n                        if (log) {\n                            console.log(\"Epoch: \" + _this7.epochs + \" Error: \" + _this7.error / iterationIndex + (_this7.l2 == undefined ? \"\" : \" L2 Error: \" + _this7.l2Error / iterationIndex), \"\\nElapsed: \" + NetUtil.format(elapsed, \"time\") + \" Average Duration: \" + NetUtil.format(elapsed / epochsCounter, \"time\"));\n                        }\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this7.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n\n                            if (log) {\n                                console.log(\"Training finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                            }\n                            resolve();\n                        }\n                    }\n                };\n\n                _this7.resetDeltaWeights();\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this8 = this;\n\n            var _ref32 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref32$log = _ref32.log,\n                log = _ref32$log === undefined ? true : _ref32$log,\n                callback = _ref32.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (log) {\n                    console.log(\"Testing started\");\n                }\n\n                var totalError = 0;\n                var iterationIndex = 0;\n                var startTime = Date.now();\n\n                var testInput = function testInput() {\n\n                    var input = testSet[iterationIndex].input;\n                    var output = _this8.forward(input);\n                    var target = testSet[iterationIndex].expected || testSet[iterationIndex].output;\n                    var elapsed = Date.now() - startTime;\n\n                    var iterationError = _this8.cost(target, output);\n                    totalError += iterationError;\n                    iterationIndex++;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: iterationIndex,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    if (iterationIndex < testSet.length) {\n                        setTimeout(testInput.bind(_this8), 0);\n                    } else {\n\n                        if (log) {\n                            console.log(\"Testing finished. Total time: \" + NetUtil.format(elapsed, \"time\") + \"  Average iteration time: \" + NetUtil.format(elapsed / iterationIndex, \"time\"));\n                        }\n\n                        resolve(totalError / testSet.length);\n                    }\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                return li && layer.resetDeltaWeights();\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n\n            this.layers.forEach(function (layer, li) {\n                return li && layer.applyDeltaWeights();\n            });\n\n            if (this.maxNorm != undefined) {\n                this.maxNormTotal = Math.sqrt(this.maxNormTotal);\n                NetMath.maxNorm.bind(this)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return layer.toJSON();\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            if (data.layers.length != this.layers.length) {\n                throw new Error(\"Mismatched layers (\" + data.layers.length + \" layers in import data, but \" + this.layers.length + \" configured)\");\n            }\n\n            this.resetDeltaWeights();\n            this.layers.forEach(function (layer, li) {\n                return li && layer.fromJSON(data.layers[li], li);\n            });\n        }\n    }], [{\n        key: \"version\",\n        get: function get() {\n            return \"2.0.0\";\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (exports.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron() {\n        _classCallCheck(this, Neuron);\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init() {\n            var _this9 = this;\n\n            var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                adaptiveLR = _ref33.adaptiveLR,\n                activationConfig = _ref33.activationConfig,\n                eluAlpha = _ref33.eluAlpha;\n\n            var size = this.weights.length;\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (adaptiveLR) {\n\n                case \"gain\":\n                    this.biasGain = 1;\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.getWeightGain = function (i) {\n                        return _this9.weightGains[i];\n                    };\n                    this.setWeightGain = function (i, v) {\n                        return _this9.weightGains[i] = v;\n                    };\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n                    this.getWeightsCache = function (i) {\n                        return _this9.weightsCache[i];\n                    };\n                    this.setWeightsCache = function (i, v) {\n                        return _this9.weightsCache[i] = v;\n                    };\n\n                    if (adaptiveLR == \"adadelta\") {\n                        this.adadeltaBiasCache = 0;\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.getAdadeltaCache = function (i) {\n                            return _this9.adadeltaCache[i];\n                        };\n                        this.setAdadeltaCache = function (i, v) {\n                            return _this9.adadeltaCache[i] = v;\n                        };\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activationConfig == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activationConfig == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }, {\n        key: \"getWeight\",\n        value: function getWeight(i) {\n            return this.weights[i];\n        }\n    }, {\n        key: \"setWeight\",\n        value: function setWeight(i, v) {\n            this.weights[i] = v;\n        }\n    }, {\n        key: \"getDeltaWeight\",\n        value: function getDeltaWeight(i) {\n            return this.deltaWeights[i];\n        }\n    }, {\n        key: \"setDeltaWeight\",\n        value: function setDeltaWeight(i, v) {\n            this.deltaWeights[i] = v;\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (exports.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}