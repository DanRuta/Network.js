{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Layer","size","importedData","this","neurons","concat","map","n","ni","Neuron","undefined","value","layer","nextLayer","_this","prevLayer","forEach","neuron","init","adaptiveLR","activationConfig","data","_this2","sum","bias","pNeuron","pni","activation","weights","expected","_this3","error","derivative","reduce","p","c","weight","wi","deltaWeights","deltaBias","window","global","NetMath","prime","val","Math","exp","pow","max","lreluSlope","abs","rreluSlope","sech","tanh","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","biasGain","weightGains","min","weightsCache","biasCache","sqrt","rmsDecay","m","mt","iterations","v","vt","rho","adadeltaCache","_newVal","adadeltaBiasCache","values","total","Network","_ref","arguments","_ref$layers","layers","_ref$adaptiveLR","_ref$activation","_ref$cost","cost","state","epochs","includes","weightUpdateFn","bind","every","item","Number","isInteger","initLayers","definedLayers","Error","input","_this4","li","hidden","round","ceil","joinLayer","layerIndex","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this5","_ref2","_ref2$epochs","callback","Promise","resolve","reject","iterationIndex","epochsCounter","doEpoch","doIteration","hasOwnProperty","resetDeltaWeights","applyDeltaWeights","iterationError","setTimeout","testSet","_this6","totalError","testIteration","testInput","dw","_this7","dwi","imported","_ref3","random"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Layer = function () {\n    function Layer(size, importedData) {\n        _classCallCheck(this, Layer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n, ni) {\n            return new Neuron(importedData ? importedData[ni] : undefined);\n        });\n    }\n\n    _createClass(Layer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            var _this = this;\n\n            this.prevLayer = layer;\n            this.neurons.forEach(function (neuron) {\n                return neuron.init(layer.size, {\n                    adaptiveLR: _this.adaptiveLR,\n                    activationConfig: _this.activationConfig\n                });\n            });\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                neuron.sum = neuron.bias;\n                _this2.prevLayer.neurons.forEach(function (pNeuron, pni) {\n                    return neuron.sum += pNeuron.activation * neuron.weights[pni];\n                });\n                neuron.activation = _this2.activation(neuron.sum, false, neuron);\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (typeof expected !== \"undefined\") {\n                    neuron.error = expected[ni] - neuron.activation;\n                } else {\n                    neuron.derivative = _this3.activation(neuron.sum, true, neuron);\n                    neuron.error = neuron.derivative * _this3.nextLayer.neurons.map(function (n) {\n                        return n.error * n.weights[ni];\n                    }).reduce(function (p, c) {\n                        return p + c;\n                    }, 0);\n                }\n\n                neuron.weights.forEach(function (weight, wi) {\n                    neuron.deltaWeights[wi] += neuron.error * _this3.prevLayer.neurons[wi].activation;\n                });\n\n                neuron.deltaBias = neuron.error;\n            });\n        }\n    }]);\n\n    return Layer;\n}();\n\ntypeof window == \"undefined\" && (global.Layer = Layer);\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope : Math.max(this.lreluSlope * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossEntropy\",\n        value: function crossEntropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meanSquaredError\",\n        value: function meanSquaredError(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"noAdaptiveLR\",\n        value: function noAdaptiveLR(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.weightGains[weightI]);\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) neuron.weightGains[weightI] = Math.max(neuron.weightGains[weightI] * 0.95, 0.5);else neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n            } else {\n                if (weightI != null) neuron.weightGains[weightI] = Math.min(neuron.weightGains[weightI] + 0.05, 5);else neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] += Math.pow(deltaValue, 2);else neuron.biasCache += Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"RMSProp\",\n        value: function RMSProp(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] = this.rmsDecay * neuron.weightsCache[weightI] + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);else neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.weightsCache[weightI] = this.rho * neuron.weightsCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var newVal = value + Math.sqrt((neuron.adadeltaCache[weightI] + 1e-6) / (neuron.weightsCache[weightI] + 1e-6)) * deltaValue;\n                neuron.adadeltaCache[weightI] = this.rho * neuron.adadeltaCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (global.NetMath = NetMath);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref.learningRate,\n            _ref$layers = _ref.layers,\n            layers = _ref$layers === undefined ? [] : _ref$layers,\n            _ref$adaptiveLR = _ref.adaptiveLR,\n            adaptiveLR = _ref$adaptiveLR === undefined ? \"noAdaptiveLR\" : _ref$adaptiveLR,\n            _ref$activation = _ref.activation,\n            activation = _ref$activation === undefined ? \"sigmoid\" : _ref$activation,\n            _ref$cost = _ref.cost,\n            cost = _ref$cost === undefined ? \"crossEntropy\" : _ref$cost,\n            rmsDecay = _ref.rmsDecay,\n            rho = _ref.rho,\n            lreluSlope = _ref.lreluSlope;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n\n        if (learningRate != null) {\n            this.learningRate = learningRate;\n        }\n\n        switch (true) {\n\n            case adaptiveLR == \"RMSProp\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case adaptiveLR == \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case adaptiveLR == \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n                    switch (activation) {\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                            this.learningRate = 0.01;\n                            break;\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.adaptiveLR = [false, null, undefined].includes(adaptiveLR) ? \"noAdaptiveLR\" : adaptiveLR;\n        this.weightUpdateFn = NetMath[this.adaptiveLR];\n        this.activation = NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = NetMath[cost];\n\n        if (this.adaptiveLR == \"RMSProp\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        if (activation == \"lrelu\") {\n            this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        }\n\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new Layer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof Layer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item === Layer;\n                }):\n                    this.state = \"defined\";\n                    this.definedLayers = layers;\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n            var _this4 = this;\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"defined\":\n                    this.layers = this.definedLayers.map(function (layer, li) {\n                        if (!li) return new layer(input);\n\n                        if (li == _this4.definedLayers.length - 1) return new layer(expected);\n\n                        var hidden = _this4.definedLayers.length - 2;\n                        var size = input / expected > 5 ? expected + (expected + Math.abs(input - expected) / 4) * (hidden - li + 1) / (hidden / 2) : input >= expected ? input + expected * (hidden - li) / (hidden / 2) : expected + input * (hidden - li) / (hidden / 2);\n\n                        return new layer(Math.max(Math.round(size), 0));\n                    });\n                    break;\n\n                case \"not-defined\":\n                    this.layers[0] = new Layer(input);\n                    this.layers[1] = new Layer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new Layer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.activation = this.activation;\n            layer.adaptiveLR = this.adaptiveLR;\n            layer.activationConfig = this.activationConfig;\n\n            if (this.rho != undefined) {\n                layer.rho = this.rho;\n            }\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1]);\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\");\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this5 = this;\n\n            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref2$epochs = _ref2.epochs,\n                epochs = _ref2$epochs === undefined ? 1 : _ref2$epochs,\n                callback = _ref2.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (_this5.state != \"initialised\") {\n                    _this5.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var error = 0;\n\n                var doEpoch = function doEpoch() {\n                    _this5.epochs++;\n                    iterationIndex = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    _this5.resetDeltaWeights();\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this5.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this5.backward(target);\n                    _this5.applyDeltaWeights();\n\n                    var iterationError = _this5.cost(target, output);\n                    error += iterationError;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this5.iterations,\n                            error: iterationError,\n                            input: input\n                        });\n                    }\n\n                    _this5.iterations++;\n                    iterationIndex++;\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this5), 0);\n                    } else {\n\n                        epochsCounter++;\n                        console.log(\"Epoch: \" + epochsCounter + \" Error: \" + error / 100);\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else resolve();\n                    }\n                };\n\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this6 = this;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                var totalError = 0;\n                var testIteration = 0;\n\n                var testInput = function testInput() {\n\n                    console.log(\"Testing iteration\", testIteration + 1, totalError / (testIteration + 1));\n\n                    var output = _this6.forward(testSet[testIteration].input);\n                    var target = testSet[testIteration].expected || testSet[testIteration].output;\n\n                    totalError += _this6.cost(target, output);\n\n                    testIteration++;\n\n                    if (testIteration < testSet.length) setTimeout(testInput.bind(_this6), 0);else resolve(totalError / testSet.length);\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights = neuron.weights.map(function (dw) {\n                        return 0;\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this7 = this;\n\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights.forEach(function (dw, dwi) {\n                        neuron.weights[dwi] = _this7.weightUpdateFn.bind(_this7, neuron.weights[dwi], dw, neuron, dwi)();\n                    });\n                    neuron.bias = _this7.weightUpdateFn.bind(_this7, neuron.bias, neuron.deltaBias, neuron)();\n                });\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return {\n                        neurons: layer.neurons.map(function (neuron) {\n                            return {\n                                bias: neuron.bias,\n                                weights: neuron.weights\n                            };\n                        })\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            this.layers = data.layers.map(function (layer) {\n                return new Layer(layer.neurons.length, layer.neurons);\n            });\n            this.state = \"constructed\";\n            this.initLayers();\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (global.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron(importedData) {\n        _classCallCheck(this, Neuron);\n\n        if (importedData) {\n            this.imported = true;\n            this.weights = importedData.weights || [];\n            this.bias = importedData.bias;\n        }\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init(size) {\n            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                adaptiveLR = _ref3.adaptiveLR,\n                activationConfig = _ref3.activationConfig;\n\n            if (!this.imported) {\n                this.weights = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                    return Math.random() * 0.2 - 0.1;\n                });\n                this.bias = Math.random() * 0.2 - 0.1;\n            }\n\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (adaptiveLR) {\n                case \"gain\":\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.biasGain = 1;\n                    break;\n\n                case \"adagrad\":\n                case \"RMSProp\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n\n                    if (adaptiveLR == \"adadelta\") {\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.adadeltaBiasCache = 0;\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activationConfig == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            }\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (global.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}