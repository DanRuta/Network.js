{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Layer","size","importedData","this","neurons","concat","map","n","ni","Neuron","undefined","state","value","layer","nextLayer","_this","prevLayer","forEach","neuron","init","adaptiveLR","activationConfig","eluAlpha","data","_this2","dropped","Math","random","dropout","activation","sum","bias","pNeuron","pni","weights","expected","_this3","error","deltaBias","derivative","reduce","p","c","weight","wi","deltaWeights","window","global","NetMath","prime","val","exp","pow","max","lreluSlope","abs","rreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","biasGain","weightGains","min","weightsCache","biasCache","sqrt","rmsDecay","m","mt","iterations","v","vt","rho","adadeltaCache","_newVal","adadeltaBiasCache","values","total","Network","_ref","arguments","_ref$layers","layers","_ref$adaptiveLR","_ref$activation","_ref$cost","cost","_ref$dropout","epochs","includes","weightUpdateFn","bind","every","item","Number","isInteger","initLayers","definedLayers","Error","input","_this4","li","hidden","round","ceil","joinLayer","layerIndex","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this5","_ref2","_ref2$epochs","callback","Promise","resolve","reject","iterationIndex","epochsCounter","doEpoch","doIteration","hasOwnProperty","resetDeltaWeights","applyDeltaWeights","iterationError","setTimeout","testSet","_this6","totalError","testIteration","testInput","dw","_this7","dwi","imported","_ref3"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Layer = function () {\n    function Layer(size, importedData) {\n        _classCallCheck(this, Layer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n, ni) {\n            return new Neuron(importedData ? importedData[ni] : undefined);\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(Layer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            var _this = this;\n\n            this.prevLayer = layer;\n            this.neurons.forEach(function (neuron) {\n                return neuron.init(layer.size, {\n                    adaptiveLR: _this.adaptiveLR,\n                    activationConfig: _this.activationConfig,\n                    eluAlpha: _this.eluAlpha\n                });\n            });\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (_this2.state == \"training\" && (neuron.dropped = Math.random() > _this2.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n                    _this2.prevLayer.neurons.forEach(function (pNeuron, pni) {\n                        return neuron.sum += pNeuron.activation * neuron.weights[pni];\n                    });\n                    neuron.activation = _this2.activation(neuron.sum, false, neuron) / (_this2.dropout | 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this3.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this3.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    neuron.weights.forEach(function (weight, wi) {\n                        neuron.deltaWeights[wi] += neuron.error * _this3.prevLayer.neurons[wi].activation;\n                    });\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }]);\n\n    return Layer;\n}();\n\ntypeof window == \"undefined\" && (global.Layer = Layer);\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope : Math.max(this.lreluSlope * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossEntropy\",\n        value: function crossEntropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meanSquaredError\",\n        value: function meanSquaredError(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"noAdaptiveLR\",\n        value: function noAdaptiveLR(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.weightGains[weightI]);\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) neuron.weightGains[weightI] = Math.max(neuron.weightGains[weightI] * 0.95, 0.5);else neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n            } else {\n                if (weightI != null) neuron.weightGains[weightI] = Math.min(neuron.weightGains[weightI] + 0.05, 5);else neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] += Math.pow(deltaValue, 2);else neuron.biasCache += Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"RMSProp\",\n        value: function RMSProp(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] = this.rmsDecay * neuron.weightsCache[weightI] + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);else neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.weightsCache[weightI] = this.rho * neuron.weightsCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var newVal = value + Math.sqrt((neuron.adadeltaCache[weightI] + 1e-6) / (neuron.weightsCache[weightI] + 1e-6)) * deltaValue;\n                neuron.adadeltaCache[weightI] = this.rho * neuron.adadeltaCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (global.NetMath = NetMath);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref.learningRate,\n            _ref$layers = _ref.layers,\n            layers = _ref$layers === undefined ? [] : _ref$layers,\n            _ref$adaptiveLR = _ref.adaptiveLR,\n            adaptiveLR = _ref$adaptiveLR === undefined ? \"noAdaptiveLR\" : _ref$adaptiveLR,\n            _ref$activation = _ref.activation,\n            activation = _ref$activation === undefined ? \"sigmoid\" : _ref$activation,\n            _ref$cost = _ref.cost,\n            cost = _ref$cost === undefined ? \"crossEntropy\" : _ref$cost,\n            rmsDecay = _ref.rmsDecay,\n            rho = _ref.rho,\n            lreluSlope = _ref.lreluSlope,\n            eluAlpha = _ref.eluAlpha,\n            _ref$dropout = _ref.dropout,\n            dropout = _ref$dropout === undefined ? 0.5 : _ref$dropout;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n\n        if (learningRate != null) {\n            this.learningRate = learningRate;\n        }\n\n        switch (true) {\n\n            case adaptiveLR == \"RMSProp\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case adaptiveLR == \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case adaptiveLR == \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n                    switch (activation) {\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.adaptiveLR = [false, null, undefined].includes(adaptiveLR) ? \"noAdaptiveLR\" : adaptiveLR;\n        this.weightUpdateFn = NetMath[this.adaptiveLR];\n        this.activation = NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = NetMath[cost];\n\n        if (this.adaptiveLR == \"RMSProp\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        if (activation == \"lrelu\") {\n            this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        } else if (activation == \"elu\") {\n            this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n        }\n\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new Layer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof Layer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item === Layer;\n                }):\n                    this.state = \"defined\";\n                    this.definedLayers = layers;\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n            var _this4 = this;\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"defined\":\n                    this.layers = this.definedLayers.map(function (layer, li) {\n\n                        if (!li) return new layer(input);\n\n                        if (li == _this4.definedLayers.length - 1) return new layer(expected);\n\n                        var hidden = _this4.definedLayers.length - 2;\n                        var size = input / expected > 5 ? expected + (expected + Math.abs(input - expected) / 4) * (hidden - li + 1) / (hidden / 2) : input >= expected ? input + expected * (hidden - li) / (hidden / 2) : expected + input * (hidden - li) / (hidden / 2);\n\n                        return new layer(Math.max(Math.round(size), 0));\n                    });\n                    break;\n\n                case \"not-defined\":\n                    this.layers[0] = new Layer(input);\n                    this.layers[1] = new Layer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new Layer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.activation = this.activation;\n            layer.adaptiveLR = this.adaptiveLR;\n            layer.activationConfig = this.activationConfig;\n            layer.dropout = this.dropout;\n\n            if (this.rho != undefined) {\n                layer.rho = this.rho;\n            }\n\n            if (this.eluAlpha != undefined) {\n                layer.eluAlpha = this.eluAlpha;\n            }\n\n            if (layerIndex) {\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1]);\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\");\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this5 = this;\n\n            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref2$epochs = _ref2.epochs,\n                epochs = _ref2$epochs === undefined ? 1 : _ref2$epochs,\n                callback = _ref2.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (_this5.state != \"initialised\") {\n                    _this5.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this5.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var error = 0;\n\n                var doEpoch = function doEpoch() {\n                    _this5.epochs++;\n                    iterationIndex = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    _this5.resetDeltaWeights();\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this5.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this5.backward(target);\n                    _this5.applyDeltaWeights();\n\n                    var iterationError = _this5.cost(target, output);\n                    error += iterationError;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this5.iterations,\n                            error: iterationError,\n                            input: input\n                        });\n                    }\n\n                    _this5.iterations++;\n                    iterationIndex++;\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this5), 0);\n                    } else {\n\n                        epochsCounter++;\n                        console.log(\"Epoch: \" + epochsCounter + \" Error: \" + error / 100);\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this5.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n                            resolve();\n                        }\n                    }\n                };\n\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this6 = this;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                var totalError = 0;\n                var testIteration = 0;\n\n                var testInput = function testInput() {\n\n                    console.log(\"Testing iteration\", testIteration + 1, totalError / (testIteration + 1));\n\n                    var output = _this6.forward(testSet[testIteration].input);\n                    var target = testSet[testIteration].expected || testSet[testIteration].output;\n\n                    totalError += _this6.cost(target, output);\n\n                    testIteration++;\n\n                    if (testIteration < testSet.length) setTimeout(testInput.bind(_this6), 0);else resolve(totalError / testSet.length);\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights = neuron.weights.map(function (dw) {\n                        return 0;\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this7 = this;\n\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights.forEach(function (dw, dwi) {\n                        neuron.weights[dwi] = _this7.weightUpdateFn.bind(_this7, neuron.weights[dwi], dw, neuron, dwi)();\n                    });\n                    neuron.bias = _this7.weightUpdateFn.bind(_this7, neuron.bias, neuron.deltaBias, neuron)();\n                });\n            });\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return {\n                        neurons: layer.neurons.map(function (neuron) {\n                            return {\n                                bias: neuron.bias,\n                                weights: neuron.weights\n                            };\n                        })\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            this.layers = data.layers.map(function (layer) {\n                return new Layer(layer.neurons.length, layer.neurons);\n            });\n            this.state = \"constructed\";\n            this.initLayers();\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (global.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron(importedData) {\n        _classCallCheck(this, Neuron);\n\n        if (importedData) {\n            this.imported = true;\n            this.weights = importedData.weights || [];\n            this.bias = importedData.bias;\n        }\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init(size) {\n            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                adaptiveLR = _ref3.adaptiveLR,\n                activationConfig = _ref3.activationConfig,\n                eluAlpha = _ref3.eluAlpha;\n\n            if (!this.imported) {\n                this.weights = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                    return Math.random() * 0.2 - 0.1;\n                });\n                this.bias = Math.random() * 0.2 - 0.1;\n            }\n\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (adaptiveLR) {\n                case \"gain\":\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.biasGain = 1;\n                    break;\n\n                case \"adagrad\":\n                case \"RMSProp\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n\n                    if (adaptiveLR == \"adadelta\") {\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.adadeltaBiasCache = 0;\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activationConfig == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activationConfig == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (global.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}