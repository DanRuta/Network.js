{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Layer","size","importedData","this","neurons","concat","map","n","ni","Neuron","undefined","state","value","layer","nextLayer","_this","prevLayer","forEach","neuron","imported","weights","net","weightsInitFn","weightsConfig","bias","Math","random","init","adaptiveLR","activationConfig","eluAlpha","data","_this2","dropped","dropout","activation","sum","pNeuron","pni","expected","_this3","error","deltaBias","derivative","reduce","p","c","weight","wi","deltaWeights","l2","l1","miniBatchSize","window","exports","NetMath","prime","val","exp","pow","max","lreluSlope","abs","rreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","biasGain","weightGains","min","weightsCache","biasCache","sqrt","rmsDecay","m","mt","iterations","v","vt","rho","adadeltaCache","_newVal","adadeltaBiasCache","_ref","limit","_ref2","mean","stdDeviation","x1","x2","r","_ref3","fanIn","fanOut","gaussian","lecunnormal","_ref4","uniform","lecununiform","_ref5","_ref6","values","total","avg","diffs","maxNormTotal","maxNorm","multiplier","layers","li","w","Network","_ref7","arguments","_ref7$layers","_ref7$adaptiveLR","_ref7$activation","_ref7$cost","cost","_ref7$dropout","epochs","format","l2Error","l1Error","includes","weightUpdateFn","bind","distribution","every","item","Number","isInteger","initLayers","definedLayers","Error","input","_this4","hidden","round","ceil","joinLayer","layerIndex","assign","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this5","_ref8","_ref8$epochs","callback","_ref8$log","_ref8$miniBatchSize","_ref8$shuffle","shuffle","Promise","resolve","reject","iterationIndex","epochsCounter","startTime","Date","now","doEpoch","doIteration","hasOwnProperty","applyDeltaWeights","resetDeltaWeights","iterationError","elapsed","setTimeout","testSet","_this6","_ref9$log","totalError","testInput","dw","_this7","dwi","type","replace","toLowerCase","date","formatted","push","getMilliseconds","getHours","getMinutes","getSeconds","join","j","floor","x","_ref10"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Layer = function () {\n    function Layer(size, importedData) {\n        _classCallCheck(this, Layer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n, ni) {\n            return new Neuron(importedData ? importedData[ni] : undefined);\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(Layer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            var _this = this;\n\n            this.prevLayer = layer;\n            this.neurons.forEach(function (neuron) {\n\n                if (!neuron.imported) {\n                    neuron.weights = _this.net.weightsInitFn(layer.size, _this.weightsConfig);\n                    neuron.bias = Math.random() * 0.2 - 0.1;\n                }\n\n                neuron.init(layer.size, {\n                    adaptiveLR: _this.net.adaptiveLR,\n                    activationConfig: _this.net.activationConfig,\n                    eluAlpha: _this.net.eluAlpha\n                });\n            });\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (_this2.state == \"training\" && (neuron.dropped = Math.random() > _this2.net.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n                    _this2.prevLayer.neurons.forEach(function (pNeuron, pni) {\n                        return neuron.sum += pNeuron.activation * neuron.weights[pni];\n                    });\n                    neuron.activation = _this2.activation(neuron.sum, false, neuron) / (_this2.net.dropout | 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this3.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this3.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    neuron.weights.forEach(function (weight, wi) {\n                        neuron.deltaWeights[wi] += neuron.error * _this3.prevLayer.neurons[wi].activation * (1 + ((_this3.net.l2 || 0) + (_this3.net.l1 || 0)) / _this3.net.miniBatchSize * neuron.deltaWeights[wi]);\n                    });\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }]);\n\n    return Layer;\n}();\n\ntypeof window == \"undefined\" && (exports.Layer = Layer);\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope : Math.max(this.lreluSlope * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossentropy\",\n        value: function crossentropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meansquarederror\",\n        value: function meansquarederror(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"noadaptivelr\",\n        value: function noadaptivelr(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.weightGains[weightI]);\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) {\n                    neuron.weightGains[weightI] = Math.max(neuron.weightGains[weightI] * 0.95, 0.5);\n                } else {\n                    neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n                }\n            } else {\n                if (weightI != null) {\n                    neuron.weightGains[weightI] = Math.min(neuron.weightGains[weightI] + 0.05, 5);\n                } else {\n                    neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n                }\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.weightsCache[weightI] += Math.pow(deltaValue, 2);\n            } else {\n                neuron.biasCache += Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"rmsprop\",\n        value: function rmsprop(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.weightsCache[weightI] = this.rmsDecay * neuron.weightsCache[weightI] + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n            } else {\n                neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n            }\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.weightsCache[weightI] = this.rho * neuron.weightsCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var newVal = value + Math.sqrt((neuron.adadeltaCache[weightI] + 1e-6) / (neuron.weightsCache[weightI] + 1e-6)) * deltaValue;\n                neuron.adadeltaCache[weightI] = this.rho * neuron.adadeltaCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Weights init\n\n    }, {\n        key: \"uniform\",\n        value: function uniform(size, _ref) {\n            var limit = _ref.limit;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                return Math.random() * 2 * limit - limit;\n            });\n        }\n    }, {\n        key: \"gaussian\",\n        value: function gaussian(size, _ref2) {\n            var mean = _ref2.mean,\n                stdDeviation = _ref2.stdDeviation;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function () {\n                // Polar Box Muller\n                var x1 = void 0,\n                    x2 = void 0,\n                    r = void 0,\n                    y = void 0;\n\n                do {\n                    x1 = 2 * Math.random() - 1;\n                    x2 = 2 * Math.random() - 1;\n                    r = Math.pow(x1, 2) + Math.pow(x2, 2);\n                } while (r >= 1 || !r);\n\n                return mean + x1 * Math.sqrt(-2 * Math.log(r) / r) * stdDeviation;\n            });\n        }\n    }, {\n        key: \"xaviernormal\",\n        value: function xaviernormal(size, _ref3) {\n            var fanIn = _ref3.fanIn,\n                fanOut = _ref3.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(2 / (fanIn + fanOut)) }) : NetMath.lecunnormal(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"xavieruniform\",\n        value: function xavieruniform(size, _ref4) {\n            var fanIn = _ref4.fanIn,\n                fanOut = _ref4.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.uniform(size, { limit: Math.sqrt(6 / (fanIn + fanOut)) }) : NetMath.lecununiform(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"lecunnormal\",\n        value: function lecunnormal(size, _ref5) {\n            var fanIn = _ref5.fanIn;\n\n            return NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(1 / fanIn) });\n        }\n    }, {\n        key: \"lecununiform\",\n        value: function lecununiform(size, _ref6) {\n            var fanIn = _ref6.fanIn;\n\n            return NetMath.uniform(size, { limit: Math.sqrt(3 / fanIn) });\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }, {\n        key: \"standardDeviation\",\n        value: function standardDeviation(arr) {\n            var avg = arr.reduce(function (p, c) {\n                return p + c;\n            }) / arr.length;\n            var diffs = arr.map(function (v) {\n                return v - avg;\n            }).map(function (v) {\n                return Math.pow(v, 2);\n            });\n            return Math.sqrt(diffs.reduce(function (p, c) {\n                return p + c;\n            }) / diffs.length);\n        }\n    }, {\n        key: \"maxNorm\",\n        value: function maxNorm() {\n\n            if (this.maxNormTotal > this.maxNorm) {\n\n                var multiplier = this.maxNorm / (1e-18 + this.maxNormTotal);\n\n                this.layers.forEach(function (layer, li) {\n                    li && layer.neurons.forEach(function (neuron) {\n                        neuron.weights.forEach(function (w, wi) {\n                            return neuron.weights[wi] *= multiplier;\n                        });\n                    });\n                });\n            }\n\n            this.maxNormTotal = 0;\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (exports.NetMath = NetMath);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref7.learningRate,\n            _ref7$layers = _ref7.layers,\n            layers = _ref7$layers === undefined ? [] : _ref7$layers,\n            _ref7$adaptiveLR = _ref7.adaptiveLR,\n            adaptiveLR = _ref7$adaptiveLR === undefined ? \"noadaptivelr\" : _ref7$adaptiveLR,\n            _ref7$activation = _ref7.activation,\n            activation = _ref7$activation === undefined ? \"sigmoid\" : _ref7$activation,\n            _ref7$cost = _ref7.cost,\n            cost = _ref7$cost === undefined ? \"crossentropy\" : _ref7$cost,\n            rmsDecay = _ref7.rmsDecay,\n            rho = _ref7.rho,\n            lreluSlope = _ref7.lreluSlope,\n            eluAlpha = _ref7.eluAlpha,\n            _ref7$dropout = _ref7.dropout,\n            dropout = _ref7$dropout === undefined ? 0.5 : _ref7$dropout,\n            l2 = _ref7.l2,\n            l1 = _ref7.l1,\n            maxNorm = _ref7.maxNorm,\n            weightsConfig = _ref7.weightsConfig;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n        this.error = 0;\n        activation = this.format(activation);\n        adaptiveLR = this.format(adaptiveLR);\n        cost = this.format(cost);\n\n        if (learningRate != null) {\n            this.learningRate = learningRate;\n        }\n\n        if (l2) {\n            this.l2 = typeof l2 == \"boolean\" && l2 ? 0.001 : l2;\n            this.l2Error = 0;\n        }\n\n        if (l1) {\n            this.l1 = typeof l1 == \"boolean\" && l1 ? 0.005 : l1;\n            this.l1Error = 0;\n        }\n\n        if (maxNorm) {\n            this.maxNorm = typeof maxNorm == \"boolean\" && maxNorm ? 1000 : maxNorm;\n            this.maxNormTotal = 0;\n        }\n\n        // Activation function / Learning Rate\n        switch (adaptiveLR) {\n\n            case \"rmsprop\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n\n                    switch (activation) {\n\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.adaptiveLR = [false, null, undefined].includes(adaptiveLR) ? \"noadaptivelr\" : adaptiveLR;\n        this.weightUpdateFn = NetMath[this.adaptiveLR];\n        this.activation = typeof activation == \"function\" ? activation : NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = typeof cost == \"function\" ? cost : NetMath[cost];\n\n        if (this.adaptiveLR == \"rmsprop\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        if (activation == \"lrelu\") {\n            this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        } else if (activation == \"elu\") {\n            this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n        }\n\n        // Weights distributiom\n        this.weightsConfig = { distribution: \"uniform\" };\n\n        if (weightsConfig != undefined && weightsConfig.distribution) {\n            this.weightsConfig.distribution = this.format(weightsConfig.distribution);\n        }\n\n        if (this.weightsConfig.distribution == \"uniform\") {\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit != undefined ? weightsConfig.limit : 0.1;\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\n            this.weightsConfig.mean = weightsConfig.mean || 0;\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05;\n        }\n\n        if (typeof this.weightsConfig.distribution == \"function\") {\n            this.weightsInitFn = this.weightsConfig.distribution;\n        } else {\n            this.weightsInitFn = NetMath[this.weightsConfig.distribution];\n        }\n\n        // Status\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new Layer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof Layer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item === Layer;\n                }):\n                    this.state = \"defined\";\n                    this.definedLayers = layers;\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n            var _this4 = this;\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"defined\":\n                    this.layers = this.definedLayers.map(function (layer, li) {\n\n                        if (!li) return new layer(input);\n\n                        if (li == _this4.definedLayers.length - 1) return new layer(expected);\n\n                        var hidden = _this4.definedLayers.length - 2;\n                        var size = input / expected > 5 ? expected + (expected + Math.abs(input - expected) / 4) * (hidden - li + 1) / (hidden / 2) : input >= expected ? input + expected * (hidden - li) / (hidden / 2) : expected + input * (hidden - li) / (hidden / 2);\n\n                        return new layer(Math.max(Math.round(size), 0));\n                    });\n                    break;\n\n                case \"not-defined\":\n                    this.layers[0] = new Layer(input);\n                    this.layers[1] = new Layer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new Layer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.net = this;\n            layer.activation = this.activation;\n\n            layer.weightsConfig = {};\n            Object.assign(layer.weightsConfig, this.weightsConfig);\n\n            if (layerIndex) {\n                layer.weightsConfig.fanIn = this.layers[layerIndex - 1].size;\n                this.layers[layerIndex - 1].weightsConfig.fanOut = layer.size;\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1]);\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\");\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this5 = this;\n\n            var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref8$epochs = _ref8.epochs,\n                epochs = _ref8$epochs === undefined ? 1 : _ref8$epochs,\n                callback = _ref8.callback,\n                _ref8$log = _ref8.log,\n                log = _ref8$log === undefined ? true : _ref8$log,\n                _ref8$miniBatchSize = _ref8.miniBatchSize,\n                miniBatchSize = _ref8$miniBatchSize === undefined ? 1 : _ref8$miniBatchSize,\n                _ref8$shuffle = _ref8.shuffle,\n                shuffle = _ref8$shuffle === undefined ? false : _ref8$shuffle;\n\n            this.miniBatchSize = typeof miniBatchSize == \"boolean\" && miniBatchSize ? dataSet[0].expected.length : miniBatchSize;\n\n            if (shuffle) {\n                this.shuffle(dataSet);\n            }\n\n            if (log) {\n                console.log(\"Training started. Epochs: \" + epochs + \" Batch Size: \" + this.miniBatchSize);\n            }\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    return void reject(\"No data provided\");\n                }\n\n                if (_this5.state != \"initialised\") {\n                    _this5.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this5.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n                var startTime = Date.now();\n\n                var doEpoch = function doEpoch() {\n                    _this5.epochs++;\n                    _this5.error = 0;\n                    iterationIndex = 0;\n\n                    if (_this5.l2Error != undefined) _this5.l2Error = 0;\n                    if (_this5.l1Error != undefined) _this5.l1Error = 0;\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return void reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this5.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this5.backward(target);\n\n                    if (++iterationIndex % _this5.miniBatchSize == 0) {\n                        _this5.applyDeltaWeights();\n                        _this5.resetDeltaWeights();\n                    } else if (iterationIndex >= dataSet.length) {\n                        _this5.applyDeltaWeights();\n                    }\n\n                    var iterationError = _this5.cost(target, output);\n                    var elapsed = Date.now() - startTime;\n                    _this5.error += iterationError;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this5.iterations,\n                            error: iterationError,\n                            elapsed: elapsed, input: input\n                        });\n                    }\n\n                    _this5.iterations++;\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this5), 0);\n                    } else {\n                        epochsCounter++;\n\n                        if (log) {\n                            console.log(\"Epoch: \" + _this5.epochs + \" Error: \" + _this5.error / iterationIndex + (_this5.l2 == undefined ? \"\" : \" L2 Error: \" + _this5.l2Error / iterationIndex), \"\\nElapsed: \" + _this5.format(elapsed, \"time\") + \" Average Duration: \" + _this5.format(elapsed / epochsCounter, \"time\"));\n                        }\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this5.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n\n                            if (log) {\n                                console.log(\"Training finished. Total time: \" + _this5.format(elapsed, \"time\") + \"  Average iteration time: \" + _this5.format(elapsed / iterationIndex, \"time\"));\n                            }\n                            resolve();\n                        }\n                    }\n                };\n\n                _this5.resetDeltaWeights();\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this6 = this;\n\n            var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref9$log = _ref9.log,\n                log = _ref9$log === undefined ? true : _ref9$log;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                var totalError = 0;\n                var iterationIndex = 0;\n                var startTime = Date.now();\n\n                var testInput = function testInput() {\n\n                    var output = _this6.forward(testSet[iterationIndex].input);\n                    var target = testSet[iterationIndex].expected || testSet[iterationIndex].output;\n\n                    totalError += _this6.cost(target, output);\n\n                    if (log) {\n                        console.log(\"Testing iteration\", iterationIndex + 1, totalError / (iterationIndex + 1));\n                    }\n\n                    iterationIndex++;\n\n                    if (iterationIndex < testSet.length) {\n                        setTimeout(testInput.bind(_this6), 0);\n                    } else {\n                        var elapsed = Date.now() - startTime;\n\n                        if (log) {\n                            console.log(\"Testing finished. Total time: \" + _this6.format(elapsed, \"time\") + \"  Average iteration time: \" + _this6.format(elapsed / iterationIndex, \"time\"));\n                        }\n\n                        resolve(totalError / testSet.length);\n                    }\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    return neuron.deltaWeights = neuron.weights.map(function (dw) {\n                        return 0;\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this7 = this;\n\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights.forEach(function (dw, dwi) {\n\n                        if (_this7.l2 != undefined) _this7.l2Error += 0.5 * _this7.l2 * Math.pow(neuron.weights[dwi], 2);\n                        if (_this7.l1 != undefined) _this7.l1Error += _this7.l1 * Math.abs(neuron.weights[dwi]);\n\n                        neuron.weights[dwi] = _this7.weightUpdateFn.bind(_this7, neuron.weights[dwi], dw, neuron, dwi)();\n\n                        if (_this7.maxNorm != undefined) _this7.maxNormTotal += Math.pow(neuron.weights[dwi], 2);\n                    });\n\n                    neuron.bias = _this7.weightUpdateFn.bind(_this7, neuron.bias, neuron.deltaBias, neuron)();\n                });\n            });\n\n            if (this.maxNorm != undefined) {\n                this.maxNormTotal = Math.sqrt(this.maxNormTotal);\n                NetMath.maxNorm.bind(this)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return {\n                        neurons: layer.neurons.map(function (neuron) {\n                            return {\n                                bias: neuron.bias,\n                                weights: neuron.weights\n                            };\n                        })\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            this.layers = data.layers.map(function (layer) {\n                return new Layer(layer.neurons.length, layer.neurons);\n            });\n            this.state = \"constructed\";\n            this.initLayers();\n        }\n    }, {\n        key: \"format\",\n        value: function format(value) {\n            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"string\";\n\n\n            switch (true) {\n\n                case type == \"string\" && typeof value == \"string\":\n                    value = value.replace(/(_|\\s)/g, \"\").toLowerCase();\n                    break;\n\n                case type == \"time\" && typeof value == \"number\":\n                    var date = new Date(value);\n                    var formatted = [];\n\n                    if (value < 1000) {\n                        formatted.push(date.getMilliseconds() + \"ms\");\n                    } else {\n\n                        if (value >= 3600000) formatted.push(date.getHours() + \"h\");\n                        if (value >= 60000) formatted.push(date.getMinutes() + \"m\");\n\n                        formatted.push(date.getSeconds() + \"s\");\n                    }\n\n                    value = formatted.join(\" \");\n                    break;\n            }\n\n            return value;\n        }\n    }, {\n        key: \"shuffle\",\n        value: function shuffle(arr) {\n            for (var i = arr.length; i; i--) {\n                var j = Math.floor(Math.random() * i);\n                var x = arr[i - 1];\n                arr[i - 1] = arr[j];\n                arr[j] = x;\n            }\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (exports.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron(importedData) {\n        _classCallCheck(this, Neuron);\n\n        if (importedData) {\n            this.imported = true;\n            this.weights = importedData.weights || [];\n            this.bias = importedData.bias;\n        }\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init(size) {\n            var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                adaptiveLR = _ref10.adaptiveLR,\n                activationConfig = _ref10.activationConfig,\n                eluAlpha = _ref10.eluAlpha;\n\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (adaptiveLR) {\n\n                case \"gain\":\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.biasGain = 1;\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n\n                    if (adaptiveLR == \"adadelta\") {\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.adadeltaBiasCache = 0;\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activationConfig == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activationConfig == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (exports.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}