{"version":3,"sources":["Network.min.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Layer","size","importedData","this","neurons","concat","map","n","ni","Neuron","undefined","state","value","layer","nextLayer","_this","prevLayer","forEach","neuron","imported","weights","weightsInitFn","weightsConfig","bias","Math","random","init","adaptiveLR","activationConfig","eluAlpha","data","_this2","dropped","dropout","activation","sum","pNeuron","pni","expected","_this3","error","deltaBias","derivative","reduce","p","c","weight","wi","deltaWeights","l2","l1","window","global","NetMath","prime","val","exp","pow","max","lreluSlope","abs","rreluSlope","sech","tanh","elu","output","vi","log","calculated","desired","index","prev","curr","deltaValue","learningRate","weightI","newVal","biasGain","weightGains","min","weightsCache","biasCache","sqrt","rmsDecay","m","mt","iterations","v","vt","rho","adadeltaCache","_newVal","adadeltaBiasCache","_ref","limit","_ref2","mean","stdDeviation","x1","x2","r","_ref3","fanIn","fanOut","gaussian","lecunnormal","_ref4","uniform","lecununiform","_ref5","_ref6","values","total","avg","diffs","maxNormTotal","maxNorm","multiplier","layers","li","w","Network","_ref7","arguments","_ref7$layers","_ref7$adaptiveLR","_ref7$activation","_ref7$cost","cost","_ref7$dropout","epochs","format","l2Error","l1Error","includes","weightUpdateFn","bind","distribution","every","item","Number","isInteger","initLayers","definedLayers","Error","input","_this4","hidden","round","ceil","joinLayer","layerIndex","assign","assignNext","assignPrev","console","warn","forward","backward","dataSet","_this5","_ref8","_ref8$epochs","callback","Promise","resolve","reject","iterationIndex","epochsCounter","doEpoch","doIteration","hasOwnProperty","resetDeltaWeights","applyDeltaWeights","iterationError","setTimeout","testSet","_this6","totalError","testIteration","testInput","dw","_this7","dwi","string","replace","toLowerCase","_ref9"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Layer = function () {\n    function Layer(size, importedData) {\n        _classCallCheck(this, Layer);\n\n        this.size = size;\n        this.neurons = [].concat(_toConsumableArray(new Array(size))).map(function (n, ni) {\n            return new Neuron(importedData ? importedData[ni] : undefined);\n        });\n        this.state = \"not-initialised\";\n    }\n\n    _createClass(Layer, [{\n        key: \"assignNext\",\n        value: function assignNext(layer) {\n            this.nextLayer = layer;\n        }\n    }, {\n        key: \"assignPrev\",\n        value: function assignPrev(layer) {\n            var _this = this;\n\n            this.prevLayer = layer;\n            this.neurons.forEach(function (neuron) {\n\n                if (!neuron.imported) {\n                    neuron.weights = _this.weightsInitFn(layer.size, _this.weightsConfig);\n                    neuron.bias = Math.random() * 0.2 - 0.1;\n                }\n\n                neuron.init(layer.size, {\n                    adaptiveLR: _this.adaptiveLR,\n                    activationConfig: _this.activationConfig,\n                    eluAlpha: _this.eluAlpha\n                });\n            });\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n            var _this2 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (_this2.state == \"training\" && (neuron.dropped = Math.random() > _this2.dropout)) {\n                    neuron.activation = 0;\n                } else {\n                    neuron.sum = neuron.bias;\n                    _this2.prevLayer.neurons.forEach(function (pNeuron, pni) {\n                        return neuron.sum += pNeuron.activation * neuron.weights[pni];\n                    });\n                    neuron.activation = _this2.activation(neuron.sum, false, neuron) / (_this2.dropout | 1);\n                }\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            var _this3 = this;\n\n            this.neurons.forEach(function (neuron, ni) {\n\n                if (neuron.dropped) {\n                    neuron.error = 0;\n                    neuron.deltaBias = 0;\n                } else {\n                    if (typeof expected !== \"undefined\") {\n                        neuron.error = expected[ni] - neuron.activation;\n                    } else {\n                        neuron.derivative = _this3.activation(neuron.sum, true, neuron);\n                        neuron.error = neuron.derivative * _this3.nextLayer.neurons.map(function (n) {\n                            return n.error * (n.weights[ni] | 0);\n                        }).reduce(function (p, c) {\n                            return p + c;\n                        }, 0);\n                    }\n\n                    neuron.weights.forEach(function (weight, wi) {\n                        neuron.deltaWeights[wi] += neuron.error * _this3.prevLayer.neurons[wi].activation * (1 + ((_this3.l2 || 0) + (_this3.l1 || 0)) * neuron.deltaWeights[wi]);\n                    });\n\n                    neuron.deltaBias = neuron.error;\n                }\n            });\n        }\n    }]);\n\n    return Layer;\n}();\n\ntypeof window == \"undefined\" && (global.Layer = Layer);\n\"use strict\";\n\nvar NetMath = function () {\n    function NetMath() {\n        _classCallCheck(this, NetMath);\n    }\n\n    _createClass(NetMath, null, [{\n        key: \"sigmoid\",\n\n\n        // Activation functions\n        value: function sigmoid(value, prime) {\n            var val = 1 / (1 + Math.exp(-value));\n            return prime ? val * (1 - val) : val;\n        }\n    }, {\n        key: \"tanh\",\n        value: function tanh(value, prime) {\n            var exp = Math.exp(2 * value);\n            return prime ? 4 / Math.pow(Math.exp(value) + Math.exp(-value), 2) || 1e-18 : (exp - 1) / (exp + 1) || 1e-18;\n        }\n    }, {\n        key: \"relu\",\n        value: function relu(value, prime) {\n            return prime ? value > 0 ? 1 : 0 : Math.max(value, 0);\n        }\n    }, {\n        key: \"lrelu\",\n        value: function lrelu(value, prime) {\n            return prime ? value > 0 ? 1 : this.lreluSlope : Math.max(this.lreluSlope * Math.abs(value), value);\n        }\n    }, {\n        key: \"rrelu\",\n        value: function rrelu(value, prime, neuron) {\n            return prime ? value > 0 ? 1 : neuron.rreluSlope : Math.max(neuron.rreluSlope, value);\n        }\n    }, {\n        key: \"lecuntanh\",\n        value: function lecuntanh(value, prime) {\n            return prime ? 1.15333 * Math.pow(NetMath.sech(2 / 3 * value), 2) : 1.7159 * NetMath.tanh(2 / 3 * value);\n        }\n    }, {\n        key: \"elu\",\n        value: function elu(value, prime, neuron) {\n            return prime ? value >= 0 ? 1 : NetMath.elu(value, false, neuron) + neuron.eluAlpha : value >= 0 ? value : neuron.eluAlpha * (Math.exp(value) - 1);\n        }\n\n        // Cost functions\n\n    }, {\n        key: \"crossentropy\",\n        value: function crossentropy(target, output) {\n            return output.map(function (value, vi) {\n                return target[vi] * Math.log(value + 1e-15) + (1 - target[vi]) * Math.log(1 + 1e-15 - value);\n            }).reduce(function (p, c) {\n                return p - c;\n            }, 0);\n        }\n    }, {\n        key: \"meansquarederror\",\n        value: function meansquarederror(calculated, desired) {\n            return calculated.map(function (output, index) {\n                return Math.pow(output - desired[index], 2);\n            }).reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0) / calculated.length;\n        }\n\n        // Weight updating functions\n\n    }, {\n        key: \"noadaptivelr\",\n        value: function noadaptivelr(value, deltaValue) {\n            return value + this.learningRate * deltaValue;\n        }\n    }, {\n        key: \"gain\",\n        value: function gain(value, deltaValue, neuron, weightI) {\n\n            var newVal = value + this.learningRate * deltaValue * (weightI == null ? neuron.biasGain : neuron.weightGains[weightI]);\n\n            if (newVal <= 0 && value > 0 || newVal >= 0 && value < 0) {\n                if (weightI != null) neuron.weightGains[weightI] = Math.max(neuron.weightGains[weightI] * 0.95, 0.5);else neuron.biasGain = Math.max(neuron.biasGain * 0.95, 0.5);\n            } else {\n                if (weightI != null) neuron.weightGains[weightI] = Math.min(neuron.weightGains[weightI] + 0.05, 5);else neuron.biasGain = Math.min(neuron.biasGain + 0.05, 5);\n            }\n\n            return newVal;\n        }\n    }, {\n        key: \"adagrad\",\n        value: function adagrad(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] += Math.pow(deltaValue, 2);else neuron.biasCache += Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"rmsprop\",\n        value: function rmsprop(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) neuron.weightsCache[weightI] = this.rmsDecay * neuron.weightsCache[weightI] + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);else neuron.biasCache = this.rmsDecay * neuron.biasCache + (1 - this.rmsDecay) * Math.pow(deltaValue, 2);\n\n            return value + this.learningRate * deltaValue / (1e-6 + Math.sqrt(weightI != null ? neuron.weightsCache[weightI] : neuron.biasCache));\n        }\n    }, {\n        key: \"adam\",\n        value: function adam(value, deltaValue, neuron) {\n\n            neuron.m = 0.9 * neuron.m + (1 - 0.9) * deltaValue;\n            var mt = neuron.m / (1 - Math.pow(0.9, this.iterations + 1));\n\n            neuron.v = 0.999 * neuron.v + (1 - 0.999) * Math.pow(deltaValue, 2);\n            var vt = neuron.v / (1 - Math.pow(0.999, this.iterations + 1));\n\n            return value + this.learningRate * mt / (Math.sqrt(vt) + 1e-8);\n        }\n    }, {\n        key: \"adadelta\",\n        value: function adadelta(value, deltaValue, neuron, weightI) {\n\n            if (weightI != null) {\n                neuron.weightsCache[weightI] = this.rho * neuron.weightsCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var newVal = value + Math.sqrt((neuron.adadeltaCache[weightI] + 1e-6) / (neuron.weightsCache[weightI] + 1e-6)) * deltaValue;\n                neuron.adadeltaCache[weightI] = this.rho * neuron.adadeltaCache[weightI] + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return newVal;\n            } else {\n                neuron.biasCache = this.rho * neuron.biasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                var _newVal = value + Math.sqrt((neuron.adadeltaBiasCache + 1e-6) / (neuron.biasCache + 1e-6)) * deltaValue;\n                neuron.adadeltaBiasCache = this.rho * neuron.adadeltaBiasCache + (1 - this.rho) * Math.pow(deltaValue, 2);\n                return _newVal;\n            }\n        }\n\n        // Weights init\n\n    }, {\n        key: \"uniform\",\n        value: function uniform(size, _ref) {\n            var limit = _ref.limit;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                return Math.random() * 2 * limit - limit;\n            });\n        }\n    }, {\n        key: \"gaussian\",\n        value: function gaussian(size, _ref2) {\n            var mean = _ref2.mean,\n                stdDeviation = _ref2.stdDeviation;\n\n            return [].concat(_toConsumableArray(new Array(size))).map(function () {\n                // Polar Box Muller\n                var x1 = void 0,\n                    x2 = void 0,\n                    r = void 0,\n                    y = void 0;\n\n                do {\n                    x1 = 2 * Math.random() - 1;\n                    x2 = 2 * Math.random() - 1;\n                    r = Math.pow(x1, 2) + Math.pow(x2, 2);\n                } while (r >= 1 || !r);\n\n                return mean + x1 * Math.sqrt(-2 * Math.log(r) / r) * stdDeviation;\n            });\n        }\n    }, {\n        key: \"xaviernormal\",\n        value: function xaviernormal(size, _ref3) {\n            var fanIn = _ref3.fanIn,\n                fanOut = _ref3.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(2 / (fanIn + fanOut)) }) : NetMath.lecunnormal(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"xavieruniform\",\n        value: function xavieruniform(size, _ref4) {\n            var fanIn = _ref4.fanIn,\n                fanOut = _ref4.fanOut;\n\n            return fanOut || fanOut == 0 ? NetMath.uniform(size, { limit: Math.sqrt(6 / (fanIn + fanOut)) }) : NetMath.lecununiform(size, { fanIn: fanIn });\n        }\n    }, {\n        key: \"lecunnormal\",\n        value: function lecunnormal(size, _ref5) {\n            var fanIn = _ref5.fanIn;\n\n            return NetMath.gaussian(size, { mean: 0, stdDeviation: Math.sqrt(1 / fanIn) });\n        }\n    }, {\n        key: \"lecununiform\",\n        value: function lecununiform(size, _ref6) {\n            var fanIn = _ref6.fanIn;\n\n            return NetMath.uniform(size, { limit: Math.sqrt(3 / fanIn) });\n        }\n\n        // Other\n\n    }, {\n        key: \"softmax\",\n        value: function softmax(values) {\n            var total = values.reduce(function (prev, curr) {\n                return prev + curr;\n            }, 0);\n            return values.map(function (value) {\n                return value / total;\n            });\n        }\n    }, {\n        key: \"sech\",\n        value: function sech(value) {\n            return 2 * Math.exp(-value) / (1 + Math.exp(-2 * value));\n        }\n    }, {\n        key: \"standardDeviation\",\n        value: function standardDeviation(arr) {\n            var avg = arr.reduce(function (p, c) {\n                return p + c;\n            }) / arr.length;\n            var diffs = arr.map(function (v) {\n                return v - avg;\n            }).map(function (v) {\n                return Math.pow(v, 2);\n            });\n            return Math.sqrt(diffs.reduce(function (p, c) {\n                return p + c;\n            }) / diffs.length);\n        }\n    }, {\n        key: \"maxNorm\",\n        value: function maxNorm() {\n\n            if (this.maxNormTotal > this.maxNorm) {\n\n                var multiplier = this.maxNorm / (1e-18 + this.maxNormTotal);\n\n                this.layers.forEach(function (layer, li) {\n                    li && layer.neurons.forEach(function (neuron) {\n                        neuron.weights.forEach(function (w, wi) {\n                            neuron.weights[wi] *= multiplier;\n                        });\n                    });\n                });\n            }\n\n            this.maxNormTotal = 0;\n        }\n    }]);\n\n    return NetMath;\n}();\n\ntypeof window == \"undefined\" && (global.NetMath = NetMath);\n\"use strict\";\n\nvar Network = function () {\n    function Network() {\n        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            learningRate = _ref7.learningRate,\n            _ref7$layers = _ref7.layers,\n            layers = _ref7$layers === undefined ? [] : _ref7$layers,\n            _ref7$adaptiveLR = _ref7.adaptiveLR,\n            adaptiveLR = _ref7$adaptiveLR === undefined ? \"noadaptivelr\" : _ref7$adaptiveLR,\n            _ref7$activation = _ref7.activation,\n            activation = _ref7$activation === undefined ? \"sigmoid\" : _ref7$activation,\n            _ref7$cost = _ref7.cost,\n            cost = _ref7$cost === undefined ? \"crossentropy\" : _ref7$cost,\n            rmsDecay = _ref7.rmsDecay,\n            rho = _ref7.rho,\n            lreluSlope = _ref7.lreluSlope,\n            eluAlpha = _ref7.eluAlpha,\n            _ref7$dropout = _ref7.dropout,\n            dropout = _ref7$dropout === undefined ? 0.5 : _ref7$dropout,\n            l2 = _ref7.l2,\n            l1 = _ref7.l1,\n            maxNorm = _ref7.maxNorm,\n            weightsConfig = _ref7.weightsConfig;\n\n        _classCallCheck(this, Network);\n\n        this.state = \"not-defined\";\n        this.layers = [];\n        this.epochs = 0;\n        this.iterations = 0;\n        this.dropout = dropout == false ? 1 : dropout;\n        this.error = 0;\n        activation = this.format(activation);\n        adaptiveLR = this.format(adaptiveLR);\n        cost = this.format(cost);\n\n        if (learningRate != null) {\n            this.learningRate = learningRate;\n        }\n\n        if (l2) {\n            this.l2 = typeof l2 == \"boolean\" && l2 ? 0.001 : l2;\n            this.l2Error = 0;\n        }\n\n        if (l1) {\n            this.l1 = typeof l1 == \"boolean\" && l1 ? 0.005 : l1;\n            this.l1Error = 0;\n        }\n\n        if (maxNorm) {\n            this.maxNorm = typeof maxNorm == \"boolean\" && maxNorm ? 1000 : maxNorm;\n            this.maxNormTotal = 0;\n        }\n\n        // Activation function / Learning Rate\n        switch (true) {\n\n            case adaptiveLR == \"rmsprop\":\n                this.learningRate = this.learningRate == undefined ? 0.001 : this.learningRate;\n                break;\n\n            case adaptiveLR == \"adam\":\n                this.learningRate = this.learningRate == undefined ? 0.01 : this.learningRate;\n                break;\n\n            case adaptiveLR == \"adadelta\":\n                this.rho = rho == null ? 0.95 : rho;\n                break;\n\n            default:\n\n                if (this.learningRate == undefined) {\n                    switch (activation) {\n                        case \"relu\":\n                        case \"lrelu\":\n                        case \"rrelu\":\n                        case \"elu\":\n                            this.learningRate = 0.01;\n                            break;\n                        case \"tanh\":\n                        case \"lecuntanh\":\n                            this.learningRate = 0.001;\n                            break;\n                        default:\n                            this.learningRate = 0.2;\n                    }\n                }\n        }\n\n        this.adaptiveLR = [false, null, undefined].includes(adaptiveLR) ? \"noadaptivelr\" : adaptiveLR;\n        this.weightUpdateFn = NetMath[this.adaptiveLR];\n        this.activation = typeof activation == \"function\" ? activation : NetMath[activation].bind(this);\n        this.activationConfig = activation;\n        this.cost = NetMath[cost];\n\n        if (this.adaptiveLR == \"rmsprop\") {\n            this.rmsDecay = rmsDecay == undefined ? 0.99 : rmsDecay;\n        }\n\n        if (activation == \"lrelu\") {\n            this.lreluSlope = lreluSlope == undefined ? -0.0005 : lreluSlope;\n        } else if (activation == \"elu\") {\n            this.eluAlpha = eluAlpha == undefined ? 1 : eluAlpha;\n        }\n\n        // Weights distributiom\n        this.weightsConfig = { distribution: \"uniform\" };\n\n        if (weightsConfig != undefined) {\n            if (weightsConfig.distribution) {\n                this.weightsConfig.distribution = this.format(weightsConfig.distribution);\n            }\n        }\n\n        if (this.weightsConfig.distribution == \"uniform\") {\n            this.weightsConfig.limit = weightsConfig && weightsConfig.limit != undefined ? weightsConfig.limit : 0.1;\n        } else if (this.weightsConfig.distribution == \"gaussian\") {\n\n            this.weightsConfig.mean = weightsConfig.mean || 0;\n            this.weightsConfig.stdDeviation = weightsConfig.stdDeviation || 0.05;\n        }\n\n        // Status\n        if (layers.length) {\n\n            switch (true) {\n\n                case layers.every(function (item) {\n                    return Number.isInteger(item);\n                }):\n                    this.layers = layers.map(function (size) {\n                        return new Layer(size);\n                    });\n                    this.state = \"constructed\";\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item instanceof Layer;\n                }):\n                    this.state = \"constructed\";\n                    this.layers = layers;\n                    this.initLayers();\n                    break;\n\n                case layers.every(function (item) {\n                    return item === Layer;\n                }):\n                    this.state = \"defined\";\n                    this.definedLayers = layers;\n                    break;\n\n                default:\n                    throw new Error(\"There was an error constructing from the layers given.\");\n            }\n        }\n    }\n\n    _createClass(Network, [{\n        key: \"initLayers\",\n        value: function initLayers(input, expected) {\n            var _this4 = this;\n\n            switch (this.state) {\n\n                case \"initialised\":\n                    return;\n\n                case \"defined\":\n                    this.layers = this.definedLayers.map(function (layer, li) {\n\n                        if (!li) return new layer(input);\n\n                        if (li == _this4.definedLayers.length - 1) return new layer(expected);\n\n                        var hidden = _this4.definedLayers.length - 2;\n                        var size = input / expected > 5 ? expected + (expected + Math.abs(input - expected) / 4) * (hidden - li + 1) / (hidden / 2) : input >= expected ? input + expected * (hidden - li) / (hidden / 2) : expected + input * (hidden - li) / (hidden / 2);\n\n                        return new layer(Math.max(Math.round(size), 0));\n                    });\n                    break;\n\n                case \"not-defined\":\n                    this.layers[0] = new Layer(input);\n                    this.layers[1] = new Layer(Math.ceil(input / expected > 5 ? expected + Math.abs(input - expected) / 4 : input + expected));\n                    this.layers[2] = new Layer(Math.ceil(expected));\n                    break;\n            }\n\n            this.layers.forEach(this.joinLayer.bind(this));\n            this.state = \"initialised\";\n        }\n    }, {\n        key: \"joinLayer\",\n        value: function joinLayer(layer, layerIndex) {\n\n            layer.activation = this.activation;\n            layer.adaptiveLR = this.adaptiveLR;\n            layer.activationConfig = this.activationConfig;\n            layer.dropout = this.dropout;\n\n            layer.weightsConfig = {};\n            Object.assign(layer.weightsConfig, this.weightsConfig);\n            layer.weightsInitFn = NetMath[layer.weightsConfig.distribution];\n\n            if (this.rho != undefined) {\n                layer.rho = this.rho;\n            }\n\n            if (this.eluAlpha != undefined) {\n                layer.eluAlpha = this.eluAlpha;\n            }\n\n            if (this.l2 != undefined) {\n                layer.l2 = this.l2;\n            }\n\n            if (this.l1 != undefined) {\n                layer.l1 = this.l1;\n            }\n\n            if (layerIndex) {\n                layer.weightsConfig.fanIn = this.layers[layerIndex - 1].size;\n                this.layers[layerIndex - 1].weightsConfig.fanOut = layer.size;\n                this.layers[layerIndex - 1].assignNext(layer);\n                layer.assignPrev(this.layers[layerIndex - 1]);\n            }\n        }\n    }, {\n        key: \"forward\",\n        value: function forward(data) {\n\n            if (this.state != \"initialised\") {\n                throw new Error(\"The network layers have not been initialised.\");\n            }\n\n            if (data === undefined) {\n                throw new Error(\"No data passed to Network.forward()\");\n            }\n\n            if (data.length != this.layers[0].neurons.length) {\n                console.warn(\"Input data length did not match input layer neurons count.\");\n            }\n\n            this.layers[0].neurons.forEach(function (neuron, ni) {\n                return neuron.activation = data[ni];\n            });\n            this.layers.forEach(function (layer, li) {\n                return li && layer.forward(data);\n            });\n            return this.layers[this.layers.length - 1].neurons.map(function (n) {\n                return n.activation;\n            });\n        }\n    }, {\n        key: \"backward\",\n        value: function backward(expected) {\n            if (expected === undefined) {\n                throw new Error(\"No data passed to Network.backward()\");\n            }\n\n            if (expected.length != this.layers[this.layers.length - 1].neurons.length) {\n                console.warn(\"Expected data length did not match output layer neurons count.\");\n            }\n\n            this.layers[this.layers.length - 1].backward(expected);\n\n            for (var layerIndex = this.layers.length - 2; layerIndex > 0; layerIndex--) {\n                this.layers[layerIndex].backward();\n            }\n        }\n    }, {\n        key: \"train\",\n        value: function train(dataSet) {\n            var _this5 = this;\n\n            var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref8$epochs = _ref8.epochs,\n                epochs = _ref8$epochs === undefined ? 1 : _ref8$epochs,\n                callback = _ref8.callback;\n\n            return new Promise(function (resolve, reject) {\n\n                if (dataSet === undefined || dataSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                if (_this5.state != \"initialised\") {\n                    _this5.initLayers(dataSet[0].input.length, (dataSet[0].expected || dataSet[0].output).length);\n                }\n\n                _this5.layers.forEach(function (layer) {\n                    return layer.state = \"training\";\n                });\n\n                var iterationIndex = 0;\n                var epochsCounter = 0;\n\n                var doEpoch = function doEpoch() {\n                    _this5.epochs++;\n                    _this5.error = 0;\n                    iterationIndex = 0;\n\n                    if (_this5.l2Error != undefined) {\n                        _this5.l2Error = 0;\n                    }\n\n                    if (_this5.l1Error != undefined) {\n                        _this5.l1Error = 0;\n                    }\n\n                    doIteration();\n                };\n\n                var doIteration = function doIteration() {\n\n                    if (!dataSet[iterationIndex].hasOwnProperty(\"input\") || !dataSet[iterationIndex].hasOwnProperty(\"expected\") && !dataSet[iterationIndex].hasOwnProperty(\"output\")) {\n                        return reject(\"Data set must be a list of objects with keys: 'input' and 'expected' (or 'output')\");\n                    }\n\n                    _this5.resetDeltaWeights();\n\n                    var input = dataSet[iterationIndex].input;\n                    var output = _this5.forward(input);\n                    var target = dataSet[iterationIndex].expected || dataSet[iterationIndex].output;\n\n                    _this5.backward(target);\n                    _this5.applyDeltaWeights();\n\n                    var iterationError = _this5.cost(target, output);\n                    _this5.error += iterationError;\n\n                    if (typeof callback == \"function\") {\n                        callback({\n                            iterations: _this5.iterations,\n                            error: iterationError,\n                            input: input\n                        });\n                    }\n\n                    _this5.iterations++;\n                    iterationIndex++;\n\n                    if (iterationIndex < dataSet.length) {\n                        setTimeout(doIteration.bind(_this5), 0);\n                    } else {\n\n                        epochsCounter++;\n                        console.log(\"Epoch: \" + _this5.epochs + \" Error: \" + _this5.error / iterationIndex + (_this5.l2 == undefined ? \"\" : \" L2 Error: \" + _this5.l2Error / iterationIndex));\n\n                        if (epochsCounter < epochs) {\n                            doEpoch();\n                        } else {\n                            _this5.layers.forEach(function (layer) {\n                                return layer.state = \"initialised\";\n                            });\n                            resolve();\n                        }\n                    }\n                };\n\n                doEpoch();\n            });\n        }\n    }, {\n        key: \"test\",\n        value: function test(testSet) {\n            var _this6 = this;\n\n            return new Promise(function (resolve, reject) {\n\n                if (testSet === undefined || testSet === null) {\n                    reject(\"No data provided\");\n                }\n\n                var totalError = 0;\n                var testIteration = 0;\n\n                var testInput = function testInput() {\n\n                    var output = _this6.forward(testSet[testIteration].input);\n                    var target = testSet[testIteration].expected || testSet[testIteration].output;\n\n                    totalError += _this6.cost(target, output);\n\n                    console.log(\"Testing iteration\", testIteration + 1, totalError / (testIteration + 1));\n\n                    testIteration++;\n\n                    if (testIteration < testSet.length) setTimeout(testInput.bind(_this6), 0);else resolve(totalError / testSet.length);\n                };\n                testInput();\n            });\n        }\n    }, {\n        key: \"resetDeltaWeights\",\n        value: function resetDeltaWeights() {\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights = neuron.weights.map(function (dw) {\n                        return 0;\n                    });\n                });\n            });\n        }\n    }, {\n        key: \"applyDeltaWeights\",\n        value: function applyDeltaWeights() {\n            var _this7 = this;\n\n            this.layers.forEach(function (layer, li) {\n                li && layer.neurons.forEach(function (neuron) {\n                    neuron.deltaWeights.forEach(function (dw, dwi) {\n\n                        if (_this7.l2 != undefined) {\n                            _this7.l2Error += 0.5 * _this7.l2 * Math.pow(neuron.weights[dwi], 2);\n                        }\n\n                        if (_this7.l1 != undefined) {\n                            _this7.l1Error += _this7.l1 * Math.abs(neuron.weights[dwi]);\n                        }\n\n                        neuron.weights[dwi] = _this7.weightUpdateFn.bind(_this7, neuron.weights[dwi], dw, neuron, dwi)();\n\n                        if (_this7.maxNorm != undefined) {\n                            _this7.maxNormTotal += Math.pow(neuron.weights[dwi], 2);\n                        }\n                    });\n                    neuron.bias = _this7.weightUpdateFn.bind(_this7, neuron.bias, neuron.deltaBias, neuron)();\n                });\n            });\n\n            if (this.maxNorm != undefined) {\n                this.maxNormTotal = Math.sqrt(this.maxNormTotal);\n                NetMath.maxNorm.bind(this)();\n            }\n        }\n    }, {\n        key: \"toJSON\",\n        value: function toJSON() {\n            return {\n                layers: this.layers.map(function (layer) {\n                    return {\n                        neurons: layer.neurons.map(function (neuron) {\n                            return {\n                                bias: neuron.bias,\n                                weights: neuron.weights\n                            };\n                        })\n                    };\n                })\n            };\n        }\n    }, {\n        key: \"fromJSON\",\n        value: function fromJSON(data) {\n\n            if (data === undefined || data === null) {\n                throw new Error(\"No JSON data given to import.\");\n            }\n\n            this.layers = data.layers.map(function (layer) {\n                return new Layer(layer.neurons.length, layer.neurons);\n            });\n            this.state = \"constructed\";\n            this.initLayers();\n        }\n    }, {\n        key: \"format\",\n        value: function format(string) {\n            return string && typeof string == \"string\" ? string.replace(/(_|\\s)/g, \"\").toLowerCase() : string;\n        }\n    }]);\n\n    return Network;\n}();\n\ntypeof window == \"undefined\" && (global.Network = Network);\n\"use strict\";\n\nvar Neuron = function () {\n    function Neuron(importedData) {\n        _classCallCheck(this, Neuron);\n\n        if (importedData) {\n            this.imported = true;\n            this.weights = importedData.weights || [];\n            this.bias = importedData.bias;\n        }\n    }\n\n    _createClass(Neuron, [{\n        key: \"init\",\n        value: function init(size) {\n            var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                adaptiveLR = _ref9.adaptiveLR,\n                activationConfig = _ref9.activationConfig,\n                eluAlpha = _ref9.eluAlpha;\n\n            this.deltaWeights = this.weights.map(function (v) {\n                return 0;\n            });\n\n            switch (adaptiveLR) {\n                case \"gain\":\n                    this.weightGains = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 1;\n                    });\n                    this.biasGain = 1;\n                    break;\n\n                case \"adagrad\":\n                case \"rmsprop\":\n                case \"adadelta\":\n                    this.biasCache = 0;\n                    this.weightsCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                        return 0;\n                    });\n\n                    if (adaptiveLR == \"adadelta\") {\n                        this.adadeltaCache = [].concat(_toConsumableArray(new Array(size))).map(function (v) {\n                            return 0;\n                        });\n                        this.adadeltaBiasCache = 0;\n                    }\n                    break;\n\n                case \"adam\":\n                    this.m = 0;\n                    this.v = 0;\n                    break;\n            }\n\n            if (activationConfig == \"rrelu\") {\n                this.rreluSlope = Math.random() * 0.001;\n            } else if (activationConfig == \"elu\") {\n                this.eluAlpha = eluAlpha;\n            }\n        }\n    }]);\n\n    return Neuron;\n}();\n\ntypeof window == \"undefined\" && (global.Neuron = Neuron);\n//# sourceMappingURL=Network.concat.js.map\n//# sourceMappingURL=Network.min.js.map\n"]}